name: cd-dgraph
on: workflow_dispatch
jobs:
  dgraph-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install dependencies
        run: make linux-dependency
      - name: go mod tidy check
        run: |
          #!/bin/bash
          go mod tidy
          if [[ "$(git status --porcelain)" ]]; then \
             echo "need to run go mod tidy"
             exit 1
          fi
      - name: protobuf check
        run: |
          #!/bin/bash
          pushd protos
          make regenerate
          popd
          if [[ "$(git status --porcelain)" ]]; then \
            echo "Generated protos different in release."
            exit 1
          fi
      - name: Set Dgraph Release Version
        run: |
          #!/bin/bash
          GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$GIT_BRANCH_NAME" == "release/v"* ]]; 
          then
            echo "this is a release branch"
          else
            echo "this is NOT a release branch"
            exit 1
          fi
          DGRAPH_VERSION=$(git rev-parse --abbrev-ref HEAD | sed  's/release\///')
          echo "making a new release for "$DGRAPH_VERSION
          echo "DGRAPH_VERSION=$DGRAPH_VERSION" >> $GITHUB_ENV
      - name: Make Linux Build
        run: make dgraph DGRAPH_VERSION=${{ env.DGRAPH_VERSION }}
      - name: Get SHA
        run: sha256sum dgraph/dgraph | cut -c-64 > dgraph/dgraph-linux-amd64.sha256
      - name: Make Archive
        run: tar -zcvf dgraph/dgraph-linux-amd64.tar.gz dgraph/dgraph
      - uses: actions/upload-artifact@v3
        with:
          name: dgraph
          path: |
            dgraph/dgraph.sha256
            dgraph/dgraph.tar.gz
      - name: Make Dgraph Docker Image
        run: |
          make docker-image DGRAPH_VERSION=latest
          make docker-image DGRAPH_VERSION=${{ env.DGRAPH_VERSION }}
      - name: Make Dgraph Standalone Docker Image
        run: |
          make docker-image-standalone DGRAPH_VERSION=latest
          make docker-image-standalone DGRAPH_VERSION=${{ env.DGRAPH_VERSION }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_TEST }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_TOKEN_TEST }}
      - name: Push Images to DockerHub
        run: |
          docker push dgraph/standalone:latest
          docker push dgraph/standalone:${{ env.DGRAPH_VERSION }}
          docker push dgraph/dgraph:latest
          docker push dgraph/dgraph:${{ env.DGRAPH_VERSION }}
