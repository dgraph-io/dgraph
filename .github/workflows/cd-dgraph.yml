name: cd-dgraph
on: workflow_dispatch
jobs:
  dgraph-build-amd64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install protobuf-compiler
        run: sudo apt-get install -y protobuf-compiler
      - name: Check protobuf
        run: |
          cd ./protos
          go mod tidy
          make regenerate
          git diff --exit-code -- .
      - name: Set Dgraph Release Version
        run: |
          #!/bin/bash
          GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$GIT_BRANCH_NAME" == "release/v"* ]]; 
          then
            echo "this is a release branch"
          else
            echo "this is NOT a release branch"
            exit 1
          fi
          # check if HEAD points to tagged commit, which is needed for tagging docker image
          if [[ -z git tag --points-at HEAD ]]
          then
            echo "current commit is not tagged, aborting"
            exit 1
          fi
          # DGRAPH_RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD | sed  's/release\///')
          # For slash we get version from tag off of release/v21.03-slash branch
          DGRAPH_RELEASE_VERSION=$(git tag --points-at HEAD)
          DGRAPH_RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD | sed  's/release\///')
          echo "making a new release for dgraph "$DGRAPH_RELEASE_VERSION
          echo "DGRAPH_RELEASE_VERSION=$DGRAPH_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Make Dgraph Linux Build
        run: make dgraph DGRAPH_VERSION=${{ env.DGRAPH_RELEASE_VERSION }}
      - name: Generate SHA for Dgraph Linux Build
        run: cd dgraph && sha256sum dgraph | cut -c-64 > dgraph-checksum-linux-amd64.sha256
      - name: Tar Archive for Dgraph Linux Build
        run: cd dgraph && tar -zcvf dgraph-linux-amd64.tar.gz dgraph
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            dgraph/dgraph-checksum-linux-amd64.sha256
            dgraph/dgraph-linux-amd64.tar.gz
      - name: Make Dgraph Docker Image
        run: |
          make docker-image DGRAPH_VERSION=${{ env.DGRAPH_RELEASE_VERSION }}
      - name: Make Dgraph Standalone Docker Image with Version
        run: |
          make docker-image-standalone DGRAPH_VERSION=${{ env.DGRAPH_RELEASE_VERSION }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_TOKEN }}
      - name: Push Images to DockerHub
        run: |
          docker push dgraph/standalone:${{ env.DGRAPH_RELEASE_VERSION }}
          docker push dgraph/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
