name: ci-dgraph-load-tests
on:
  pull_request:
    paths:
      - '**/*.go'
      - '**/go.mod'
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
      - 'release/**'

env:
  AWS_REGION: us-west-2
  AWS_ROLE: '${{ vars.AWS_ROLE }}'
# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  dgraph-load-tests:
    if: github.event.pull_request.draft == false
    runs-on: warp-ubuntu-latest-x64-4x
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Make Linux Build and Docker Image
        run: make docker-image # this internally builds dgraph binary
      - name: Build Test Binary
        run: |
          #!/bin/bash
          # build the test binary
          cd t; go build .
      - name: Clean Up Environment
        run: |
          #!/bin/bash
          # clean cache
          go clean -testcache
          # clean up docker containers before test execution
          cd t; ./t -r
      # this is required to upload p dir in case the workflow fails
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: '${{ env.AWS_ROLE }}'
          role-session-name: dgraph-load-test
          aws-region: '${{ env.AWS_REGION }}'
      - name: Run Load Tests
        run: |
          #!/bin/bash
          # go env settings
          export GOPATH=~/go
          # move the binary
          cp dgraph/dgraph ~/go/bin/dgraph
          # run the load tests
          cd t; ./t --suite=load
          # clean up docker containers after test execution
          ./t -r
          # sleep
          sleep 5
