apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "dgraph.zero.fullname" . }}"
  labels:
    app: {{ template "dgraph.name" . }}
    chart: {{ template "dgraph.chart" . }}
    component: {{ .Values.zero.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "dgraph.zero.fullname" . }}-headless
  replicas: {{ .Values.zero.replicaCount }}
  podManagementPolicy: {{ .Values.zero.podManagementPolicy | quote }}
  updateStrategy:
    type: {{ .Values.zero.updateStrategy | quote }}
    {{- if (eq "Recreate" .Values.zero.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.zero.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.zero.rollingUpdatePartition }}
    {{- end }}
  selector:
    matchLabels:
      app: {{ template "dgraph.name" . }}
      chart: {{ template "dgraph.chart" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.zero.name }}
  template:
    metadata:
      name: "{{ template "dgraph.zero.fullname" . }}"
      labels:
        app: {{ template "dgraph.name" . }}
        chart: {{ template "dgraph.chart" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.zero.name }}
    spec:
      {{- if or (eq .Values.zero.antiAffinity "hard") (eq .Values.zero.antiAffinity "soft") .Values.zero.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.zero.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - {{ .Values.zero.name }}
            topologyKey: {{ .Values.zero.podAntiAffinitytopologyKey }}
      {{- else if eq .Values.zero.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - {{ .Values.zero.name }}
              topologyKey: {{ .Values.zero.podAntiAffinitytopologyKey }}        
      {{- end }}
      {{- with .Values.zero.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
      {{- end }}
{{- include "dgraph.imagePullSecrets" . | indent 6 }}
      {{- if .Values.zero.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.zero.securityContext.fsGroup }}
        runAsUser: {{ .Values.zero.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.zero.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.zero.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.zero.tolerations }}
      tolerations:
{{ toYaml .Values.zero.tolerations | indent 8 }}
      {{- end }}
      containers:
      - name: "{{ template "dgraph.zero.fullname" . }}"
        image: "{{ template "dgraph.image" . }}"
        ports:
        - containerPort: 5080
          name: zero-grpc
        - containerPort: 6080
          name: zero-http
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
         - bash
         - "-c"
         - |
            set -ex
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
             ordinal=${BASH_REMATCH[1]}
             idx=$(($ordinal + 1))
             if [[ $ordinal -eq 0 ]]; then
               dgraph zero --my=$(hostname -f):5080 --idx $idx --replicas {{ .Values.zero.replicaCount }}
             else
               dgraph zero --my=$(hostname -f):5080 --peer {{ template "dgraph.zero.fullname" . }}-0.{{ template "dgraph.zero.fullname" . }}-headless.${POD_NAMESPACE}.svc.cluster.local:5080 --idx $idx --replicas {{ .Values.zero.replicaCount }}
             fi 
        resources:
{{ toYaml .Values.zero.resources | indent 10 }}
        {{- if .Values.zero.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            port: {{ .Values.zero.livenessProbe.port }}
            path: {{ .Values.zero.livenessProbe.path }}
          initialDelaySeconds: {{ .Values.zero.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.zero.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.zero.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.zero.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.zero.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.zero.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            port: {{ .Values.zero.livenessProbe.port }}
            path: {{ .Values.zero.livenessProbe.path }}          
          initialDelaySeconds: {{ .Values.zero.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.zero.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.zero.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.zero.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.zero.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        {{- if .Values.zero.persistence.enabled }}
        - name: datadir
          mountPath: /dgraph
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.zero.terminationGracePeriodSeconds }}
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
{{- if .Values.zero.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- range $key, $value := .Values.zero.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
          volume.alpha.kubernetes.io/storage-class: anything
      spec:
        accessModes:
        {{- range .Values.zero.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.zero.persistence.size | quote }}
      {{- if .Values.zero.persistence.storageClass }}
      {{- if (eq "-" .Values.zero.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: {{ .Values.zero.persistence.storageClass | quote }}
      {{- end -}}
      {{- end -}}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}
