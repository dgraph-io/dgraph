-
  name: "Strip Dgraph result list for non-list query result"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" } }
    
-
  name: "Nullable query result becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  response: |
    { }
  expected: |
    { "getAuthor": null }

-
  name: "Multiple nullable query results becomes nulls (with alias)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
      auth : getAuthor(id: "0x1") {
        name
      }
    }
  response: |
    { }
  expected: |
    { "getAuthor": null, "auth": null }

-
  name: "Multiple query results with nullable becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
      auth : getAuthor(id: "0x1") {
        name
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" }, "auth": null }

-
  name: "Missing nullable field becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        dob
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "dob": null } }

-
  name: "Missing nullable field becomes null (aliased)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        birthday : dob
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "birthday": null } }

-
  name: "Missing nullable becomes null (deep)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsRequired {
          title
          text
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author", "postsRequired": [ { "title": "A Title" } ] } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsRequired": [ { "title": "A Title", "text": null } ] } }

-
  name: "Missing required list becomes []"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsRequired {
          title
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsRequired": [ ] } }

-
  name: "Missing nullable list becomes []"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          title
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsNullable": [ ] } }

-
  name: "Missing list becomes [] (aliased)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        posts : postsRequired {
          title
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "posts": [ ] } }

-
  name: "Multiple missing lists become [] (with alias)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        posts : postsRequired {
          title
        }
        postsNullable {
          title
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "posts": [ ], "postsNullable": [ ] } }

-
  name: "Sensible error when expecting single but multiple items returned"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author" }, { "name": "A.N. Other Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" } }
  errors:
    [ { "message": "Dgraph returned a list, but was expecting just one item." } ]

-
  name: "Error gets propagated to nullable parent if missing non-nullable field"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        dob
      }
    }
  response: |
    { "getAuthor": [ { "dob": "2000-01-01" } ] }
  expected: |
    { "getAuthor": null }
  errors:
    [ { "message": "Crushed a null value" }, 
    { "message": "Crushed an object because of null error" } ]

-
  name: "Error in [T!] list propagated as null list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsElmntRequired {
          title
          text
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author", "postsElmntRequired": [ { "title": "A Title", "text": "Some Text" }, { "text": "More Text" } ] } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsElmntRequired": null } }
  errors:
    [ { "message": "Crushed a null value" }, 
    { "message": "Crushed an object because of null error" },
    { "message": "Crushed a list because of null error" } ]

-
  name: "Error in [T] list propagated as null element in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          title
          text
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author", 
      "postsNullable": [ 
        { "title": "A Title", "text": "Some Text" }, { "text": "More Text" } ] } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", 
      "postsNullable": [ 
        { "title": "A Title", "text": "Some Text" }, null ] } }
  errors:
    [ { "message": "Crushed a null value" }, 
    { "message": "Crushed an object because of null error" }]

-
  name: "Error in [T]! list propagated as null element in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullableListRequired {
          title
          text
        }
      }
    }
  response: |
    { "getAuthor": [ { "name": "A.N. Author", 
      "postsNullableListRequired": [ 
        { "title": "A Title", "text": "Some Text" }, { "text": "More Text" } ] } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", 
      "postsNullableListRequired": [ 
        { "title": "A Title", "text": "Some Text" }, null ] } }
  errors:
    [ { "message": "Crushed a null value" }, 
    { "message": "Crushed an object because of null error" }]
