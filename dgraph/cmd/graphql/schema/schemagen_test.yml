schemas:
  -
    name: "Object data type"
    input: |
      type A {
        id: ID!
        p: P
      }
      type P {
        id: ID!
      }
    output: |
      type A {
        A.p: uid
      }
      A.p: uid .
      type P {
      }

  -
    name: "Scalar list"
    input: |
      type X {
        id: ID!
        names: [String!]
      }
    output: |
      type X {
        X.names: [string]
      }
      X.names: [string] .

  -
    name: "Object list"
    input: |
      type X {
        p: [P!]!
      }
      type P {
        id: ID!
      }
    output: |
      type X {
        X.p: [uid]
      }
      X.p: [uid] .
      type P {
      }

  -
    name: "Scalar types"
    input: |
      type X {
        p: Int
        pList: [Int]
        q: Boolean
        r: String
        rList: [String]
        s: DateTime
        sList: [DateTime]
        t: Float
        tList: [Float]
        u: ID
      }
    output: |
      type X {
        X.p: int
        X.pList: [int]
        X.q: bool
        X.r: string
        X.rList: [string]
        X.s: dateTime
        X.sList: [dateTime]
        X.t: float
        X.tList: [float]
      }
      X.p: int .
      X.pList: [int] .
      X.q: bool .
      X.r: string .
      X.rList: [string] .
      X.s: dateTime .
      X.sList: [dateTime] .
      X.t: float .
      X.tList: [float] .

  -
    name: "enum - always gets an index"
    input: |
      type X {
        e: E
        f: [E]
      }
      enum E { A }
    output: |
      type X {
        X.e: string
        X.f: [string]
      }
      X.e: string @index(exact) .
      X.f: [string] @index(exact) .


  -
    name: "Search indexes are correct"
    input: |
      type X {
        i1: Int @search
        i2: Int @search(by: [int])
        f1: Float @search
        f2: Float @search(by: [float])
        b1: Boolean @search
        b2: Boolean @search(by: [bool])
        s1: String @search
        s2: String @search(by: [hash])
        s3: String @search(by: [exact])
        s4: String @search(by: [term])
        s5: String @search(by: [fulltext])
        s6: String @search(by: [trigram])
        s7: String @search(by: [regexp])
        s8: String @search(by: [trigram, fulltext, term, exact]) 
        dt1: DateTime @search
        dt2: DateTime @search(by: [year])
        dt3: DateTime @search(by: [month])
        dt4: DateTime @search(by: [day])
        dt5: DateTime @search(by: [hour])
        e: E @search
      }
      enum E { A }
    output: |
      type X {
        X.i1: int
        X.i2: int
        X.f1: float
        X.f2: float
        X.b1: bool
        X.b2: bool
        X.s1: string
        X.s2: string
        X.s3: string
        X.s4: string
        X.s5: string
        X.s6: string
        X.s7: string
        X.s8: string
        X.dt1: dateTime
        X.dt2: dateTime
        X.dt3: dateTime
        X.dt4: dateTime
        X.dt5: dateTime
        X.e: string
      }
      X.i1: int @index(int) .
      X.i2: int @index(int) .
      X.f1: float @index(float) .
      X.f2: float @index(float) .
      X.b1: bool @index(bool) .
      X.b2: bool @index(bool) .
      X.s1: string @index(term) .
      X.s2: string @index(hash) .
      X.s3: string @index(exact) .
      X.s4: string @index(term) .
      X.s5: string @index(fulltext) .
      X.s6: string @index(trigram) .
      X.s7: string @index(trigram) .
      X.s8: string @index(trigram, fulltext, term, exact) .
      X.dt1: dateTime @index(year) .
      X.dt2: dateTime @index(year) .
      X.dt3: dateTime @index(month) .
      X.dt4: dateTime @index(day) .
      X.dt5: dateTime @index(hour) .
      X.e: string @index(exact) .

  -
    name: "interface and types interact properly"
    input: |
      interface A {
        id: ID!
        name: String! @search(by: [exact])
      }
      type B implements A {
        correct: Boolean @search
      }
      type C implements A {
        dob: DateTime!
      }
    output: |
      type A {
        A.name: string
      }
      A.name: string @index(exact) .
      type B {
        A.name: string
        B.correct: bool
      }
      B.correct: bool @index(bool) .
      type C {
        A.name: string
        C.dob: dateTime
      }
      C.dob: dateTime .
