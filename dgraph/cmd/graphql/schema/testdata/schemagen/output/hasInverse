#######################
# Input Schema
#######################

type Post {
	id: ID!
	author: Author! @hasInverse(field: "posts")
}

type Author {
	id: ID!
	posts: [Post!]! @hasInverse(field: "author")
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @searchable(by: DgraphIndex!) on FIELD_DEFINITION

#######################
# Generated Types
#######################

type AddAuthorPayload {
	author: Author
}

type AddPostPayload {
	post: Post
}

type DeleteAuthorPayload {
	msg: String
}

type DeletePostPayload {
	msg: String
}

type UpdateAuthorPayload {
	author: Author
}

type UpdatePostPayload {
	post: Post
}

#######################
# Generated Inputs
#######################

input AuthorFilter {
	dgraph: String
}

input AuthorInput {
	posts: [PostRef!]!
}

input AuthorRef {
	id: ID!
}

input PatchAuthor {
	posts: [PostRef!]
}

input PatchPost {
	author: AuthorRef
}

input PostFilter {
	dgraph: String
}

input PostInput {
	author: AuthorRef!
}

input PostRef {
	id: ID!
}

input UpdateAuthorInput {
	id: ID!
	patch: PatchAuthor!
}

input UpdatePostInput {
	id: ID!
	patch: PatchPost!
}

#######################
# Generated Query
#######################

type Query {
	getPost(id: ID!): Post
	queryPost(filter: PostFilter!): [Post]
	getAuthor(id: ID!): Author
	queryAuthor(filter: AuthorFilter!): [Author]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addPost(input: PostInput!): AddPostPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(id: ID!): DeletePostPayload
	addAuthor(input: AuthorInput!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(id: ID!): DeleteAuthorPayload
}
