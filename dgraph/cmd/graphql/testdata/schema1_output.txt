type Post {
  id: ID!
  title: String!
  text: String
  author: Author!
  postType: PostType!
}

type Author {
  id: ID!
  name: String!
  posts: [Post!]!
  friends: [Author!]!
}

enum PostType {
  Statement
  Question
  Answer
}

# -------------------------------
# Below here is added by DgraphQL
# -------------------------------

scalar ID
scalar String
scalar Int
scalar Float
scalar Boolean
scalar DateTime

input PostInput {
  title: String!
  text: String
  author: AuthorRef!
  postType: PostType!
}

input AuthorInput {
  name: String!
  posts: [PostRef!]!
  friends: [AuthorRef!]!
}

input PostUpdate {
  title: String
  text: String
  author: AuthorRef
  postType: PostType
}

input AuthorUpdate {
  name: String
  posts: [PostRef!]
  friends: [AuthorRef!]
}

input AuthorRef {
    id: ID!
}

input PostRef {
    id: ID!
}

type AddPostPayload {
    post: Post!
}

type UpdatePostPayload {
    post: Post!
}

type DeletePostPayload {
    msg: String!
}

type AddAuthorPayload {
    author: Author!
}

type UpdateAuthorPayload {
    author: Author!
}

type DeleteAuthorPayload {
    msg: String!
}

input AuthorFilter {
    dgraph: String
}

input PostFilter {
    dgraph: String
}

type Query {
  getAuthor(id: ID!): Author!
  getPost(id: ID!): Post!

  queryAuthor(filter: AuthorFilter!): [Author!]!
  queryPost(filter: PostFilter!): [Post!]!
}

type Mutation {
  addAuthor(input: AuthorInput!): AddAuthorPayload!
  updateAuthor(id: ID!,input: AuthorUpdate): UpdateAuthorPayload!
  deleteAuthor(id: ID!): DeleteAuthorPayload!

  addPost(input: PostInput!): AddPostPayload!
  updatePost(id: ID!,input: PostUpdate): UpdatePostPayload!
  deletePost(id: ID!): DeletePostPayload!
}
