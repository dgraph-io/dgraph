type User {
# @auth(
#     add: { rule: "$ROLE: { eq: ADD-BOT }" },
#     update: { or: [ 
#         { rule: "$ROLE: { eq: ADMIN }" }, 
#         { rule: "(filter: { username: { eq: $USER } })"}
#     ]}
#     delete: { rule: "false" }) {
  username: String! @id
  age: Int # @auth(query: {rule: "filter: {username: {eq: $USER }}"})
  isPublic: Boolean
  disabled: Boolean # @auth(update: { rule: "$ROLE: { eq: ADMIN }" })
  tickets: [Ticket] @hasInverse(field: assignedTo)
  secrets: [UserSecret]
}

type UserSecret @auth(
    query: { rule: """
        query($USER: String!) { 
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """},
    delete: { rule: """
        query($USER: String!) { 
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """}
){
  id: ID!
  aSecret: String @search(by: [term])
  ownedBy: String @search(by: [hash])
}

type Region {
  id: ID!
  name: String
  global: Boolean @search
  users: [User]
}

type Movie @auth(
    # You can query a movie if 
    # - it's not hidden 
    #  AND
    # - you are in a region it's available OR it's globally available 
    query: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) { 
                    queryMovie {
                        regionsAvailable { 
                            users(filter: {username: {eq: $USER}}) { 
                                __typename 
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query { 
                    queryMovie {
                        regionsAvailable(filter: { global: true }) { 
                            __typename 
                        }
                    }
                }"""
            }
        ]}
    ]}
#     add: { rule: "$ROLE: { eq: ADMIN }" }
#     update: { rule: "$ROLE: { eq: ADMIN }" }
#     delete: { rule: "$ROLE: { eq: ADMIN }" }
) {
  content: String
  hidden: Boolean @search
  regionsAvailable: [Region] 
}

type Issue {
#     @auth(
#     query: { and: [
#       {rule: "$ROLE: { eq: ADMIN }"},
#       {rule: "owner(filter: { username: { eq: $USER } })"},
#     ]}
#     add: { and: [
#       {rule: "$ROLE: { eq: ADMIN }"},
#       {rule: "owner(filter: { username: { eq: $USER } })"},
#     ]}
#     update: { and: [
#       {rule: "$ROLE: { eq: ADMIN }"},
#       {rule: "owner(filter: { username: { eq: $USER } })"},
#     ]}
#     delete: { and: [
#       {rule: "$ROLE: { eq: ADMIN }"},
#       {rule: "owner(filter: { username: { eq: $USER } })"},
#     ]}
# ) {
  id: ID!
  msg: String
  owner: User!
}

type Log {
#     @auth(
#     query: { rule: "$ROLE: { eq: ADMIN }" }
#     add: { rule: "$ROLE: { eq: ADMIN }" }
#     update: { rule: "$ROLE: { eq: ADMIN }" }
#     delete: { rule: "$ROLE: { eq: ADMIN }" }
# ) {
  id: ID!
  logs: String
}

type Project {
#     @auth(
#     query: { or: [
#         { rule: """roles(filter: { permissions: { eq: VIEW } }) { 
#                         assignedTo(filter: { username: { eq: $USER } }) 
#                     }""" },
#         { rule: "$ROLE: { eq: ADMIN }" }
#     ]}

#     # Only admins can create projects
#     add: { rule: "$ROLE: { eq: ADMIN }" }

#     update: { rule: """roles(filter: { permissions: { eq: CREATE } }) { 
#                         assignedTo(filter: { username: { eq: $USER } }) 
#                     }""" } 

#     delete: { rule: "false" }
# ) {
  projID: ID!
  name: String!
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject) # @auth(add: {rule: "DENY"})
}

type Role {
  id: ID!
  permission: Permission @search
  assignedTo: [User]
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column {
#     @auth(
#     query: { rule: """inProject { 
#                         role(filter: { permission: { eq: VIEW } } ) { 
#                             users(filter: { username: { eq: $USER } })
#                         }
#                     }"""},
#     add: { rule: """inProject { 
#                         role(filter: { permission: { eq: ADMIN } } ) { 
#                             users(filter: { username: { eq: $USER } })
#                         }
#                     }"""},
#     update: { rule: """inProject { 
#                     role(filter: { permission: { eq: EDIT } } ) { 
#                         users(filter: { username: { eq: $USER } })
#                     }
#                 }"""},
#     delete: { rule: "false" }
# ) {
  colID: ID!
  inProject: Project! # @auth(update: { rule: "DENY" })
  name: String!
  tickets: [Ticket] @hasInverse(field: onColumn)
}

type Ticket @auth(
    query: { rule: """
        query($USER: String!) { 
            queryTicket { 
                onColumn{
                    inProject { 
                        roles(filter: { permission: { eq: VIEW } } ) { 
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""}
    # add: { rule: """onColumn {
    #                     inProject { 
    #                         role(filter: { permission: { eq: WRITE } } ) { 
    #                             users(filter: { username: { eq: $USER } })
    #                         }
    #                     }
    #                 }"""},
    # update: { rule: """onColumn {
    #                     inProject { 
    #                         role(filter: { permission: { eq: WRITE } } ) { 
    #                             users(filter: { username: { eq: $USER } })
    #                         }
    #                     }
    #                 }"""},
    delete: { rule: """
        query($USER: String!) { 
            queryTicket { 
                onColumn{
                    inProject { 
                        roles(filter: { permission: { eq: EDIT } } ) { 
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""}
){
    id: ID!
    onColumn: Column!
    title: String! @search(by: [term])
    assignedTo: [User!]
}

# Authorization auth-header secretkey https://xyz.io/jwt/claims
