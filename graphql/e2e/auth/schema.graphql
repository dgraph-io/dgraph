type User @secret(field: "password") @auth(
  delete: { and: [
    { rule: """
    query($USER: String!) {
        queryUser(filter: { username: { eq: $USER } }) {
        __typename
        }
    }
    """ },
    { rule: """
    query {
        queryUser(filter: { isPublic: true }) {
            __typename
        }
    }
    """}]
  }
){
  username: String! @id
  age: Int
  isPublic: Boolean @search
  disabled: Boolean
  tickets: [Ticket] @hasInverse(field: assignedTo)
  secrets: [UserSecret]
  issues: [Issue]
  tweets: [Tweets] @hasInverse(field: user)
}

type Tweets @auth (
    query: { rule: "{$ROLE: { eq: \"admin\" } }"},
    add: { rule: "{$USER: { eq: \"foo\" } }"},
    delete: { rule: "{$USER: { eq: \"foo\" } }"},
    update: { rule: "{$USER: { eq: \"foo\" } }"}
){
    id: String! @id
    text: String! @search(by: [fulltext])
    user: User
    timestamp: DateTime! @search
    score: Int @search
    streams: String @search
}

type UserSecret @auth(
    query: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """},
    add: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """},
    update: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """}
    delete: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """}
){
  id: ID!
  aSecret: String @search(by: [term])
  ownedBy: String @search(by: [hash])
}

type Region @auth(
    delete: { rule: """
    query {
        queryRegion(filter: { global: true }) { __typename }
    }
    """}
){
  id: ID!
  name: String @search(by: [hash])
  global: Boolean @search
  users: [User]
}

type Movie @auth(
    query: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
    add: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
    update: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
  delete: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]}
) {
  id: ID!
  content: String @search(by: [hash])
  hidden: Boolean @search
  regionsAvailable: [Region]
  reviews: [Review]
  random: String
}

type Issue @auth(
     query:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     add:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     update:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     delete:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]}
){
  id: ID!
  msg: String
  owner: User!
  random: String
}

type Log @secret(field: "pwd") @auth(
    password: { rule: "{$ROLE: { eq: \"Admin\" } }"},
    query: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
    add: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
    update: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
    delete: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
) {
  id: ID!
  logs: String
  random: String
}

type ComplexLog @auth(
     query: { and : [
      { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
      { not : { rule: "{$ROLE: { eq: \"USER\" }}" }}
     ]},
      add: {
        not: { rule: "{$ROLE: { eq: \"USER\" }}" }
      },
      update: {
        not: { rule: "{$ROLE: { eq: \"USER\" }}" }
      },
      delete: {
      or : [
        { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
        { rule: """
        query {
          queryComplexLog(filter: { visible: true }) {
            __typename
          }
        }"""
        }
    ]}
) {
  id: ID!
  logs: String
  visible: Boolean @search
}

type Project @secret(field: "pwd") @auth(
    password: { or: [
        { rule: """query($USER: String!) {
                     queryProject {
                       roles(filter: { permission: { eq: EDIT } }) {
                        assignedTo(filter: { username: { eq: $USER } }) {
                         __typename
                        }
                       }
                     }
                 }""" },
        { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
    ]},
     query: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: VIEW } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]},
     add: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: ADMIN } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]},
     update: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: ADMIN } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]}
) {
  projID: ID!
  name: String! @search(by: [hash])
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject)
  random: String
}

type Role @auth(
  delete:  { not : { rule: "{ $ROLE: { eq: \"USER\" }}"} }
){
  id: ID!
  permission: Permission @search
  assignedTo: [User]
}

type Group @auth(
    query:  { or : [
        { rule: """
        query($USER: String!) {
            queryGroup {
                users(filter: { username: { eq: $USER } }) {
                    __typename
                }
            }
        }"""},
        {  rule: """
        query($PERMISSION: Permission!) {
            queryGroup(filter: { readPermission: { eq: $PERMISSION } }) {
                __typename
            }
        }"""},
        { and: [
            { rule: """
            query($USER: String!) {
                queryGroup {
                    createdBy(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }"""},
            {  not: { rule: """
            query($PERMISSION: Permission!) {
                queryGroup(filter: { writePermission: { eq: $PERMISSION } }) {
                    __typename
                }
            }"""} },
        ]}
    ]}){
    id: ID!
    readPermission: Permission @search
    writePermission: Permission @search
    users: [User]
    createdBy: User
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column @auth(
    password: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: EDIT } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    query: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: VIEW } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    add: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: ADMIN } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    update: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: ADMIN } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    delete: { rule: """
      query($USER: String!) {
          queryColumn {
              inProject {
                  roles(filter: { permission: { eq: ADMIN } } ) {
                      assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                      }
                  }
              }
          }
      }"""},
) {
  colID: ID!
  inProject: Project! # @auth(update: { rule: "DENY" })
  name: String! @search(by: [hash])
  tickets: [Ticket] @hasInverse(field: onColumn)
  random: String
}

type Ticket @auth(
    query: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: VIEW } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    add: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    update: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    delete: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""}
){
    id: ID!
    onColumn: Column!
    title: String! @search(by: [term])
    assignedTo: [User!]
}

type Review @auth() {
    id: ID!
    comment: String!
}

type Student @dgraph(type: "is7sowSm")
@auth(query:  { and : [ {rule: """
query($USER: String!) {
    queryStudent(filter: {email: { eq: $USER}}) {
        __typename
    }
}
"""},{ rule: "{$ROLE: { eq: \"ADMIN\" }}"}]}) {
    id: ID!
    email: String! @dgraph(pred: "IOw80vnV") @search(by: [hash])
}

type Contact @auth(
    query: { rule: "{$ContactRole: { eq: \"ADMINISTRATOR\"}}" }
) {
    id: ID!
    nickName: String @search(by: [exact, term, fulltext, regexp])
    adminTasks: [AdminTask] @hasInverse(field: forContact)
    tasks: [Task] @hasInverse(field: forContact)
}

type AdminTask @auth(
    query: { rule: "{$TaskRole: { eq: \"ADMINISTRATOR\"}}" }
) {
    id: ID!
    name: String @search(by: [exact, term, fulltext, regexp])
    occurrences: [TaskOccurrence] @hasInverse(field: adminTask)
    forContact: Contact @hasInverse(field: adminTasks)
}

type Task {
    id: ID!
    name: String @search(by: [exact, term, fulltext, regexp])
    occurrences: [TaskOccurrence] @hasInverse(field: task)
    forContact: Contact @hasInverse(field: tasks)
}

type TaskOccurrence @auth(
    query: { or : [ { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
        {and : [
            {rule: "{$TaskOccuranceRole: { eq: \"ADMINISTRATOR\"}}"},
            {rule: """
            query($TaskOccuranceRole: String!) {
                queryTaskOccurrence(filter: {role: { eq: $TaskOccuranceRole}}) {
                    __typename
                }
            }
            """}
] } ] }
) {
    id: ID!
    due: DateTime @search
    comp: DateTime @search
    task: Task @hasInverse(field: occurrences)
    adminTask: AdminTask @hasInverse(field: occurrences)
    isPublic: Boolean @search
    role: String @search(by: [exact, term, fulltext, regexp])
}

type Author {
  id: ID!
  name: String! @search(by: [exact])
  posts: [Post] @hasInverse(field: author)
}

interface Post @secret(field: "pwd") @auth(
    password: { rule: "{$ROLE: { eq: \"Admin\" } }"},
    query: { rule: """
            query($USER: String!) { 
              queryPost{
                  author(filter: {name: {eq: $USER}}){
                      name
                  }
              } 
            }""" },
    add: { rule: """
            query($USER: String!) { 
              queryPost{
                  author(filter: {name: {eq: $USER}}){
                      name
                  }
              } 
            }""" },
    delete: { rule: """
            query($USER: String!) { 
              queryPost{
                  author(filter: {name: {eq: $USER}}){
                      name
                  }
              } 
            }""" },
    update: { rule: """
            query($USER: String!) { 
              queryPost{
                  author(filter: {name: {eq: $USER}}){
                      name
                  }
              } 
            }""" }
){
    id: ID!
    text: String! @search(by: [exact])
    topic: String
    datePublished: DateTime @search
    author: Author! 
}

interface MsgPost @auth(
    query: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
    add: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
    delete: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
    update: { rule: "{$ROLE: { eq: \"ADMIN\" } }" }
){
    sender: Author
    receiver: Author
}

type Question implements Post  @auth(
    password:{ rule: """
            query($ANS: Boolean!) {
              queryQuestion(filter: { answered: $ANS } ) {
                id
                text
              }
            }""" },
    query:{ rule: """
            query($ANS: Boolean!) { 
              queryQuestion(filter: { answered: $ANS } ) { 
                id 
              } 
            }""" },
    add:{ rule: """
            query($ANS: Boolean!) { 
              queryQuestion(filter: { answered: $ANS } ) { 
                id 
              } 
            }""" },
    delete:{ rule: """
            query($ANS: Boolean!) { 
              queryQuestion(filter: { answered: $ANS } ) { 
                id 
              } 
            }""" },
    update:{ rule: """
            query($ANS: Boolean!) { 
              queryQuestion(filter: { answered: $ANS } ) { 
                id 
              } 
            }""" },
){
    answered:  Boolean @search
}

type FbPost implements Post & MsgPost @auth(
    password: { rule: """
        query($USER: String!) {
            queryFbPost{
                author(filter: {name: {eq: $USER}}){
                    name
                }
            }
        }"""
    }
) {
    postCount: Int
}

type Answer implements Post {
    markedUseful:  Boolean @search
}

interface A {
    id: ID!
    fieldA: String @search(by: [exact])
    random: String 
}

type B implements A {
    fieldB: Boolean @search
}

type C implements A @auth(
    query:{ rule: """
            query($ANS: Boolean!) { 
              queryC(filter: { fieldC: $ANS } ) { 
                id 
              } 
            }""" },
    delete:{ rule: """
            query($ANS: Boolean!) { 
              queryC(filter: { fieldC: $ANS } ) { 
                id 
              } 
            }""" }
){
    fieldC: Boolean @search
}

type Todo {
    id: ID
    owner: String
    text: String
}

type Book @auth(
    query: { or: [
        {rule: "{$USER: { eq: {\"a\": \"b\"} } }"}, # this will be used to test eq with object
        {rule: "{$USER: { eq: 123.12 } }"}, # this will be used to test eq with float
        {rule: "{$USER: { eq: 1237890123456 } }"}, # this will be used to test eq with int64
        {rule: "{$USER: { eq: 1234 } }"}, # this will be used to test eq with int and array too
        {rule: "{$USER: { eq: true } }"}, # this will be used to test eq with boolean

        {rule: "{$USER: { in: [{\"c\": \"d\"}, {\"e\":\"f\"}] } }"}, # this will be used to test in with object
        {rule: "{$USER: { in: [456.23, 312.124] } }"}, # this will be used to test in with float
        {rule: "{$USER: { in: [9876543219876543, 1246879976444232435] } }"}, # this will be used to test in with int64
        {rule: "{$USER: { in: [5678, 6872] } }"}, # this will be used to test in with int and array too

        {rule: "{$USER: { regexp: \"^(.*)@dgraph.io$\" } }"}
    ]}
){
    bookId: String!
    name: String!
    desc: String!
}


type Mission @key(fields: "id") @auth(
    query:{ rule: """
            query($USER: String!) { 
              queryMission(filter: { supervisorName: {eq: $USER} } ) { 
                id 
              } 
            }""" }
){
    id: String! @id
    crew: [Astronaut]
    supervisorName: String @search(by: [exact])
    designation: String!
    startDate: String
    endDate: String
}

type Astronaut @key(fields: "id") @extends @auth(
    query: { rule: "{$ROLE: { eq: \"admin\" } }"},
    add: { rule: "{$USER: { eq: \"foo\" } }"},
    delete: { rule: "{$USER: { eq: \"foo\" } }"},
    update: { rule: "{$USER: { eq: \"foo\" } }"}
){
    id: ID! @external
    missions: [Mission]
}

interface Vehicle @auth(
    query:{
        or:[
            {rule: "{$ROLE: { eq: \"ADMIN\" } }"},
            {rule: "query($USER: String!) { queryVehicle(filter: { owner: { eq: $USER }}) { owner } }"}
        ]
    }
){
    owner: String! @search(by: [exact])
}

type Car implements Vehicle {
    id: ID!
    manufacturer: String!
}

type Country @auth(
    add: { rule: """
        query($USER: String!) {
            queryCountry(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """} ) {
    id: String! @id
    name: String!
    ownedBy: String @search(by: [hash])
    states: [State] @hasInverse(field: country)
}

type State @auth(
    update: { rule: """
        query($USER: String!) {
            queryState(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """} ) {
    code: String! @id
    name: String!
    ownedBy: String @search(by: [hash])
    country: Country
}
