type User @auth(
  delete: { and: [
    { rule: """
    query($USER: String!) {
        queryUser(filter: { username: { eq: $USER } }) {
        __typename
        }
    }
    """ },
    { rule: """
    query {
        queryUser(filter: { isPublic: true }) {
            __typename
        }
    }
    """}]
  }
){
  username: String! @id
  age: Int
  isPublic: Boolean @search
  disabled: Boolean
  tickets: [Ticket] @hasInverse(field: assignedTo)
  secrets: [UserSecret]
  issues: [Issue]
}

type UserSecret @auth(
    query: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """},
    add: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """},
    update: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """}
    delete: { rule: """
        query($USER: String!) {
            queryUserSecret(filter: { ownedBy: { eq: $USER } }) {
                __typename
            }
        }
    """}
){
  id: ID!
  aSecret: String @search(by: [term])
  ownedBy: String @search(by: [hash])
}

type Region @auth(
    delete: { rule: """
    query {
        queryRegion(filter: { global: true }) { __typename }
    }
    """}
){
  id: ID!
  name: String @search(by: [hash])
  global: Boolean @search
  users: [User]
}

type Movie @auth(
    query: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
    add: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
    update: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]},
  delete: { and: [
        { not: { rule: """
            query {
                queryMovie(filter: { hidden: true }) { __typename }
            }
        """}},
        { or: [
            { rule: """
                query($USER: String!) {
                    queryMovie {
                        regionsAvailable {
                            users(filter: {username: {eq: $USER}}) {
                                __typename
                            }
                        }
                    }
                }"""
            },
            { rule: """
                query {
                    queryMovie {
                        regionsAvailable(filter: { global: true }) {
                            __typename
                        }
                    }
                }"""
            }
        ]}
    ]}
) {
  id: ID!
  content: String @search(by: [hash])
  hidden: Boolean @search
  regionsAvailable: [Region]
  reviews: [Review]
  random: String
}

type Issue @auth(
     query:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     add:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     update:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]},
     delete:  { and : [
       { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
       { rule: """ query($USER: String!) {
                      queryIssue {
                          owner(filter: { username: { eq: $USER } }) {
                              __typename
                          }
                      }
                }"""}
     ]}
){
  id: ID!
  msg: String
  owner: User!
  random: String
}

type Log @auth(
      query: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
      add: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
      update: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
      delete: { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
) {
  id: ID!
  logs: String
  random: String
}

type ComplexLog @auth(
     query: { and : [
      { rule: "{$ROLE: { eq: \"ADMIN\" }}" },
      { not : { rule: "{$ROLE: { eq: \"USER\" }}" }}
     ]},
      add: {
        not: { rule: "{$ROLE: { eq: \"USER\" }}" }
      },
      update: {
        not: { rule: "{$ROLE: { eq: \"USER\" }}" }
      },
      delete: {
      or : [
        { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
        { rule: """
        query {
          queryComplexLog(filter: { visible: true }) {
            __typename
          }
        }"""
        }
    ]}
) {
  id: ID!
  logs: String
  visible: Boolean @search
}

type Project @auth(
     query: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: VIEW } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]},
     add: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: ADMIN } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]},
     update: { or: [
         { rule: """query($USER: String!) {
                      queryProject {
                        roles(filter: { permission: { eq: ADMIN } }) {
                         assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                         }
                        }
                      }
                  }""" },
         { rule: "{$ROLE: { eq: \"ADMIN\" }}" }
     ]}
) {
  projID: ID!
  name: String! @search(by: [hash])
  roles: [Role]
  columns: [Column] @hasInverse(field: inProject)
  random: String
}

type Role @auth(
  delete:  { not : { rule: "{ $ROLE: { eq: \"USER\" }}"} }
){
  id: ID!
  permission: Permission @search
  assignedTo: [User]
}

type Group @auth(
    query:  { or : [
        { rule: """
        query($USER: String!) {
            queryGroup {
                users(filter: { username: { eq: $USER } }) {
                    __typename
                }
            }
        }"""},
        {  rule: """
        query($PERMISSION: Permission!) {
            queryGroup(filter: { readPermission: { eq: $PERMISSION } }) {
                __typename
            }
        }"""},
        { and: [
            { rule: """
            query($USER: String!) {
                queryGroup {
                    createdBy(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }"""},
            {  not: { rule: """
            query($PERMISSION: Permission!) {
                queryGroup(filter: { writePermission: { eq: $PERMISSION } }) {
                    __typename
                }
            }"""} },
        ]}
    ]}){
    id: ID!
    readPermission: Permission @search
    writePermission: Permission @search
    users: [User]
    createdBy: User
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}

type Column @auth(
    query: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: VIEW } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    add: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: ADMIN } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    update: { rule: """
    query($USER: String!) {
        queryColumn {
            inProject {
                roles(filter: { permission: { eq: ADMIN } } ) {
                    assignedTo(filter: { username: { eq: $USER } }) {
                        __typename
                    }
                }
            }
        }
    }"""},
    delete: { rule: """
      query($USER: String!) {
          queryColumn {
              inProject {
                  roles(filter: { permission: { eq: ADMIN } } ) {
                      assignedTo(filter: { username: { eq: $USER } }) {
                          __typename
                      }
                  }
              }
          }
      }"""},
) {
  colID: ID!
  inProject: Project! # @auth(update: { rule: "DENY" })
  name: String! @search(by: [hash])
  tickets: [Ticket] @hasInverse(field: onColumn)
  random: String
}

type Ticket @auth(
    query: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: VIEW } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    add: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    update: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""},
    delete: { rule: """
        query($USER: String!) {
            queryTicket {
                onColumn{
                    inProject {
                        roles(filter: { permission: { eq: EDIT } } ) {
                            assignedTo(filter: { username: { eq: $USER } }) {
                                __typename
                            }
                        }
                    }
                }
            }
        }"""}
){
    id: ID!
    onColumn: Column!
    title: String! @search(by: [term])
    assignedTo: [User!]
}

type Review @auth() {
    id: ID!
    comment: String!
}

type Student @dgraph(type: "is7sowSm")
@auth(query:  { and : [ {rule: """
query($USER: String!) {
    queryStudent(filter: {email: { eq: $USER}}) {
        __typename
    }
}
"""},{ rule: "{$ROLE: { eq: \"ADMIN\" }}"}]}) {
    id: ID!
    email: String! @dgraph(pred: "IOw80vnV") @search(by: [hash])
}

type Contact @auth(
    query: { rule: "{$ContactRole: { eq: \"ADMINISTRATOR\"}}" }
) {
    id: ID!
    nickName: String @search(by: [exact, term, fulltext, regexp])
    adminTasks: [AdminTask] @hasInverse(field: forContact)
    tasks: [Task] @hasInverse(field: forContact)
}

type AdminTask @auth(
    query: { rule: "{$TaskRole: { eq: \"ADMINISTRATOR\"}}" }
) {
    id: ID!
    name: String @search(by: [exact, term, fulltext, regexp])
    occurrences: [TaskOccurrence] @hasInverse(field: adminTask)
    forContact: Contact @hasInverse(field: adminTasks)
}

type Task {
    id: ID!
    name: String @search(by: [exact, term, fulltext, regexp])
    occurrences: [TaskOccurrence] @hasInverse(field: task)
    forContact: Contact @hasInverse(field: tasks)
}

type TaskOccurrence @auth(
    query: { or : [ { rule: "{$ROLE: { eq: \"ADMIN\" }}"},
        {and : [
            {rule: "{$TaskOccuranceRole: { eq: \"ADMINISTRATOR\"}}"},
            {rule: """
            query($TaskOccuranceRole: String!) {
                queryTaskOccurrence(filter: {role: { eq: $TaskOccuranceRole}}) {
                    __typename
                }
            }
            """}
] } ] }
) {
    id: ID!
    due: DateTime @search
    comp: DateTime @search
    task: Task @hasInverse(field: occurrences)
    adminTask: AdminTask @hasInverse(field: occurrences)
    isPublic: Boolean @search
    role: String @search(by: [exact, term, fulltext, regexp])
}

