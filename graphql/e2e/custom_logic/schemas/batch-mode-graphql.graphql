type Car @remote {
  id: ID!
  name: String!
}

type User {
  id: ID!
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlUserNames"
        method: "POST"
        operation: "batch"
        graphql: "query { userNames(input: [{ id: $id, age: $age}]) }"
      }
    )
  age: Int! @search
  cars: Car
    @custom(
      http: {
        url: "http://mock:8888/gqlCars"
        method: "POST"
        operation: "batch"
        graphql: "query { cars(input: [{ id: $id}]) }"
      }
    )
  schools: [School]
}

type School {
  id: ID!
  established: Int! @search
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlSchoolNames"
        method: "POST"
        operation: "batch"
        graphql: "query { schoolNames(input: [{ id: $id}]) }"
      }
    )
  classes: [Class]
    @custom(
      http: {
        url: "http://mock:8888/gqlClasses"
        method: "POST"
        operation: "batch"
        graphql: "query { classes(input: [{ id: $id}]) }"
      }
    )
  teachers: [Teacher]
}

type Class @remote {
  id: ID!
  name: String!
}

type Teacher {
  tid: ID!
  age: Int!
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlTeacherNames"
        method: "POST"
        operation: "batch"
        graphql: "query { teacherNames(input: [{ xid: $tid}]) }"
      }
    )
}
