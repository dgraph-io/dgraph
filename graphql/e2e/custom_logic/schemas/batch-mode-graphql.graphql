type Car @remote {
  id: ID!
  name: String!
}

type User {
  id: ID!
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlUserNames"
        method: "POST"
        mode: BATCH
        graphql: "query($uinput: [UserInput]) { userNames(users: $uinput) }"
        body: "{ id: $id, age: $age }"
      }
    )
  age: Int! @search
  cars: Car
    @custom(
      http: {
        url: "http://mock:8888/gqlCars"
        method: "POST"
        mode: BATCH
        graphql: "query($cinput: [UserInput]) { cars(users: $cinput) }"
        body: "{ id: $id, age: $age }",
      }
    )
  schools: [School]
}

type School {
  id: ID!
  established: Int! @search
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlSchoolNames"
        method: "POST"
        mode: BATCH
        graphql: "query($sinput: [SchoolInput]) { schoolNames(schools: $sinput) }",
        body: "{ id: $id, established: $established }"
      }
    )
  classes: [Class]
    @custom(
      http: {
        url: "http://mock:8888/gqlClasses"
        method: "POST"
        mode: BATCH
        graphql: "query($cinput: [SchoolInput]) { classes(schools: $cinput) }",
        body: "{ id: $id, established: $established }"
      }
    )
  teachers: [Teacher]
}

type Class @remote {
  id: ID!
  name: String!
}

type Teacher {
  tid: ID!
  age: Int!
  name: String
    @custom(
      http: {
        url: "http://mock:8888/gqlTeacherNames"
        method: "POST"
        mode: BATCH
        graphql: "query($tinput: [TeacherInput]) { teacherNames(teachers: $tinput) }"
        body: "{ id: $tid, age: $age }"
      }
    )
}
