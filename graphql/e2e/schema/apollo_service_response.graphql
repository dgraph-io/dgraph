#######################
# Input Schema
#######################

type Mission {
	id: ID!
	crew: [Astronaut]
	designation: String!
	startDate: String
	endDate: String
}

type Astronaut @key(fields: "id") @extends {
	id: ID! @external
	missions(filter: MissionFilter, order: MissionOrder, first: Int, offset: Int): [Mission]
	missionsAggregate(filter: MissionFilter): MissionAggregateResult
}

type User @remote {
	id: ID!
	name: String!
}

type Car {
	id: ID!
	name: String!
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @cacheControl(maxAge: Int!) on QUERY

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddAstronautPayload {
	astronaut(filter: AstronautFilter, order: AstronautOrder, first: Int, offset: Int): [Astronaut]
	numUids: Int
}

type AddCarPayload {
	car(filter: CarFilter, order: CarOrder, first: Int, offset: Int): [Car]
	numUids: Int
}

type AddMissionPayload {
	mission(filter: MissionFilter, order: MissionOrder, first: Int, offset: Int): [Mission]
	numUids: Int
}

type AstronautAggregateResult {
	count: Int
	idMin: ID
	idMax: ID
}

type CarAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type DeleteAstronautPayload {
	astronaut(filter: AstronautFilter, order: AstronautOrder, first: Int, offset: Int): [Astronaut]
	msg: String
	numUids: Int
}

type DeleteCarPayload {
	car(filter: CarFilter, order: CarOrder, first: Int, offset: Int): [Car]
	msg: String
	numUids: Int
}

type DeleteMissionPayload {
	mission(filter: MissionFilter, order: MissionOrder, first: Int, offset: Int): [Mission]
	msg: String
	numUids: Int
}

type MissionAggregateResult {
	count: Int
	designationMin: String
	designationMax: String
	startDateMin: String
	startDateMax: String
	endDateMin: String
	endDateMax: String
}

type UpdateAstronautPayload {
	astronaut(filter: AstronautFilter, order: AstronautOrder, first: Int, offset: Int): [Astronaut]
	numUids: Int
}

type UpdateCarPayload {
	car(filter: CarFilter, order: CarOrder, first: Int, offset: Int): [Car]
	numUids: Int
}

type UpdateMissionPayload {
	mission(filter: MissionFilter, order: MissionOrder, first: Int, offset: Int): [Mission]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum AstronautHasFilter {
	missions
}

enum AstronautOrderable {
	id
}

enum CarHasFilter {
	name
}

enum CarOrderable {
	name
}

enum MissionHasFilter {
	crew
	designation
	startDate
	endDate
}

enum MissionOrderable {
	designation
	startDate
	endDate
}

#######################
# Generated Inputs
#######################

input AddAstronautInput {
	id: ID!
	missions: [MissionRef]
}

input AddCarInput {
	name: String!
}

input AddMissionInput {
	crew: [AstronautRef]
	designation: String!
	startDate: String
	endDate: String
}

input AstronautFilter {
	id: [ID!]
	has: [AstronautHasFilter]
	and: [AstronautFilter]
	or: [AstronautFilter]
	not: AstronautFilter
}

input AstronautOrder {
	asc: AstronautOrderable
	desc: AstronautOrderable
	then: AstronautOrder
}

input AstronautPatch {
	missions: [MissionRef]
}

input AstronautRef {
	id: ID
	missions: [MissionRef]
}

input CarFilter {
	id: [ID!]
	has: [CarHasFilter]
	and: [CarFilter]
	or: [CarFilter]
	not: CarFilter
}

input CarOrder {
	asc: CarOrderable
	desc: CarOrderable
	then: CarOrder
}

input CarPatch {
	name: String
}

input CarRef {
	id: ID
	name: String
}

input MissionFilter {
	id: [ID!]
	has: [MissionHasFilter]
	and: [MissionFilter]
	or: [MissionFilter]
	not: MissionFilter
}

input MissionOrder {
	asc: MissionOrderable
	desc: MissionOrderable
	then: MissionOrder
}

input MissionPatch {
	crew: [AstronautRef]
	designation: String
	startDate: String
	endDate: String
}

input MissionRef {
	id: ID
	crew: [AstronautRef]
	designation: String
	startDate: String
	endDate: String
}

input UpdateAstronautInput {
	filter: AstronautFilter!
	set: AstronautPatch
	remove: AstronautPatch
}

input UpdateCarInput {
	filter: CarFilter!
	set: CarPatch
	remove: CarPatch
}

input UpdateMissionInput {
	filter: MissionFilter!
	set: MissionPatch
	remove: MissionPatch
}

#######################
# Generated Query
#######################

type Query {
	getMyFavoriteUsers(id: ID!): [User]
	getMission(id: ID!): Mission
	queryMission(filter: MissionFilter, order: MissionOrder, first: Int, offset: Int): [Mission]
	aggregateMission(filter: MissionFilter): MissionAggregateResult
	getCar(id: ID!): Car
	queryCar(filter: CarFilter, order: CarOrder, first: Int, offset: Int): [Car]
	aggregateCar(filter: CarFilter): CarAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addMission(input: [AddMissionInput!]!): AddMissionPayload
	updateMission(input: UpdateMissionInput!): UpdateMissionPayload
	deleteMission(filter: MissionFilter!): DeleteMissionPayload
	addAstronaut(input: [AddAstronautInput!]!): AddAstronautPayload
	updateAstronaut(input: UpdateAstronautInput!): UpdateAstronautPayload
	deleteAstronaut(filter: AstronautFilter!): DeleteAstronautPayload
	addCar(input: [AddCarInput!]!): AddCarPayload
	updateCar(input: UpdateCarInput!): UpdateCarPayload
	deleteCar(filter: CarFilter!): DeleteCarPayload
}

