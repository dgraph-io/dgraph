- name: "Add one node"
  gqlquery: |
    mutation addUserSecret($secret: AddUserSecretInput!) {
      addUserSecret(input: [$secret]) {
        userSecret {
          id
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "secret":
      { "aSecret": "it is",
        "ownedBy": "user1"
      }
    }
  uids: |
    { "UserSecret_1": "0x123" }
  authquery: |-
    query {
      UserSecret(func: uid(UserSecret_1)) @filter(uid(UserSecret_Auth2)) {
        uid
      }
      UserSecret_1 as var(func: uid(0x123))
      UserSecret_Auth2 as var(func: uid(UserSecret_1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }
  authjson: |
    {
      "UserSecret": [ { "uid": "0x123" }]
    }

- name: "Add multiple nodes"
  gqlquery: |
    mutation addUserSecret($secrets: [AddUserSecretInput!]!) {
      addUserSecret(input: $secrets) {
        userSecret {
          id
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "secrets": 
      [
        { "aSecret": "it is", "ownedBy": "user1" },
        { "aSecret": "another", "ownedBy": "user1" } 
      ]
    }
  uids: |
    {
      "UserSecret_1": "0x123",
      "UserSecret_2": "0x456"
    }
  authquery: |-
    query {
      UserSecret(func: uid(UserSecret_1)) @filter(uid(UserSecret_Auth2)) {
        uid
      }
      UserSecret_1 as var(func: uid(0x123, 0x456))
      UserSecret_Auth2 as var(func: uid(UserSecret_1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }
  authjson: |
    {
      "UserSecret": [ { "uid": "0x123" }, { "uid": "0x456" } ]
    }

- name: "Add one node that fails auth"
  gqlquery: |
    mutation addUserSecret($secret: AddUserSecretInput!) {
      addUserSecret(input: [$secret]) {
        userSecret {
          id
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    {
      "secret":
        {
          "aSecret": "it is",
          "ownedBy": "user2"
        }
    }
  uids: |
    {
      "UserSecret_1": "0x123"
    }
  authquery: |-
    query {
      UserSecret(func: uid(UserSecret_1)) @filter(uid(UserSecret_Auth2)) {
        uid
      }
      UserSecret_1 as var(func: uid(0x123))
      UserSecret_Auth2 as var(func: uid(UserSecret_1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }
  authjson: |
    {
      "UserSecret": [ ]
    }
  error:
    { "message": "mutation failed because authorization failed" }

- name: "Add multiple nodes that fails auth"
  gqlquery: |
    mutation addUserSecret($secrets: [AddUserSecretInput!]!) {
      addUserSecret(input: $secrets) {
        userSecret {
          id
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "secrets": 
      [
        { "aSecret": "it is", "ownedBy": "user1" },
        { "aSecret": "another", "ownedBy": "user2" } 
      ]
    }
  uids: |
    {
      "UserSecret_1": "0x123",
      "UserSecret_2": "0x456"
    }
  authquery: |-
    query {
      UserSecret(func: uid(UserSecret_1)) @filter(uid(UserSecret_Auth2)) {
        uid
      }
      UserSecret_1 as var(func: uid(0x123, 0x456))
      UserSecret_Auth2 as var(func: uid(UserSecret_1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }
  authjson: |
    {
      "UserSecret": [ { "uid": "0x123" }]
    }
  error:
    { "message": "mutation failed because authorization failed" }

- name: "Add multiple nodes of different types"
  gqlquery: |
    mutation addColumn($col: AddColumnInput!) {
      addColumn(input: [$col]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col":
      { "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "title": "a ticket" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
      "Project_1": [ { "uid": "0x123", "dgraph.type": ["Project"] } ]
    }
  uids: |
    {
      "Column_2": "0x456",
      "Ticket_3": "0x789"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Ticket(func: uid(Ticket_3)) @filter(uid(Ticket_Auth4)) {
        uid
      }
      Ticket_3 as var(func: uid(0x789))
      Ticket_Auth4 as var(func: uid(Ticket_3)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ],
      "Ticket": [ { "uid": "0x789" } ]
    }

- name: "Add multiple nodes of different types that fails auth"
  gqlquery: |
    mutation addColumn($col: AddColumnInput!) {
      addColumn(input: [$col]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col":
      {
        "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "title": "a ticket" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Project_1": [ { "uid": "0x123", "dgraph.type": ["Project"]} ]
    }
  uids: |
    {
      "Column_2": "0x456",
      "Ticket_3": "0x789"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Ticket(func: uid(Ticket_3)) @filter(uid(Ticket_Auth4)) {
        uid
      }
      Ticket_3 as var(func: uid(0x789))
      Ticket_Auth4 as var(func: uid(Ticket_3)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }
  authjson: |
    {
      "Ticket": [ { "uid": "0x789" } ]
    }
  error:
    { "message": "mutation failed because authorization failed" }

- name: "Add multiples of multiple nodes of different types"
  gqlquery: |
    mutation addColumn($col1: AddColumnInput!, $col2: AddColumnInput!) {
      addColumn(input: [$col1, $col2]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col1":
      { "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "title": "a ticket" } ]
      },
      "col2":
      { "inProject": { "projID": "0x123" },
        "name": "another column",
        "tickets": [ { "title": "another ticket" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Project_1": [ { "uid": "0x123", "dgraph.type":["Project"] } ]
    }
  uids: |
    {
      "Column_2": "0x456",
      "Ticket_3": "0x789",
      "Column_4": "0x459",
      "Ticket_5": "0x799"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456, 0x459))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Ticket(func: uid(Ticket_3)) @filter(uid(Ticket_Auth4)) {
        uid
      }
      Ticket_3 as var(func: uid(0x789, 0x799))
      Ticket_Auth4 as var(func: uid(Ticket_3)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" }, { "uid": "0x459" } ],
      "Ticket": [ { "uid": "0x789" }, { "uid": "0x799" } ]
    }

- name: "Add multiples of multiple nodes of different types that fails auth"
  gqlquery: |
    mutation addColumn($col1: AddColumnInput!, $col2: AddColumnInput!) {
      addColumn(input: [$col1, $col2]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col1":
      { "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "title": "a ticket" } ]
      },
      "col2":
      { "inProject": { "projID": "0x123" },
        "name": "another column",
        "tickets": [ { "title": "another ticket" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Project_1": [ { "uid": "0x123", "dgraph.type":["Project"]} ]
    }
  uids: |
    {
      "Column_2": "0x456",
      "Ticket_3": "0x789",
      "Column_4": "0x459",
      "Ticket_5": "0x799"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456, 0x459))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Ticket(func: uid(Ticket_3)) @filter(uid(Ticket_Auth4)) {
        uid
      }
      Ticket_3 as var(func: uid(0x789, 0x799))
      Ticket_Auth4 as var(func: uid(Ticket_3)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ],
      "Ticket": [ { "uid": "0x789" }, { "uid": "0x799" } ]
    }
  error:
    { "message": "mutation failed because authorization failed" }

# See comments about additional deletes in add_mutation_test.yaml.
# Because of those additional deletes, for example, when we add a column and
# link it to an existing ticket, we remove that ticket from the column it was
# attached to ... so we need authorization to update that column as well
# as to add the new column.
- name: "Add with auth on additional delete"
  gqlquery: |
    mutation addColumn($col: AddColumnInput!) {
      addColumn(input: [$col]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col":
      { "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "id": "0x789" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
      Ticket_2(func: uid(0x789)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
      "Project_1": [ { "uid": "0x123", "dgraph.type": ["Project"] } ],
      "Ticket_2": [ { "uid": "0x789", "dgraph.type": ["Ticket"] } ]
    }
  dgquerysec: |-
    query {
      var(func: uid(0x789)) {
        Column_4 as Ticket.onColumn
      }
      Column_4(func: uid(Column_4)) {
        uid
      }
      Column_4.auth(func: uid(Column_4)) @filter(uid(Column_Auth5)) {
        uid
      }
      Column_Auth5 as var(func: uid(Column_4)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  uids: |
    {
      "Column_3": "0x456"
    }
  json: |
    {
      "Column_4":  [ { "uid": "0x799" } ],
      "Column_4.auth": [ { "uid": "0x799" } ]
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ]
    }

- name: "Add with auth on additional delete that fails"
  gqlquery: |
    mutation addColumn($col: AddColumnInput!) {
      addColumn(input: [$col]) {
        column {
          colID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "col":
      { "inProject": { "projID": "0x123" },
        "name": "a column",
        "tickets": [ { "id": "0x789" } ]
      }
    }
  dgquery: |-
    query {
      Project_1(func: uid(0x123)) {
        uid
        dgraph.type
      }
      Ticket_2(func: uid(0x789)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Project_1": [ { "uid": "0x123", "dgraph.type":["Project"] } ],
        "Ticket_2": [ { "uid": "0x789", "dgraph.type":["Ticket"]} ]
    }
  dgquerysec: |-
    query {
      var(func: uid(0x789)) {
        Column_4 as Ticket.onColumn
      }
      Column_4(func: uid(Column_4)) {
        uid
      }
      Column_4.auth(func: uid(Column_4)) @filter(uid(Column_Auth5)) {
        uid
      }
      Column_Auth5 as var(func: uid(Column_4)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  json: |
    {
      "Column_4":  [ { "uid": "0x799" } ]
    }
  uids: |
    {
      "Column_3": "0x456"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ]
    }
  error:
    { "message": "couldn't rewrite query for mutation addColumn because authorization failed" }

- name: "Add with deep auth on additional delete"
  gqlquery: |
    mutation addProject($proj: AddProjectInput!) {
      addProject(input: [$proj]) {
        project {
          projID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    {
      "proj": {
        "name": "Project_1",
        "pwd": "Password",
        "columns": [ {
          "name": "a column",
          "tickets": [ { "id": "0x789" } ]
        } ]
      }
    }
  dgquery: |-
    query {
      Ticket_1(func: uid(0x789)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
      "Ticket_1": [ { "uid": "0x789", "dgraph.type": ["Ticket"] } ]
    }
  dgquerysec: |-
    query {
      var(func: uid(0x789)) {
        Column_4 as Ticket.onColumn
      }
      Column_4(func: uid(Column_4)) {
        uid
      }
      Column_4.auth(func: uid(Column_4)) @filter(uid(Column_Auth5)) {
        uid
      }
      Column_Auth5 as var(func: uid(Column_4)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  json: |
    {
      "Column_4":  [ { "uid": "0x799" } ],
      "Column_4.auth": [ { "uid": "0x799" } ]
    }
  uids: |
    {
      "Project_2": "0x123",
      "Column_3": "0x456"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Project(func: uid(Project_3)) @filter(uid(Project_Auth4)) {
        uid
      }
      Project_3 as var(func: uid(0x123))
      Project_Auth4 as var(func: uid(Project_3)) @cascade {
        Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
          Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ],
      "Project": [ { "uid": "0x123" } ]
    }

- name: "Add with deep auth on additional delete that fails"
  gqlquery: |
    mutation addProject($proj: AddProjectInput!) {
      addProject(input: [$proj]) {
        project {
          projID
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    {
      "proj": {
        "name": "Project1",
        "pwd": "Password",
        "columns": [ {
          "name": "a column",
          "tickets": [ { "id": "0x789" } ]
        } ]
      }
    }
  dgquery: |-
    query {
      Ticket_1(func: uid(0x789)) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Ticket_1": [ { "uid": "0x789", "dgraph.type":["Ticket"] } ]
    }
  dgquerysec: |-
    query {
      var(func: uid(0x789)) {
        Column_4 as Ticket.onColumn
      }
      Column_4(func: uid(Column_4)) {
        uid
      }
      Column_4.auth(func: uid(Column_4)) @filter(uid(Column_Auth5)) {
        uid
      }
      Column_Auth5 as var(func: uid(Column_4)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }
  json: |
    {
      "Column_4":  [ { "uid": "0x799" } ]
    }
  uids: |
    {
      "Project_2": "0x123",
      "Column_3": "0x456"
    }
  authquery: |-
    query {
      Column(func: uid(Column_1)) @filter(uid(Column_Auth2)) {
        uid
      }
      Column_1 as var(func: uid(0x456))
      Column_Auth2 as var(func: uid(Column_1)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
      Project(func: uid(Project_3)) @filter(uid(Project_Auth4)) {
        uid
      }
      Project_3 as var(func: uid(0x123))
      Project_Auth4 as var(func: uid(Project_3)) @cascade {
        Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
          Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
        }
      }
    }
  authjson: |
    {
      "Column": [ { "uid": "0x456" } ],
      "Project": [ { "uid": "0x123" } ]
    }
  error:
    { "message": "couldn't rewrite query for mutation addProject because authorization failed" }

- name: "Add with top level RBAC false."
  gqlquery: |
    mutation addLog($log: AddLogInput!) {
      addLog(input: [$log]) {
        log {
          id
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "log":
      {
        "pwd": "password",
        "logs": "log123",
        "random": "random123"
      }
    }
  uids: |
    { "Log_1": "0x123" }
  error:
    { "message": "mutation failed because authorization failed"}


- name: "Add with top level RBAC true."
  gqlquery: |
    mutation addLog($log: AddLogInput!) {
      addLog(input: [$log]) {
        log {
          id
        }
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  variables: |
    { "log":
      {
        "pwd": "something",
        "logs": "log123",
        "random": "random123"
      }
    }
  uids: |
    {
      "Log_1": "0x123"
    }
  skipauth: true

- name: "Add with top level OR RBAC true."
  gqlquery: |
    mutation addProject($proj: AddProjectInput!) {
      addProject(input: [$proj]) {
        project {
          projID
        }
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  variables: |
    {
      "proj": {
        "name": "Project1",
        "pwd": "somepassword"
      }
    }
  uids: |
    {
      "Project_1": "0x123"
    }
  skipauth: true

- name: "Add with top level OR RBAC false."
  gqlquery: |
    mutation addProject($proj: AddProjectInput!) {
      addProject(input: [$proj]) {
        project {
          projID
        }
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  variables: |
    {
      "proj": {
        "name": "Project1",
        "pwd": "password"
      }
    }
  uids: |
    {
      "Project_1": "0x123"
    }
  authquery: |-
    query {
      Project(func: uid(Project_1)) @filter(uid(Project_Auth2)) {
        uid
      }
      Project_1 as var(func: uid(0x123))
      Project_Auth2 as var(func: uid(Project_1)) @cascade {
        Project.roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
          Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
        }
      }
    }
  authjson: |
    {
      "Project": [ { "uid": "0x123" } ]
    }

- name: "Add with top level And RBAC true."
  gqlquery: |
    mutation addIssue($issue: AddIssueInput!) {
      addIssue(input: [$issue]) {
        issue {
          id
        }
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  variables: |
    { "issue":
      { "msg": "log123",
        "random": "random123",
        "owner": {
           "username" : "user1"
        }
      }
    }
  dgquery: |-
    query {
      User_1(func: eq(User.username, "user1")) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
      "User_1": [ { "uid": "0x123" } ]
    }
  uids: |
    {
      "Issue_2": "0x789"
    }
  authquery: |-
    query {
      Issue(func: uid(Issue_1)) @filter(uid(Issue_Auth2)) {
        uid
      }
      Issue_1 as var(func: uid(0x789))
      Issue_Auth2 as var(func: uid(Issue_1)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
    }
  authjson: |
    {
      "Issue": [ { "uid": "0x789" }]
    }

- name: "Add with top level And RBAC false."
  gqlquery: |
    mutation addIssue($issue: AddIssueInput!) {
      addIssue(input: [$issue]) {
        issue {
          id
        }
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  variables: |
    { "issue":
      { "msg": "log123",
        "random": "random123",
        "owner": {
           "username" : "user1"
        }
      }
    }
  dgquery: |-
    query {
      User_1(func: eq(User.username, "user1")) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
      "User_1": [ { "uid": "0x123" } ]
    }
  uids: |
    {
      "Issue_2": "0x789"
    }
  authquery: |-
    query {
      Issue(func: uid(Issue_1)) @filter(uid(Issue_2)) {
        uid
      }
      Issue_1 as var(func: uid(0x789))
      Issue_2 as var(func: uid(Issue_1)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
    }
  error:
    { "message": "mutation failed because authorization failed" }

- name: "Add with top level not RBAC false."
  gqlquery: |
    mutation addComplexLog($log: AddComplexLogInput!) {
      addComplexLog(input: [$log]) {
        complexLog {
          id
        }
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  variables: |
    { "log":
      { "logs": "log123",
        "visible": true
      }
    }
  uids: |
    {
      "ComplexLog_1": "0x123"
    }
  error:
    { "message": "mutation failed because authorization failed"}

- name: "Add with top level not RBAC true."
  gqlquery: |
    mutation addComplexLog($log: AddComplexLogInput!) {
      addComplexLog(input: [$log]) {
        complexLog {
          id
        }
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  variables: |
    { "log":
      { "logs": "log123",
        "visible": true
      }
    }
  uids: |
    {
      "ComplexLog_1": "0x123"
    }
  skipauth: true

- name: "Adding nodes for a Type that inherits Auth rules from an interfaces successfully."
  gqlquery: |
    mutation addQuestion($question: [AddQuestionInput!]!) {
      addQuestion(input: $question) {
        question{
          id
          text
          author{
            name
          }
        }
      }
    }
  jwtvar:
    USER: "user1"
    ANS: "true"
  variables: |
    { "question":
      [{
        "text": "A Question",
        "pwd": "password",
        "author": {
          "name": "user1"
        },
        "answered": true
      }]
    }
  uids: |
    {
      "Question_1": "0x123",
      "Author_1": "0x456"
    }
  authquery: |-
    query {
      Question(func: uid(Question_1)) @filter((uid(Question_Auth2) AND uid(Question_Auth3))) {
        uid
      }
      Question_1 as var(func: uid(0x123))
      Question_Auth2 as var(func: uid(Question_1)) @filter(eq(Question.answered, true)) @cascade {
        Question.id : uid
      }
      Question_Auth3 as var(func: uid(Question_1)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }
  authjson: |
    {
      "Question": [ {"uid": "0x123"}]
    }

- name: "Adding node for a Type that inherits auth rules from an interface fails."
  gqlquery: |
    mutation addQuestion($question: [AddQuestionInput!]!) {
      addQuestion(input: $question) {
        question{
          id
          text
          author{
            name
          }
        }
      }
    }
  jwtvar:
    USER: "user1"
    ANS: "true"
  variables: |
    { "question":
      [{
        "text": "A Question",
        "pwd": "password",
        "author": {
          "name": "user1"
        },
        "answered": false
      }]
    }
  uids: |
    {
      "Question_1": "0x123",
      "Author_1": "0x456"
    }
  authquery: |-
    query {
      Question(func: uid(Question_1)) @filter((uid(Question_Auth2) AND uid(Question_Auth3))) {
        uid
      }
      Question_1 as var(func: uid(0x123))
      Question_Auth2 as var(func: uid(Question_1)) @filter(eq(Question.answered, true)) @cascade {
        Question.id : uid
      }
      Question_Auth3 as var(func: uid(Question_1)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }
  authjson: |
    {
      "Question": [ ], "Author": [ { "uid" : "0x456"} ]
    }
  error:
    { "message": "mutation failed because authorization failed"}

- name: "Add type with having RBAC rule on interface successfully"
  gqlquery: |
    mutation addFbPost($post: [AddFbPostInput!]!){
      addFbPost(input: $post){
        fbPost {
          text
          author {
            name
          }
        }
      }
    }
  jwtvar:
    USER: "user1"
    ROLE: "ADMIN"
  variables: |
    { "post":
      [{
        "text": "A Question",
        "pwd": "password",
        "author": {
          "name": "user1"
        }
      }]
    }
  uids: |
    {
      "FbPost_1": "0x123",
      "Author_1": "0x456"
    }
  authquery: |-
    query {
      FbPost(func: uid(FbPost_1)) @filter(uid(FbPost_Auth2)) {
        uid
      }
      FbPost_1 as var(func: uid(0x123))
      FbPost_Auth2 as var(func: uid(FbPost_1)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }
  authjson: |
    {
      "FbPost": [ {"uid": "0x123"}]
    }

- name: "Add type with Having RBAC rule on interface failed"
  gqlquery: |
    mutation addFbPost($post: [AddFbPostInput!]!){
      addFbPost(input: $post){
        fbPost{
          text
          author {
            name
          }
        }
      }
    }
  jwtvar:
    USER: "user1"
    ROLE: "USER"
  variables: |
    { "post": 
      [{
        "text": "A Question",
        "pwd": "password",
        "author": {
          "name": "user1"
        }
      }]
    }
  uids: |
    {
      "FbPost_1": "0x123",
      "Author_1": "0x456"
    }
  error:
    {"message" : "mutation failed because authorization failed"}

- name: "Upsert Add Mutation with RBAC true"
  gqlquery: |
    mutation addTweets($tweet: AddTweetsInput!) {
      addTweets(input: [$tweet], upsert: true) {
        tweets {
          id
        }
      }
    }
  jwtvar:
    USER: "foo"
  variables: |
    { "tweet":
      { "id": "existing ID",
        "text": "some text",
        "timestamp": "0"
      }
    }
  dgquery: |-
    query {
      Tweets_1(func: eq(Tweets.id, "existing ID")) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Tweets_1": [ { "uid": "0x123", "dgraph.type":["Tweets"] } ]
    }
  dgquerysec: |-
    query {
      Tweets_1 as Tweets_1(func: uid(TweetsRoot)) {
        uid
      }
      TweetsRoot as var(func: uid(Tweets_2))
      Tweets_2 as var(func: uid(0x123)) @filter(type(Tweets))
    }

- name: "Upsert Add Mutation with RBAC false"
  gqlquery: |
    mutation addTweets($tweet: AddTweetsInput!) {
      addTweets(input: [$tweet], upsert: true) {
        tweets {
          id
        }
      }
    }
  jwtvar:
    USER: "not foo"
  variables: |
    { "tweet":
      { "id": "existing ID",
        "text": "some text",
        "timestamp": "0"
      }
    }
  dgquery: |-
    query {
      Tweets_1(func: eq(Tweets.id, "existing ID")) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "Tweets_1": [ { "uid": "0x123", "dgraph.type":["Tweets"] } ]
    }
  dgquerysec: |-
    query {
      Tweets_1 as addTweets()
    }

- name: "Upsert with Deep Auth"
  explanation: "As state already exists, update auth rules of State are applied.
    As Country does not exist, add auth rules of Country are applied."
  gqlquery: |
    mutation addState($state: AddStateInput!) {
      addState(input: [$state], upsert: true) {
        state {
          code
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "state":
      {
        "code": "mh",
        "name": "Maharashtra",
        "ownedBy": "user1",
        "country":
          {
            "id": "in",
            "ownedBy": "user1",
            "name": "India"
          }
      }
    }
  dgquery: |-
    query {
      State_1(func: eq(State.code, "mh")) {
        uid
        dgraph.type
      }
      Country_2(func: eq(Country.id, "in")) {
        uid
        dgraph.type
      }
    }
  queryjson: |
    {
        "State_1": [ { "uid": "0x123", "dgraph.type":["State"] } ]
    }
  dgquerysec: |-
    query {
      State_1 as State_1(func: uid(StateRoot)) {
        uid
      }
      StateRoot as var(func: uid(State_3)) @filter(uid(State_Auth4))
      State_3 as var(func: uid(0x123)) @filter(type(State))
      State_Auth4 as var(func: uid(State_3)) @filter(eq(State.ownedBy, "user1")) @cascade
    }
  uids: |
    {
      "Country_2": "0x456"
    }
  json: |
    {
      "Country_2":  [ { "uid": "0x456" } ],
      "Country_2.auth": [ { "uid": "0x456" } ]
    }
  authquery: |-
    query {
      Country(func: uid(Country_1)) @filter(uid(Country_Auth2)) {
        uid
      }
      Country_1 as var(func: uid(0x456))
      Country_Auth2 as var(func: uid(Country_1)) @filter(eq(Country.ownedBy, "user1")) @cascade
    }
  authjson: |
    {
      "Country": [ { "uid": "0x456" } ]
    }
