- name: "Delete with auth"
  gqlquery: |
    mutation deleteUserSecret($filter: UserSecretFilter!) {
      deleteUserSecret(filter: $filter) {
        msg
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "filter": { "aSecret": { "anyofterms": "auth is applied" } } }
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" }
        ]
  dgquery: |-
    query {
      x as deleteUserSecret(func: uid(UserSecretRoot)) {
        uid
      }
      UserSecretRoot as var(func: uid(UserSecret_1)) @filter(uid(UserSecret_Auth2))
      UserSecret_1 as var(func: type(UserSecret)) @filter(anyofterms(UserSecret.aSecret, "auth is applied"))
      UserSecret_Auth2 as var(func: uid(UserSecret_1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }

- name: "Delete with inverse field and RBAC true"
  gqlquery: |
    mutation {
      deleteTweets(
        filter: {
          text: {anyoftext: "abc"}
        }) {
        tweets {
          text
        }
      }
    }
  jwtvar:
    USER: "foo"
    ROLE: "admin"
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "User.tweets" : [{"uid":"uid(x)"}],
            "uid" : "uid(User_2)"
          }
        ]
  dgquery: |-
    query {
      x as deleteTweets(func: uid(TweetsRoot)) {
        uid
        User_2 as Tweets.user
      }
      TweetsRoot as var(func: uid(Tweets_1))
      Tweets_1 as var(func: type(Tweets)) @filter(anyoftext(Tweets.text, "abc"))
    }
  dgquerysec: |-
    query {
      x as var(func: uid(TweetsRoot))
      TweetsRoot as var(func: uid(Tweets_1))
      Tweets_1 as var(func: type(Tweets)) @filter(anyoftext(Tweets.text, "abc"))
      DeleteTweetsPayload.tweets(func: uid(Tweets_3)) {
        Tweets.text : Tweets.text
        dgraph.uid : uid
      }
      Tweets_3 as var(func: uid(Tweets_4))
      Tweets_4 as var(func: uid(x))
    }

- name: "Delete with inverse field and RBAC false"
  gqlquery: |
    mutation {
      deleteTweets(
        filter: {
          text: {anyoftext: "abc"}
        }) {
        tweets {
          text
        }
      }
    }
  jwtvar:
    ROLE: "admin"
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" }
        ]
  dgquery: |-
    query {
      x as deleteTweets()
    }
  dgquerysec: |-
    query {
      x as var()
      DeleteTweetsPayload.tweets(func: uid(Tweets_1)) {
        Tweets.text : Tweets.text
        dgraph.uid : uid
      }
      Tweets_1 as var(func: uid(Tweets_2))
      Tweets_2 as var(func: uid(x))
    }

- name: "Delete with deep auth"
  gqlquery: |
    mutation deleteTicket($filter: TicketFilter!) {
      deleteTicket(filter: $filter) {
        msg
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "filter": { "title": { "anyofterms": "auth is applied" } } }
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid":"uid(Column_3)",
            "Column.tickets": [ { "uid":"uid(x)" } ]
          },
          {
            "uid":"uid(User_4)",
            "User.tickets": [ { "uid":"uid(x)" } ]
          }
        ]
  dgquery: |-
    query {
      x as deleteTicket(func: uid(TicketRoot)) {
        uid
        Column_3 as Ticket.onColumn
        User_4 as Ticket.assignedTo
      }
      TicketRoot as var(func: uid(Ticket_1)) @filter(uid(Ticket_Auth2))
      Ticket_1 as var(func: type(Ticket)) @filter(anyofterms(Ticket.title, "auth is applied"))
      Ticket_Auth2 as var(func: uid(Ticket_1)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }


- name: "Delete with deep query"
  gqlquery: |
    mutation deleteTicket($filter: TicketFilter!) {
      deleteTicket(filter: $filter) {
        msg
        numUids
        ticket {
          title
          onColumn {
            inProject {
              roles {
                assignedTo {
                  username
                  age
                }
              }
            }
          }
        }
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "filter": { "title": { "anyofterms": "auth is applied" } } }
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid":"uid(Column_3)",
            "Column.tickets": [ { "uid":"uid(x)" } ]
          },
          {
            "uid":"uid(User_4)",
            "User.tickets": [ { "uid":"uid(x)" } ]
          }
        ]
  dgquery: |-
    query {
      x as deleteTicket(func: uid(TicketRoot)) {
        uid
        Column_3 as Ticket.onColumn
        User_4 as Ticket.assignedTo
      }
      TicketRoot as var(func: uid(Ticket_1)) @filter(uid(Ticket_Auth2))
      Ticket_1 as var(func: type(Ticket)) @filter(anyofterms(Ticket.title, "auth is applied"))
      Ticket_Auth2 as var(func: uid(Ticket_1)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
    }
  dgquerysec: |-
    query {
      x as var(func: uid(TicketRoot))
      TicketRoot as var(func: uid(Ticket_1)) @filter(uid(Ticket_Auth2))
      Ticket_1 as var(func: type(Ticket)) @filter(anyofterms(Ticket.title, "auth is applied"))
      Ticket_Auth2 as var(func: uid(Ticket_1)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
      DeleteTicketPayload.ticket(func: uid(Ticket_5)) {
        Ticket.title : Ticket.title
        Ticket.onColumn : Ticket.onColumn @filter(uid(Column_6)) {
          Column.inProject : Column.inProject @filter(uid(Project_8)) {
            Project.roles : Project.roles @filter(uid(Role_10)) {
              Role.assignedTo : Role.assignedTo @filter(uid(User_12)) {
                User.username : User.username
                User.age : User.age
                dgraph.uid : uid
              }
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      Ticket_5 as var(func: uid(Ticket_16)) @filter(uid(Ticket_Auth17))
      Ticket_16 as var(func: uid(x))
      Ticket_Auth17 as var(func: uid(Ticket_16)) @cascade {
        Ticket.onColumn : Ticket.onColumn {
          Column.inProject : Column.inProject {
            Project.roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
              Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            }
          }
        }
      }
      var(func: uid(Ticket_5)) {
        Column_7 as Ticket.onColumn
      }
      Column_6 as var(func: uid(Column_7)) @filter(uid(Column_Auth15))
      var(func: uid(Column_6)) {
        Project_9 as Column.inProject
      }
      Project_8 as var(func: uid(Project_9)) @filter(uid(Project_Auth14))
      var(func: uid(Project_8)) {
        Role_11 as Project.roles
      }
      Role_10 as var(func: uid(Role_11))
      var(func: uid(Role_10)) {
        User_13 as Role.assignedTo
      }
      User_12 as var(func: uid(User_13))
      Project_Auth14 as var(func: uid(Project_9)) @cascade {
        Project.roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
          Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
        }
      }
      Column_Auth15 as var(func: uid(Column_7)) @cascade {
        Column.inProject : Column.inProject {
          Project.roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
            Role.assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          }
        }
      }
    }

- name: "Delete with top level RBAC true."
  gqlquery: |
    mutation($projs: [ID!]) {
      deleteProject (filter: { projID: $projs}) {
          numUids
        }
    }
  variables: |
    {
      "projs" : ["0x01", "0x02"]
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         },
         {
           "Column.inProject": {
             "uid": "uid(x)"
           },
           "uid": "uid(Column_2)"
         }
        ]
  dgquery: |-
    query {
      x as deleteProject(func: uid(0x1, 0x2)) @filter(type(Project)) {
        uid
        Column_2 as Project.columns
      }
    }

- name: "Delete with top level RBAC false."
  gqlquery: |
    mutation deleteLog($filter: LogFilter!) {
      deleteLog(filter: $filter) {
        msg
        log {
          logs
          random
        }
      }
    }
  variables: |
    { "filter":
      {
        "id": ["0x1", "0x2"]
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteLog()
    }
  dgquerysec: |-
    query {
      var()
      DeleteLogPayload.log()
    }

- name: "multiple rule in delete mutation"
  gqlquery: |
    mutation deleteUser($filter: UserFilter!) {
      deleteUser(filter: $filter) {
        msg
      }
    }
  variables: |
    { "filter":
      {
        "username": { "eq": "userxyz" }
      }
    }
  jwtvar:
    USER: "user1"
  dgmutations:
    - deletejson: |
        [
          { "uid" : "uid(x)" },
          {
            "Ticket.assignedTo" : [ {"uid":"uid(x)"} ],
            "uid" : "uid(Ticket_4)"
          },
          {
            "Tweets.user" : {"uid":"uid(x)"},
            "uid" : "uid(Tweets_5)"
          }
        ]
  dgquery: |-
    query {
      x as deleteUser(func: uid(UserRoot)) {
        uid
        Ticket_4 as User.tickets
        Tweets_5 as User.tweets
      }
      UserRoot as var(func: uid(User_1)) @filter((uid(User_Auth2) AND uid(User_Auth3)))
      User_1 as var(func: type(User)) @filter(eq(User.username, "userxyz"))
      User_Auth2 as var(func: uid(User_1)) @filter(eq(User.username, "user1")) @cascade
      User_Auth3 as var(func: uid(User_1)) @filter(eq(User.isPublic, true)) @cascade
    }

- name: "Filtering by ID"
  gqlquery: |
    mutation deleteRegion($filter: RegionFilter!) {
      deleteRegion(filter: $filter) {
        msg
      }
    }
  jwtvar:
    USER: "user1"
  variables: |
    { "filter":
      {
        "id": ["0x1", "0x2"]
      }
    }
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" }
        ]
  dgquery: |-
    query {
      x as deleteRegion(func: uid(RegionRoot)) {
        uid
      }
      RegionRoot as var(func: uid(Region_1)) @filter(uid(Region_Auth2))
      Region_1 as var(func: uid(0x1, 0x2)) @filter(type(Region))
      Region_Auth2 as var(func: uid(Region_1)) @filter(eq(Region.global, true)) @cascade
    }

- name: "Delete with top level RBAC false."
  gqlquery: |
    mutation deleteLog($filter: LogFilter!) {
      deleteLog(filter: $filter) {
        msg
      }
    }
  variables: |
    { "filter":
      {
        "id": ["0x1", "0x2"]
      }
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteLog()
    }

- name: "Delete with top level RBAC true."
  gqlquery: |
    mutation deleteLog($filter: LogFilter!) {
      deleteLog(filter: $filter) {
        msg
        log (order: { asc: logs }) {
          logs
          random
        }
      }
    }
  variables: |
    { "filter":
      {
        "id": ["0x1", "0x2"]
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteLog(func: uid(LogRoot)) {
        uid
      }
      LogRoot as var(func: uid(Log_1))
      Log_1 as var(func: uid(0x1, 0x2)) @filter(type(Log))
    }
  dgquerysec: |-
    query {
      x as var(func: uid(LogRoot))
      LogRoot as var(func: uid(Log_1))
      Log_1 as var(func: uid(0x1, 0x2)) @filter(type(Log))
      DeleteLogPayload.log(func: uid(Log_2), orderasc: Log.logs) {
        Log.logs : Log.logs
        Log.random : Log.random
        dgraph.uid : uid
      }
      Log_2 as var(func: uid(Log_3), orderasc: Log.logs)
      Log_3 as var(func: uid(x))
    }

- name: "Delete with top level OR RBAC true."
  gqlquery: |
    mutation($ids: [ID!]) {
      deleteComplexLog (filter: { id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids" : ["0x01", "0x02"]
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{ "uid": "uid(x)" }]
  dgquery: |-
    query {
      x as deleteComplexLog(func: uid(ComplexLogRoot)) {
        uid
      }
      ComplexLogRoot as var(func: uid(ComplexLog_1))
      ComplexLog_1 as var(func: uid(0x1, 0x2)) @filter(type(ComplexLog))
    }

- name: "Delete with top level OR RBAC false."
  gqlquery: |
    mutation($ids: [ID!]) {
      deleteComplexLog (filter: { id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids" : ["0x01", "0x02"]
    }
  jwtvar:
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{ "uid": "uid(x)" }]
  dgquery: |-
    query {
      x as deleteComplexLog(func: uid(ComplexLogRoot)) {
        uid
      }
      ComplexLogRoot as var(func: uid(ComplexLog_1)) @filter(uid(ComplexLog_Auth2))
      ComplexLog_1 as var(func: uid(0x1, 0x2)) @filter(type(ComplexLog))
      ComplexLog_Auth2 as var(func: uid(ComplexLog_1)) @filter(eq(ComplexLog.visible, true)) @cascade
    }

- name: "Delete with top level AND RBAC true."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteIssue(filter: {id: $ids}) {
      numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteIssue(func: uid(IssueRoot)) {
        uid
      }
      IssueRoot as var(func: uid(Issue_1)) @filter(uid(Issue_Auth2))
      Issue_1 as var(func: uid(0x1, 0x2)) @filter(type(Issue))
      Issue_Auth2 as var(func: uid(Issue_1)) @cascade {
        Issue.owner : Issue.owner @filter(eq(User.username, "user1"))
      }
    }

- name: "Delete with top level AND RBAC false."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteIssue(filter: {id: $ids}) {
      numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteIssue()
    }

- name: "Delete with top level not RBAC false."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteRole(filter: {id: $ids}) {
      numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteRole()
    }

- name: "Delete with top level not RBAC true."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteRole(filter: {id: $ids}) {
      numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteRole(func: uid(0x1, 0x2)) @filter(type(Role)) {
        uid
      }
    }

- name: "Deleting interface having its own auth rules and implementing types also have auth rules and some of the rules of implementing types are not satisfied"
  gqlquery: |
    mutation ($ids: [ID!]) {
      deletePost(filter: {id: $ids}) {
      numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    USER: "user1"
    ANS:  "true"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         },{
           "Author.posts": [
             {"uid": "uid(x)"}
           ],
           "uid": "uid(Author_7)"
         }]
  dgquery: |-
    query {
      x as deletePost(func: uid(PostRoot)) {
        uid
        Author_7 as Post.author
      }
      PostRoot as var(func: uid(Post_1)) @filter(((uid(Question_Auth3) AND uid(Question_Auth4)) OR uid(Answer_Auth6)))
      Post_1 as var(func: uid(0x1, 0x2)) @filter(type(Post))
      Question_2 as var(func: type(Question))
      Question_Auth3 as var(func: uid(Question_2)) @filter(eq(Question.answered, true)) @cascade {
        Question.id : uid
      }
      Question_Auth4 as var(func: uid(Question_2)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
      Answer_5 as var(func: type(Answer))
      Answer_Auth6 as var(func: uid(Answer_5)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }

- name: "Deleting interface having its own auth rules and implementing types also have auth rules and the rules of interface are not satisfied"
  gqlquery: |
    mutation ($ids: [ID!]) {
      deletePost(filter: {id: $ids}) {
      numUids
      }
    }
  jwtvar:
    ROLE: "ADMIN"
    AND: "true"
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deletePost()
    }

- name: "Deleting interface having no own auth rules but some implementing types have auth rules and they are not satisfied."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteA(filter: {id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteA(func: uid(ARoot)) {
        uid
      }
      ARoot as var(func: uid(A_1)) @filter((uid(B_2)))
      A_1 as var(func: uid(0x1, 0x2)) @filter(type(A))
      B_2 as var(func: type(B))
    }

- name: "Delete Type Having Graph Traversal Auth Rules on Interface."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteQuestion(filter: {id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    USER: "user1"
    ANS: "true"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         },{
           "Author.posts": [
             {"uid": "uid(x)"}
           ],
           "uid": "uid(Author_4)"
         }]
  dgquery: |-
    query {
      x as deleteQuestion(func: uid(QuestionRoot)) {
        uid
        Author_4 as Post.author
      }
      QuestionRoot as var(func: uid(Question_1)) @filter((uid(Question_Auth2) AND uid(Question_Auth3)))
      Question_1 as var(func: uid(0x1, 0x2)) @filter(type(Question))
      Question_Auth2 as var(func: uid(Question_1)) @filter(eq(Question.answered, true)) @cascade {
        Question.id : uid
      }
      Question_Auth3 as var(func: uid(Question_1)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }

- name: "Delete Type Having Graph Traversal Auth Rules on Interface and those are not satisfied."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteQuestion(filter: {id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ANS: "true"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteQuestion()
    }

- name: "Delete type having RBAC Auth Rules on interface and those are not satisfied."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteFbPost(filter: {id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "USER"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         }]
  dgquery: |-
    query {
      x as deleteFbPost()
    }

- name: "Delete type having RBAC Auth Rules on interface and all are satisfied."
  gqlquery: |
    mutation ($ids: [ID!]) {
      deleteFbPost(filter: {id: $ids}) {
        numUids
      }
    }
  variables: |
    {
      "ids": ["0x1", "0x2"]
    }
  jwtvar:
    ROLE: "ADMIN"
    USER: "user1"
  dgmutations:
    - deletejson: |
        [{
           "uid": "uid(x)"
         },{
           "Author.posts": [
             {"uid": "uid(x)"}
           ],
           "uid": "uid(Author_3)"
         }]
  dgquery: |-
    query {
      x as deleteFbPost(func: uid(FbPostRoot)) {
        uid
        Author_3 as Post.author
      }
      FbPostRoot as var(func: uid(FbPost_1)) @filter(uid(FbPost_Auth2))
      FbPost_1 as var(func: uid(0x1, 0x2)) @filter(type(FbPost))
      FbPost_Auth2 as var(func: uid(FbPost_1)) @cascade {
        dgraph.type
        Post.author : Post.author @filter(eq(Author.name, "user1")) {
          Author.name : Author.name
        }
      }
    }

