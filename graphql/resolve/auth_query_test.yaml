- name: "Auth query with @dgraph pred."
  gqlquery: |
    query {
      queryStudent {
        email
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      queryStudent(func: uid(Student1)) @filter(uid(Student2)) {
        email : IOw80vnV
        dgraph.uid : uid
      }
      Student1 as var(func: type(is7sowSm))
      Student2 as var(func: uid(Student1)) @filter(eq(IOw80vnV, "user1")) @cascade
    }

- name: "Auth query with @dgraph pred (Test RBAC)."
  gqlquery: |
    query {
      queryStudent {
        email
      }
    }
  role: "USER"
  dgquery: |-
    query {
      queryStudent()
    }

- name: "Auth with deep get query."
  gqlquery: |
    query {
      getProject(projID: "0x123") {
        projID
        columns {
          name
          colID
        }
      }
    }
  dgquery: |-
    query {
      getProject(func: uid(Project2)) @filter((uid(Project3) AND type(Project))) {
        projID : uid
        columns : Project.columns @filter(uid(Column1)) {
          name : Column.name
          colID : uid
        }
      }
      Project2 as var(func: uid(0x123))
      Project3 as var(func: uid(Project2)) @cascade {
        roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
          assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      Column1 as var(func: type(Column)) @cascade {
        inProject : Column.inProject {
          roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
            assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }

- name: "Auth with top level filter : query, no filter"
  gqlquery: |
    query {
      queryUserSecret {
        id
        ownedBy
      }
    }
  dgquery: |-
    query {
      queryUserSecret(func: uid(UserSecret1)) @filter(uid(UserSecret2)) {
        id : uid
        ownedBy : UserSecret.ownedBy
      }
      UserSecret1 as var(func: type(UserSecret))
      UserSecret2 as var(func: uid(UserSecret1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }

- name: "Auth with top level filter : get"
  gqlquery: |
    query {
      getUserSecret(id: "0x123") {
        id
        ownedBy
      }
    }
  dgquery: |-
    query {
      getUserSecret(func: uid(UserSecret1)) @filter((uid(UserSecret2) AND type(UserSecret))) {
        id : uid
        ownedBy : UserSecret.ownedBy
      }
      UserSecret1 as var(func: uid(0x123))
      UserSecret2 as var(func: uid(UserSecret1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }

- name: "Auth with top level filter : query and filter"
  gqlquery: |
    query {
      queryUserSecret(filter: { ownedBy: { eq: "user2" }}) {
        id
        ownedBy
      }
    }
  dgquery: |-
    query {
      queryUserSecret(func: uid(UserSecret1)) @filter(uid(UserSecret2)) {
        id : uid
        ownedBy : UserSecret.ownedBy
      }
      UserSecret1 as var(func: type(UserSecret)) @filter(eq(UserSecret.ownedBy, "user2"))
      UserSecret2 as var(func: uid(UserSecret1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }

- name: "Deep RBAC rules true"
  gqlquery: |
    query {
      queryUser {
        issues {
          id
        }
      }
    }
  role: "ADMIN"
  dgquery: |-
      query {
        queryUser(func: type(User)) {
          issues : User.issues @filter(uid(Issue1)) {
            id : uid
          }
          dgraph.uid : uid
        }
        Issue1 as var(func: type(Issue)) @cascade {
          owner : Issue.owner @filter(eq(User.username, "user1"))
          dgraph.uid : uid
        }
      }

- name: "Deep RBAC rules false"
  gqlquery: |
    query {
      queryUser {
        username
        issues {
          id
        }
      }
    }
  role: "USER"
  dgquery: |-
      query {
        queryUser(func: type(User)) {
          username : User.username
          dgraph.uid : uid
        }
      }


- name: "Auth with top level AND rbac true"
  gqlquery: |
    query {
      queryIssue {
        msg
      }
    }
  role: "ADMIN"
  dgquery: |-
     query {
       queryIssue(func: uid(Issue1)) @filter(uid(Issue2)) {
         msg : Issue.msg
         dgraph.uid : uid
       }
       Issue1 as var(func: type(Issue))
       Issue2 as var(func: uid(Issue1)) @cascade {
         owner : Issue.owner @filter(eq(User.username, "user1"))
         dgraph.uid : uid
       }
     }

- name: "Auth with complex rbac rules, true"
  gqlquery: |
    query {
      queryComplexLog {
        logs
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      queryComplexLog(func: type(ComplexLog)) {
        logs : ComplexLog.logs
        dgraph.uid : uid
      }
    }

- name: "Auth with complex rbac rules, false"
  gqlquery: |
    query {
      queryComplexLog {
        logs
      }
    }
  role: "USER"
  dgquery: |-
    query {
      queryComplexLog()
    }

- name: "Auth with top level rbac true"
  gqlquery: |
    query {
      queryLog {
        logs
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      queryLog(func: type(Log)) {
        logs : Log.logs
        dgraph.uid : uid
      }
    }

- name: "Auth with top level rbac false"
  gqlquery: |
    query {
      queryLog {
        logs
      }
    }
  role: "USER"
  dgquery: |-
     query {
       queryLog()
     }

- name: "Auth with top level AND rbac false"
  gqlquery: |
    query {
      queryIssue {
        msg
      }
    }
  role: "USER"
  dgquery: |-
     query {
       queryIssue()
     }


- name: "Auth with top level OR rbac true"
  gqlquery: |
    query {
      queryProject {
        name
      }
    }
  role: "ADMIN"
  dgquery: |-
     query {
       queryProject(func: type(Project)) {
         name : Project.name
         dgraph.uid : uid
       }
     }

- name: "Query with missing jwt variables"
  gqlquery: |
    query {
      queryGroup {
        id
      }
    }
  dgquery: |-
    query {
      queryGroup(func: uid(Group1)) @filter((uid(Group2) OR uid(Group3))) {
        id : uid
      }
      Group1 as var(func: type(Group))
      Group2 as var(func: uid(Group1)) @cascade {
        users : Group.users @filter(eq(User.username, "user1"))
        dgraph.uid : uid
      }
      Group3 as var(func: uid(Group1)) @cascade {
        createdBy : Group.createdBy @filter(eq(User.username, "user1"))
        dgraph.uid : uid
      }
    }

- name: "Auth with top level OR rbac false"
  gqlquery: |
    query {
      queryProject {
        name
      }
    }
  role: "USER"
  dgquery: |-
    query {
      queryProject(func: uid(Project1)) @filter(uid(Project2)) {
        name : Project.name
        dgraph.uid : uid
      }
      Project1 as var(func: type(Project))
      Project2 as var(func: uid(Project1)) @cascade {
        roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
          assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }

- name: "Auth with top level filter : query, filter and order"
  gqlquery: |
    query {
      queryUserSecret(filter: { ownedBy: { eq: "user2" }}, order: {asc: aSecret}, first: 1) {
        id
        ownedBy
      }
    }
  dgquery: |-
    query {
      queryUserSecret(func: uid(UserSecret1), orderasc: UserSecret.aSecret, first: 1) @filter(uid(UserSecret2)) {
        id : uid
        ownedBy : UserSecret.ownedBy
      }
      UserSecret1 as var(func: type(UserSecret)) @filter(eq(UserSecret.ownedBy, "user2"))
      UserSecret2 as var(func: uid(UserSecret1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }

- name: "Auth with deep filter : query top-level"
  gqlquery: |
    query {
      queryTicket {
        id
        title
      }
    }
  dgquery: |-
    query {
      queryTicket(func: uid(Ticket1)) @filter(uid(Ticket2)) {
        id : uid
        title : Ticket.title
      }
      Ticket1 as var(func: type(Ticket))
      Ticket2 as var(func: uid(Ticket1)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }

- name: "Auth with deep filter : query deep requires auth"
  gqlquery: |
    query {
      queryUser {
        username
        tickets {
          id
          title 
        }
      }
    }
  dgquery: |-
    query {
      queryUser(func: type(User)) {
        username : User.username
        tickets : User.tickets @filter(uid(Ticket1)) {
          id : uid
          title : Ticket.title
        }
        dgraph.uid : uid
      }
      Ticket1 as var(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }

- name: "Auth with deep filter and field filter : query deep requires auth"
  gqlquery: |
    query {
      queryUser {
        username
        tickets(filter: { title: { anyofterms: "graphql" } }) {
          id
          title 
        }
      }
    }
  dgquery: |-
    query {
      queryUser(func: type(User)) {
        username : User.username
        tickets : User.tickets @filter((anyofterms(Ticket.title, "graphql") AND uid(Ticket1))) {
          id : uid
          title : Ticket.title
        }
        dgraph.uid : uid
      }
      Ticket1 as var(func: type(Ticket)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permission, "VIEW")) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }

- name: "Auth with complex filter"
  gqlquery: |
    query {
      queryMovie {
        content
      }
    }
  dgquery: |-
    query {
      queryMovie(func: uid(Movie1)) @filter((NOT (uid(Movie2)) AND (uid(Movie3) OR uid(Movie4)))) {
        content : Movie.content
        dgraph.uid : uid
      }
      Movie1 as var(func: type(Movie))
      Movie2 as var(func: uid(Movie1)) @filter(eq(Movie.hidden, true)) @cascade
      Movie3 as var(func: uid(Movie1)) @cascade {
        regionsAvailable : Movie.regionsAvailable {
          users : Region.users @filter(eq(User.username, "user1"))
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
      Movie4 as var(func: uid(Movie1)) @cascade {
        regionsAvailable : Movie.regionsAvailable @filter(eq(Region.global, true))
        dgraph.uid : uid
      }
    }

- name: "Query with missing variable - top level"
  gqlquery: |
    query {
      queryUserSecret {
        id
      }
    }
  dgquery: |-
    query {
      queryUserSecret()
    }

- name:  "Get with top level RBAC false"
  gqlquery: |
    query {
      getLog(id: "0x123") {
        id
      }
    }
  dgquery: |-
    query {
      getLog()
    }

- name: "Query with missing variable - deep query"
  gqlquery: |
    query {
      queryUser {
        username
        tickets {
          id
          title
        }
      }
    }
  dgquery: |-
    query {
      queryUser(func: type(User)) {
        username : User.username
        dgraph.uid : uid
      }
    }

- name: "Query with missing variable - partial jwt token"
  gqlquery: |
    query {
      queryProject {
        name
      }
    }
  role: "ADMIN"
  dgquery: |-
    query {
      queryProject(func: type(Project)) {
        name : Project.name
        dgraph.uid : uid
      }
    }

- name: "Query with missing jwt token - type without auth directive"
  gqlquery: |
    query {
      queryRole {
        permission
      }
    }
  dgquery: |-
    query {
      queryRole(func: type(Role)) {
        permission : Role.permission
        dgraph.uid : uid
      }
    }

- name: "Query with missing jwt token - type with auth directive"
  gqlquery: |
    query {
      queryMovie {
        content
      }
    }
  dgquery: |-
    query {
      queryMovie(func: uid(Movie1)) @filter((NOT (uid(Movie2)) AND uid(Movie3))) {
        content : Movie.content
        dgraph.uid : uid
      }
      Movie1 as var(func: type(Movie))
      Movie2 as var(func: uid(Movie1)) @filter(eq(Movie.hidden, true)) @cascade
      Movie3 as var(func: uid(Movie1)) @cascade {
        regionsAvailable : Movie.regionsAvailable @filter(eq(Region.global, true))
        dgraph.uid : uid
      }
    }

- name: "Query with missing jwt token - type with empty auth directive"
  gqlquery: |
    query {
      queryReview {
        comment
      }
    }
  dgquery: |-
    query {
      queryReview(func: type(Review)) {
        comment : Review.comment
        dgraph.uid : uid
      }
    }