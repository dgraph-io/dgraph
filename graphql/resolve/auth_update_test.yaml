- name: "Update one node that creates nothing"
  gqlquery: |
    mutation updateUserSecret($upd: UpdateUserSecretInput!) {
      updateUserSecret(input: $upd) {
        usersecret {
          id
        }
      }
    }
  variables: |
    { "upd":
      { "filter": { "id": [ "0x123" ] },
        "set": { "aSecret": "new Value" }
      }
    }
  dgquery: |-
    query {
      x as updateUserSecret(func: uid(UserSecret1)) @filter(uid(UserSecret2)) {
        uid
      }
      UserSecret1 as var(func: type(UserSecret)) @filter(uid(0x123))
      UserSecret2 as var(func: uid(UserSecret1)) @filter(eq(UserSecret.ownedBy, "user1")) @cascade
    }
  uids: |
    { }

- name: "Update a node that does a deep add"
  gqlquery: |
    mutation updateColumn($upd: UpdateColumnInput!) {
      updateColumn(input: $upd) {
        column {
          colID
        }
      }
    }
  dgquery: |-
    query {
      x as updateColumn(func: uid(Column1)) @filter(uid(Column2)) {
        uid
      }
      Column1 as var(func: type(Column)) @filter(uid(0x123))
      Column2 as var(func: uid(Column1)) @cascade {
        inProject : Column.inProject {
          roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }
  variables: |
    { "upd":
      { 
        "filter": { "colID": [ "0x123" ] },
        "set": { 
          "name": "new name", 
          "tickets": [ { "title": "a ticket" } ]
        }
      }
    }
  uids: |
    { "Ticket4": "0x789" }
  json: |
    { "Column2": [ { "uid": "0x123" } ] }
  authquery: |-
    query {
      Ticket(func: uid(Ticket1)) @filter(uid(Ticket2)) {
        uid
      }
      Ticket1 as var(func: uid(0x789))
      Ticket2 as var(func: uid(Ticket1)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }
  authjson: |
    { 
      "Ticket": [ { "uid": "0x789" } ] 
    }  


- name: "Update a node that does a deep add and fails auth"
  gqlquery: |
    mutation updateColumn($upd: UpdateColumnInput!) {
      updateColumn(input: $upd) {
        column {
          colID
        }
      }
    }
  dgquery: |-
    query {
      x as updateColumn(func: uid(Column1)) @filter(uid(Column2)) {
        uid
      }
      Column1 as var(func: type(Column)) @filter(uid(0x123))
      Column2 as var(func: uid(Column1)) @cascade {
        inProject : Column.inProject {
          roles : Project.roles @filter(eq(Role.permission, "ADMIN")) {
            assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }
  variables: |
    { "upd":
      { 
        "filter": { "colID": [ "0x123" ] },
        "set": { 
          "name": "new name", 
          "tickets": [ { "title": "a ticket" } ]
        }
      }
    }
  uids: |
    { "Ticket4": "0x789" }
  json: |
    { "Column2": [ { "uid": "0x123" } ] }
  authquery: |-
    query {
      Ticket(func: uid(Ticket1)) @filter(uid(Ticket2)) {
        uid
      }
      Ticket1 as var(func: uid(0x789))
      Ticket2 as var(func: uid(Ticket1)) @cascade {
        onColumn : Ticket.onColumn {
          inProject : Column.inProject {
            roles : Project.roles @filter(eq(Role.permission, "EDIT")) {
              assignedTo : Role.assignedTo @filter(eq(User.username, "user1"))
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
        dgraph.uid : uid
      }
    }
  authjson: |
    { }  
  error:
    { "message": "mutation failed because authorization failed" }
