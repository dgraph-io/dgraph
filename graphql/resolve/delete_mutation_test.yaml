-
  name: "Only id filter"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "id": ["0x1", "0x2"] }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        { "uid": "uid(x)" }
  dgquery: |-
    query {
      x as deleteAuthor(func: uid(0x1, 0x2)) @filter(type(Author)) {
        uid
      }
    }

-
  name: "Multiple filters including id"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      {
        "id": ["0x1", "0x2"],
        "name": { "eq": "A.N. Author" }
      }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        { "uid": "uid(x)" }
  dgquery: |-
    query {
      x as deleteAuthor(func: uid(0x1, 0x2)) @filter((eq(Author.name, "A.N. Author") AND type(Author))) {
        uid
      }
    }

-
  name: "Multiple non-id filters"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      {
        "name": { "eq": "A.N. Author" },
        "dob": { "eq": "2000-01-01" }
      }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        { "uid": "uid(x)" }
  dgquery: |-
    query {
      x as deleteAuthor(func: type(Author)) @filter((eq(Author.dob, "2000-01-01") AND eq(Author.name, "A.N. Author"))) {
        uid
      }
    }