-
  name: "Only id filter"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "id": ["0x1", "0x2"] }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Post2)",
            "Post.author": { "uid": "uid(x)" }
          }
        ]
  dgquery: |-
    query {
      x as deleteAuthor(func: uid(0x1, 0x2)) @filter(type(Author)) {
        uid
        Post2 as Author.posts
      }
    }

-
  name: "Delete with deep query in result"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
        numUids
        author (filter: { name: { eq: "GraphQL" } }, order: { asc: name }, first: 10, offset: 10) {
          id
          name
          country {
            name
            states (filter: { code: { eq: "GraphQL" } }, order: { asc: name }, first: 10, offset: 10) {
              code
              name
              capital
            }
          }
        }
      }
    }
  gqlvariables: |
    { "filter":
      { "id": ["0x1", "0x2"] }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Post2)",
            "Post.author": { "uid": "uid(x)" }
          }
        ]
  dgquery: |-
    query {
      x as deleteAuthor(func: uid(0x1, 0x2)) @filter(type(Author)) {
        uid
        Post2 as Author.posts
      }
      author(func: uid(x), orderasc: Author.name, first: 10, offset: 10) @filter(eq(Author.name, "GraphQL")) {
        id : uid
        name : Author.name
        country : Author.country {
          name : Country.name
          states : Country.states @filter(eq(State.code, "GraphQL")) (orderasc: State.name, first: 10, offset: 10) {
            code : State.code
            name : State.name
            capital : State.capital
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
      }
    }

-
  name: "Multiple filters including id"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      {
        "id": ["0x1", "0x2"],
        "name": { "eq": "A.N. Author" }
      }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Post2)",
            "Post.author": { "uid": "uid(x)" }
          }
        ]
  dgquery: |-
    query {
      x as deleteAuthor(func: uid(0x1, 0x2)) @filter((eq(Author.name, "A.N. Author") AND type(Author))) {
        uid
        Post2 as Author.posts
      }
    }

-
  name: "Multiple non-id filters"
  gqlmutation: |
    mutation deleteAuthor($filter: AuthorFilter!) {
      deleteAuthor(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      {
        "name": { "eq": "A.N. Author" },
        "dob": { "eq": "2000-01-01" }
      }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Post2)",
            "Post.author": { "uid": "uid(x)" }
          }
        ]
  dgquery: |-
    query {
      x as deleteAuthor(func: type(Author)) @filter((eq(Author.dob, "2000-01-01") AND eq(Author.name, "A.N. Author"))) {
        uid
        Post2 as Author.posts
      }
    }

-
  name: "With list inverse"
  gqlmutation: |
    mutation deleteState($filter: StateFilter!) {
      deleteState(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "code": { "eq": "abc" } }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Country2)",
            "Country.states": [{ "uid": "uid(x)" }]
          }
        ]
  dgquery: |-
    query {
      x as deleteState(func: type(State)) @filter(eq(State.code, "abc")) {
        uid
        Country2 as State.country
      }
    }

-
  name: "With multiple inverses"
  gqlmutation: |
    mutation deletePost($filter: PostFilter!) {
      deletePost(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "postID": ["0x1", "0x2"] }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(Author2)",
            "Author.posts": [{ "uid": "uid(x)" }]
          },
          {
            "uid": "uid(Category3)",
            "Category.posts": [{ "uid": "uid(x)" }]
          }
        ]
  dgquery: |-
    query {
      x as deletePost(func: uid(0x1, 0x2)) @filter(type(Post)) {
        uid
        Author2 as Post.author
        Category3 as Post.category
      }
    }

-
  name: "Delete mutation on a type with a field with reverse predicate"
  gqlmutation: |
    mutation deleteMovie($filter: MovieFilter!) {
      deleteMovie(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "id": ["0x1", "0x2"] }
    }
  explanation: "The correct mutation and query should be built using variable and filters."
  dgmutations:
    - deletejson: |
        [
          { "uid": "uid(x)" },
          {
            "uid": "uid(MovieDirector2)",
            "directed.movies": [{ "uid": "uid(x)" }]
          }
        ]
  dgquery: |-
    query {
      x as deleteMovie(func: uid(0x1, 0x2)) @filter(type(Movie)) {
        uid
        MovieDirector2 as ~directed.movies
      }
    }

-
  name: "Delete mutation for an interface whose implementation has auth rules"
  gqlmutation: |
    mutation deleteX($filter: XFilter!) {
      deleteX(filter: $filter) {
        msg
      }
    }
  gqlvariables: |
    { "filter":
      { "id": ["0x1", "0x2"] }
    }
  explanation: "The mutation should get rewritten to dummy query because its implementation has auth rules."
  dgmutations:
    - deletejson: |
        [{ "uid": "uid(x)" }]
  dgquery: |-
    query {
      x as deleteX()
    }