ADD_UPDATE_MUTATION:
  -
    name: "single level"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post {
            postID
            title
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          postID : uid
          title : Post.title
        }
      }

  -
    name: "alias is ignored in query rewriting"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          result : post {
            postID
            titleAlias : title
            theAuthor : author {
              nameAlias : name
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          postID : uid
          title : Post.title
          author : Post.author {
            name : Author.name
            dgraph.uid : uid
          }
        }
      }

  -
    name: "selection set in result"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post (first: 0, offset: 10, order : {asc: title}, filter: { title: { anyofterms: "GraphQL" } }){
            postID
            title
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4), orderasc: Post.title, first: 0, offset: 10) @filter(anyofterms(Post.title, "GraphQL")) {
          postID : uid
          title : Post.title
        }
      }

  -
    name: "deep"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post {
            postID
            title
            author {
              name
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          postID : uid
          title : Post.title
          author : Post.author {
            name : Author.name
            dgraph.uid : uid
          }
        }
      }

  -
    name: "can do deep filter"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post {
            postID
            title
            author {
              name
              posts(filter: { title: { anyofterms: "GraphQL" } }) {
                title
              }
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          postID : uid
          title : Post.title
          author : Post.author {
            name : Author.name
            posts : Author.posts @filter(anyofterms(Post.title, "GraphQL")) {
              title : Post.title
              dgraph.uid : uid
            }
            dgraph.uid : uid
          }
        }
      }

  -
    name: "can work with skip and filter"
    variables:
      skip: true
      include: false
    gqlquery: |
      mutation ($skip: Boolean!, $include: Boolean!) {
        ADD_UPDATE_MUTATION {
          post {
            postID @skip(if: $skip)
            title
            author @include(if: $include) {
              name
              posts(filter: { title: { anyofterms: "GraphQL" } }) {
                title
              }
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          title : Post.title
          dgraph.uid : uid
        }
      }

  -
    name: "cascade directive on mutation payload"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION @cascade {
          post {
            title
            text
            author {
              name
              dob
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) @cascade {
          title : Post.title
          text : Post.text
          author : Post.author {
            name : Author.name
            dob : Author.dob
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
      }

  -
    name: "cascade directive on mutation query field"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post @cascade {
            title
            text
            author {
              name
              dob
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) @cascade {
          title : Post.title
          text : Post.text
          author : Post.author {
            name : Author.name
            dob : Author.dob
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
      }

  -
    name: "cascade directive inside mutation query"
    gqlquery: |
      mutation {
        ADD_UPDATE_MUTATION {
          post {
            title
            text
            author @cascade {
              name
              dob
            }
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) {
          title : Post.title
          text : Post.text
          author : Post.author @cascade {
            name : Author.name
            dob : Author.dob
            dgraph.uid : uid
          }
          dgraph.uid : uid
        }
      }

UPDATE_MUTATION:
  -
    name: "filter update result"
    gqlquery: |
      mutation {
        UPDATE_MUTATION {
          post(filter: { title: { anyofterms: "GraphQL" } }) {
            postID
            title
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4)) @filter(anyofterms(Post.title, "GraphQL")) {
          postID : uid
          title : Post.title
        }
      }
  -
    name: "order update result"
    gqlquery: |
      mutation {
        UPDATE_MUTATION {
          post(order : {asc: title}) {
            postID
            title
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4), orderasc: Post.title) {
          postID : uid
          title : Post.title
        }
      }

  -
    name: "order and pagination update result"
    gqlquery: |
      mutation {
        UPDATE_MUTATION {
          post(first: 0, offset: 10, order : {asc: title}) {
            postID
            title
          }
        }
      }
    dgquery: |-
      query {
        post(func: uid(0x4), orderasc: Post.title, first: 0, offset: 10) {
          postID : uid
          title : Post.title
        }
      }
