-
  name: "Strip Dgraph result list for non-list query result"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "Dgraph always returns a query result as a list.  That needs to be
    fixed for queries with non-list result types."
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" } }
    
-
  name: "Empty query result becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "If Dgraph finds no results for a query, and the GraphQL
    type is nullable, we should set the result to null."
  response: |
    { }
  expected: |
    { "getAuthor": null }

-
  name: "Root level handled correctly if just uid when non-nullable missing"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "GraphQL error propagation causes an error on a non-nullable field
    (like name: String!) to propagate to the parent object."
  response: |
    { "getAuthor": [ { "uid": "0x1" } ] }
  expected: |
    { "getAuthor": null }
  errors:
    [ { 
      "message": "Non-nullable field 'name' (type String!) was not present in 
                result from Dgraph.  GraphQL error propagation triggered." ,
      "path": [ "getAuthor", "name" ], 
      "locations": [ { "line": 3, "column": 5 } ] } ]

-
  name: "Multiple nullable query results becomes nulls (with alias)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
      auth : getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "If Dgraph finds no results for a query, and the GraphQL
    type is nullable, we should set the result to null."
  response: |
    { }
  expected: |
    { "getAuthor": null, "auth": null }

-
  name: "Multiple query results with a nullable becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
      post : getPost(id: "0x2") {
        text
      }
    }
  explanation: "Even if some queries result in null, we should return all the
    results we got."
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" }, "post": null }

-
  name: "Missing nullable field becomes null"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        dob
      }
    }
  explanation: "When a field that's nullable (like dob: DateTime) is missing 
      in the Dgraph result, it should be added as null to the GraphQL result."
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "dob": null } }

-
  name: "Root level handled correctly if just uid when nullable missing"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        dob
      }
    }
  explanation: "GraphQL error propagation causes an error on a non-nullable field
    (like name: String!) to propagate to the parent object."
  response: |
    { "getAuthor": [ { "uid": "0x1" } ] }
  expected: |
    { "getAuthor": { "dob": null } }

-
  name: "Missing nullable field becomes null (aliased)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        birthday : dob
      }
    }
  explanation: "When a field that's nullable (like dob: DateTime) is missing 
      in the Dgraph result, it should be added as null to the GraphQL result."
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "birthday": null } }

-
  name: "Missing nullable becomes null (deep)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsRequired {
          title
          text
        }
      }
    }
  explanation: "When a field that's nullable (like text: String) is missing 
      in the Dgraph result, it should be added as null to the GraphQL result."
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsRequired": [ { "uid": "0x2", "title": "A Title" } ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsRequired": [ { "title": "A Title", "text": null } ] } 
    }

-
  name: "Missing required list becomes []"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsRequired {
          title
        }
      }
    }
  explanation: "When a field of any list type is missing in the result,
    it should be added as an empty list [], not null"
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsRequired": [ ] } }

-
  name: "Missing nullable list becomes []"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          title
        }
      }
    }
  explanation: "When a field of any list type is missing in the result,
    it should be added as an empty list [], not null"
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsNullable": [ ] } }

-
  name: "Missing list becomes [] (aliased)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        posts : postsRequired {
          title
        }
      }
    }
  explanation: "When a field of any list type is missing in the result,
    it should be added as an empty list [], not null"
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "posts": [ ] } }

-
  name: "Multiple missing lists become [] (with alias)"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        posts : postsRequired {
          title
        }
        postsNullable {
          title
        }
      }
    }
  explanation: "When a field of any list type is missing in the result,
    it should be added as an empty list [], not null"
  response: |
    { "getAuthor": [ { "uid": "0x1", "name": "A.N. Author" } ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "posts": [ ], "postsNullable": [ ] } }

-
  name: "Sensible error when expecting single but multiple items returned"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "When a query result is of a non-list type, we really should only
    get one item in the Dgraph result."
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", "name": "A.N. Author" }, 
      { "uid": "0x2", "name": "A.N. Other Author" } 
    ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author" } }
  errors:
    [ { "message": "Dgraph returned a list, but getAuthor (type Author) was expecting just one 
          item.  The first item in the list was used to produce the result.",
        "locations": [ { "column":3, "line":2 } ] } ]

-
  name: "Sensible error when un-processable Dgraph result"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
      }
    }
  explanation: "Shouldn't happen"
  response: |
    { something is wrong }
  expected: |
    { "getAuthor": null }
  errors:
    [ { "message": "couldn't unmarshal Dgraph result 
          because invalid character 's' looking for beginning of object key string" ,
        "locations": [ { "column":3, "line":2 } ] } ]

-
  name: "Error gets propagated to nullable parent if missing non-nullable field"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        dob
      }
    }
  explanation: "GraphQL error propagation causes an error on a non-nullable field
    (like name: String!) to propagate to the parent object."
  response: |
    { "getAuthor": [ { "uid": "0x1", "dob": "2000-01-01" } ] }
  expected: |
    { "getAuthor": null }
  errors:
    [ { 
      "message": "Non-nullable field 'name' (type String!) was not present in 
                result from Dgraph.  GraphQL error propagation triggered." ,
      "path": [ "getAuthor", "name" ], 
      "locations": [ { "line": 3, "column": 5 } ] } ]

-
  name: "Error in [T!] list propagated as null list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsElmntRequired {
          title
          text
        }
      }
    }
  explanation: "If a list has non-nullable elements and an element becomes null,
    here because title (String!) is missing, GraphQL error propagation 
    says the list becomes null."
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsElmntRequired": [ 
        { "uid": "0x2", "title": "A Title", "text": "Some Text" }, 
        { "uid": "0x3", "text": "More Text" } 
      ] } 
    ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsElmntRequired": null } }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsElmntRequired", 1, "title" ], 
      "locations": [ { "line": 5, "column": 7 } ] } ]

-
  name: "Only uid in [T!] list propagated as null list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsElmntRequired {
          title
          text
        }
      }
    }
  explanation: "If a list has non-nullable elements and an element becomes null,
    here because title (String!) is missing, GraphQL error propagation 
    says the list becomes null."
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsElmntRequired": [ 
        { "uid": "0x2", "title": "A Title", "text": "Some Text" }, 
        { "uid": "0x3" } 
      ] } 
    ] }
  expected: |
    { "getAuthor": { "name": "A.N. Author", "postsElmntRequired": null } }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsElmntRequired", 1, "title" ], 
      "locations": [ { "line": 5, "column": 7 } ] } ]

-
  name: "Error in [T] list propagated as null element in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          title
          text
        }
      }
    }
  explanation: "The schema asserts a Post's title as non nullable (title: String!), 
    but allows nulls in an Author's postsNullable (postsNullable: [Post]). So a 
    post in the result list that's missing a title gets squashed to null"
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsNullable": [ 
        { "uid": "0x2", "title": "A Title", "text": "Some Text" }, 
        { "uid": "0x3", "text": "More Text" } 
      ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsNullable": [ 
        { "title": "A Title", "text": "Some Text" }, 
        null 
      ] }
    }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullable", 1, "title" ], 
      "locations": [ { "line": 5, "column": 7 } ] } ]

-
  name: "Only uid in [T] list propagated as null element in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          title
        }
      }
    }
  explanation: "The schema asserts a Post's title as non nullable (title: String!), 
    but allows nulls in an Author's postsNullable (postsNullable: [Post]). So a 
    post in the result list that's missing a title gets squashed to null"
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsNullable": [ 
        { "uid": "0x2" },
        { "uid": "0x3", "title": "A Title" }
      ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsNullable": [ 
        null,
        { "title": "A Title" }
      ] }
    }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullable", 0, "title" ], 
      "locations": [ { "line": 5, "column": 7 } ] } ]

-
  name: "Many errors in [T] list propagated as null elements in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          text
          title
        }
      }
    }
  explanation: "The schema asserts a Post's title as non nullable (title: String!), 
    but allows nulls in an Author's postsNullable (postsNullable: [Post]). So any 
    post in the result list that's missing a title gets squashed to null"
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsNullable": [ 
        { "uid": "0x2", "text": "Some Text" },
        { "uid": "0x3", "title": "A Title", "text": "Some Text" }, 
        { "uid": "0x4" }, 
        { "uid": "0x5", "text": "Some Text" } 
      ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsNullable": [ 
        null,
        { "title": "A Title", "text": "Some Text" }, 
        null,
        null
      ] }
    }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullable", 0, "title" ], 
      "locations": [ { "line": 6, "column": 7 } ] },
      { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullable", 2, "title" ], 
      "locations": [ { "line": 6, "column": 7 } ] },
      { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullable", 3, "title" ], 
      "locations": [ { "line": 6, "column": 7 } ] } ]

-
  name: "Only uid on nullable field list gets inserted correctly"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullable {
          text
        }
      }
    }
  explanation: "The schema asserts a Post's text as nullable (text: String), 
    so if a query finds posts without any text, nulls should be inserted"
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsNullable": [ 
        { "uid": "0x2" },
        { "uid": "0x3", "text": "Some Text" }, 
        { "uid": "0x4" }, 
        { "uid": "0x5", "text": "Some Text" } 
      ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsNullable": [ 
        { "text": null }, 
        { "text": "Some Text" }, 
        { "text": null },
        { "text": "Some Text" }
      ] }
    }

-
  name: "Error in [T]! list propagated as null element in list"
  gqlquery: |
    query {
      getAuthor(id: "0x1") {
        name
        postsNullableListRequired {
          title
          text
        }
      }
    }
  explanation: "The schema asserts a Post's title as non nullable (title: String!), 
    but allows nulls in an Author's postsNullable (postsNullable: [Post]). So a 
    post in the result list that's missing a title gets squashed to null"
  response: |
    { "getAuthor": [ 
      { "uid": "0x1", 
      "name": "A.N. Author", 
      "postsNullableListRequired": [ 
        { "uid": "0x3", "text": "More Text" },
        { "uid": "0x2", "title": "A Title", "text": "Some Text" }
      ] } 
    ] }
  expected: |
    { "getAuthor": 
      { "name": "A.N. Author", 
      "postsNullableListRequired": [ 
        null,
        { "title": "A Title", "text": "Some Text" }
      ] } 
    }
  errors:
    [ { "message": "Non-nullable field 'title' (type String!) was not present 
                    in result from Dgraph.  GraphQL error propagation triggered.",
      "path": [ "getAuthor", "postsNullableListRequired", 0, "title" ], 
      "locations": [ { "line": 5, "column": 7 } ] } ]
