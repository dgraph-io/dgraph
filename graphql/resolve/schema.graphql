# Test schema that contains an example of everything that's useful to
# test for query rewriting.

type Hotel {
    id: ID!
    name: String!
    location: Point @search
    area: Polygon @search
    branches: MultiPolygon @search
}

type Country {
    id: ID!
    name: String! @search(by: [trigram, exact])
    states: [State] @hasInverse(field: country)
}

type State {
    code: String! @id
    country: Country
    name: String!
    capital: String
}

type Author {
    id: ID!
    name: String! @search(by: [hash])
    dob: DateTime @search
    reputation: Float @search
    country: Country
    posts: [Post!] @hasInverse(field: author)
}

type Editor {
    id: ID!
    code: String! @id
    name: String! @search(by: [hash])
}

type Post {
    postID: ID!
    title: String! @search(by: [term])
    text: String @search(by: [fulltext])
    tags: [String] @search(by: [exact])
    numLikes: Int @search
    isPublished: Boolean @search
    postType: [PostType] @search
    author: Author!
    category: Category @hasInverse(field: posts)
    comments: [Comment]
    ps: PostSecret
}

type PostSecret {
    title: String! @id
}

type Category {
    id: ID
    name: String
    posts: [Post]
    iAmDeprecated: String @deprecated(reason: "because")
}

enum PostType {
    Fact
    Question
    Opinion
}

interface Character {
    id: ID!
    name: String! @search
}

interface Employee {
    ename: String!
}

type Director implements Character {
    movies: [String!]
}

type Human implements Character & Employee {
    dob: DateTime
    female: Boolean
}

# just for testing filters on enum types

type Verification {
    name: String @search(by: [exact])
    status: [Status!]! @search(by: [exact])
    prevStatus: Status! @search
}

enum Status {
    ACTIVE
    INACTIVE
    DEACTIVATED
}

# just for testing singluar (non-list) edges in both directions

type House {
    id: ID!
    owner: Owner @hasInverse(field: house)
}

type Owner {
    id: ID!
    house: House
}

# for testing ~reverse predicate in @dgraph directive
type Movie {
    id: ID!
    name: String!
    director: [MovieDirector] @dgraph(pred: "~directed.movies")
}

type MovieDirector {
    id: ID!
    name: String!
    directed: [Movie] @dgraph(pred: "directed.movies")
}

type Lab {
    name: String! @id
    computers: [Computer]
}

# just for testing XID remove in list
type Computer {
    owners: [ComputerOwner!]
    name: String! @id
}

type ComputerOwner {
    name: String! @id
    nickName: String
    computers: Computer! @hasInverse(field: owners)
}

type User @secret(field: "pwd") {
    name: String! @id
}

# For testing duplicate XID in single mutation
type District {
    code: String! @id
    name: String!
    cities: [City] @hasInverse(field: district)
}

type City {
    id: ID!
    name: String!
    district: District
}

# For testing duplicate XID in single mutation for interface
interface People {
    id: ID!
    xid: String! @id
    name: String!
}

type Teacher implements People {
    subject: String
    teaches: [Student]
}

type Student implements People {
    taughtBy: [Teacher] @hasInverse(field: "teaches")
}

type Comment {
    id: ID!
    author: String!
    title: String
    content: String @custom(http: {
        url: "http://api-gateway.com/post/",
        method: "GET",
        operation: "batch",
        body: "{ myId: $id, theAuthor: $author}",
        forwardHeaders: ["X-App-Token"]})

    url: String! @id
    ups: Int!
    downs: Int
    relatedUsers: [User] @custom(http: {
        url: "http://api-gateway.com/relatedPosts",
        method: "POST",
        operation: "single",
        body: "{ myId: $url }"})
}

type Query {
    myFavoriteMovies(id: ID!, name: String!, num: Int): [Movie] @custom(http: {
        url: "http://myapi.com/favMovies/$id?name=$name&num=$num",
        method: "GET"
    })

    myFavoriteMoviesPart2(id: ID!, name: String!, num: Int): [Movie] @custom(http: {
        url: "http://myapi.com/favMovies/$id?name=$name&num=$num",
        method: "POST",
        body: "{ id: $id, name: $name, director: { number: $num }}",
        forwardHeaders: ["X-App-Token", "Auth0-token"]
    })
}

input MovieDirectorInput {
    id: ID
    name: String
    directed: [MovieInput]
}

input MovieInput {
    id: ID
    name: String
    director: [MovieDirectorInput]
}

type Mutation {
    createMyFavouriteMovies(input: [MovieInput!]): [Movie] @custom(http: {
        url: "http://myapi.com/favMovies",
        method: "POST",
        body: "{ movies: $input}",
        forwardHeaders: ["X-App-Token", "Auth0-token"]
    })
    updateMyFavouriteMovie(id: ID!, input: MovieInput!): Movie @custom(http: {
        url: "http://myapi.com/favMovies/$id",
        method: "PATCH",
        body: "{ movie: $input}"
    })
    deleteMyFavouriteMovie(id: ID!): Movie @custom(http: {
        url: "http://myapi.com/favMovies/$id",
        method: "DELETE"
    })
}

type Message {
    content: String! @dgraph(pred: "post")
    author: String @dgraph(pred: "<职业>")
}

interface X {
    id: ID!
    username: String! @id
    age: Int
}
type Y implements X @auth(
    query: { rule: """
    query($USER: String!) {
    queryY(filter: { username: { eq: $USER } }) {
    __typename
    }
    }
    """ }
){
    userRole: String @search(by: [hash])
}

type Post1 {
    id: String! @id
    content: String
    comments: [Comment1]
}

type Person1 {
    id: String! @id
    friends: [Person1] @hasInverse(field: friends)
    closeFriends: [Person1] @hasInverse(field: closeFriends)
    name: String! @id
}

type Comment1 {
    id: String! @id
    commentId: String
    message: String
    replies: [Comment1]
}

type Tweets {
    id: String! @id
    score: Int
}

"""
This is used for fragment related testing
"""
interface Thing {
    name: String # field to act as a common inherited field for both ThingOne and ThingTwo
}

type ThingOne implements Thing {
    id: ID! # ID field with same name as the ID field in ThingTwo
    color: String # field with same name as a field in ThingTwo
    prop: String @dgraph(pred: "prop") # field with same name and same dgraph predicate as a field in ThingTwo
    usedBy: String # field with different name than any field in ThingTwo
}

type ThingTwo implements Thing {
    id: ID!
    color: String
    prop: String @dgraph(pred: "prop")
    owner: String
}

type Person {
    id: ID!
    name: String @search(by: [hash])
    nameHi: String @dgraph(pred:"Person.name@hi") @search(by: [hash])
    nameZh: String @dgraph(pred:"Person.name@zh") @search(by: [hash])
    nameHiZh: String @dgraph(pred:"Person.name@hi:zh")
    nameHi_Zh_Untag: String @dgraph(pred:"Person.name@hi:zh:.")
    name_Untag_AnyLang: String @dgraph(pred:"Person.name@.") @search(by: [hash])
    friends: [Person] @hasInverse(field: friends)
}

interface A {
    name: String! @id
}

type B implements A {
    id: ID!
}

# union testing - start
enum AnimalCategory {
    Fish
    Amphibian
    Reptile
    Bird
    Mammal
    InVertebrate
}

interface Animal {
    id: ID!
    category: AnimalCategory @search
}

type Dog implements Animal {
    breed: String @search
}

type Parrot implements Animal {
    repeatsWords: [String]
}

type Cheetah implements Animal {
    speed: Float
}

"""
This type specifically doesn't implement any interface.
We need this to test out all cases with union.
"""
type Plant {
    id: ID!
    breed: String # field with same name as a field in type Dog
}

union HomeMember = Dog | Parrot | Human | Plant

type Zoo {
    id: ID!
    animals: [Animal]
    city: String
}

type Home {
    id: ID!
    address: String
    members: [HomeMember]
    favouriteMember: HomeMember
}
# union testing - end

type Workflow {
    id: ID!
    nodes: [Node!]
}

type Node {
    name: String!
}

type Book {
    id: ID!
    publisher: String
    title: String @id
    ISBN: String @id
    bookId: Int @id
    author: author
}

type author {
    id: ID!
    name: String
    penName: String @id
    authorId: String @id
    book: [Book] @hasInverse(field: author)
}
# test for entities resolver

type Mission @key(fields: "id") {
    id: String! @id
    crew: [Astronaut]
    spaceShip: [SpaceShip]
    designation: String!
    startDate: String
    endDate: String
}

type Astronaut @key(fields: "id") @extends {
    id: ID! @external
    missions: [Mission]
}

type SpaceShip @key(fields: "id") @extends {
    id: String! @id @external
    missions: [Mission]
}

type Foo {
    id: String! @id
    bar: Bar! @hasInverse(field: foo)
}

type Bar {
    id: String! @id
    foo: Foo!
}

type ABC {
    ab: String! @id
    abc: String! @id
    AB: AB
}

type AB {
    Cab: String! @id
    Cabc: String! @id
}

type Friend1 {
    id: String! @id
    friends: [Friend]
}

type Friend {
    id: String! @id
}

type LinkX {
    f9: String! @id
    f1: [LinkY] @dgraph(pred: "~link")
    f2: [LinkZ] @dgraph(pred: "~link")
}
type LinkY {
    f6: String! @id
    f3: [LinkX] @dgraph(pred: "link")
}
type LinkZ {
    f7: String! @id
    f4: [LinkX] @dgraph(pred: "link")
}

interface Member {
    refID: String! @id (interface:true)
    name:  String! @id
    itemsIssued: [String]
    fineAccumulated: Int
}

interface Team {
    teamID: String! @id (interface:true)
    teamName:  String! @id
}

type LibraryMember implements Member {
    interests: [String]
    readHours: String
}

type SportsMember implements Member & Team {
    plays: String
    playerRating: Int
}

type CricketTeam implements Team {
    numOfBatsmans: Int
    numOfBowlers: Int
}

type LibraryManager  {
    name: String! @id
    manages: [LibraryMember]
}

interface T {
    name: String! @id(interface:true)
    name1: String

}

type T1 implements T {
    name2:String
    link:T2

}

type T2 implements T {
    name3:String

}
