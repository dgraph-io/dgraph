-
  name: "custom query"
  type: "query"
  gqlschema: |
    type Country @remote {
        code: String
        name: String
    }

    type Query {
      getCountry(id: ID!): Country! @custom(http: {
          url: "http://google.com/validcountry",
          method: "POST",
          forwardHeaders: ["Content-Type"],
          graphql: "query($id: ID!) { country(code: $id) }",
          skipIntrospection: true
      })
    }
  gqlquery: |
    query {
      getCountry(id: "0x1") {
        name
        code
      }
    }
  remoteschema: |
    type Country @remote {
      code: String
      name: String
    }

    type Query {
      country(code: ID!): Country! @custom(http: {
        url: "http://google.com/validcountry",
        method: "POST",
        graphql: "query { country(code: $id) }",
        skipIntrospection: true
      })
    }
  remotequery: |-
    query($id: ID!) { country(code: $id) {
    name
    code
    }}
  remotevariables: |-
    { "id": "0x1" }

-
  name: "custom mutation"
  type: "mutation"
  gqlschema: |
    type Country @remote {
      code: String
      name: String
      states: [State]
      std: Int
    }

    type State @remote {
      code: String
      name: String
      country: Country
    }

    input CountryInput {
      code: String!
      name: String!
      states: [StateInput]
    }

    input StateInput {
        code: String!
        name: String!
    }

    type Mutation {
      addCountry(input: CountryInput!): Country! @custom(http: {
        url: "http://mock:8888/setCountry",
        method: "POST",
        skipIntrospection: true,
        graphql: "mutation($input: CountryInput!) { setCountry(country: $input) }"
      })
    }
  gqlquery: |
    mutation addCountry($input: CountryInput!) {
      addCountry(input: $input) {
        code
        name
        states {
          code
          name
        }
      }
    }
  gqlvariables: |
    { "input":
      {
        "code": "IN",
        "name": "India",
        "states": [
          {
            "code": "RJ",
            "name": "Rajasthan"
          },
          {
            "code": "KA",
            "name": "Karnataka"
          }
        ]
      }
    }
  remoteschema: |
    type Country {
      code: String
      name: String
      states: [State]
      std: Int
    }

    type State {
      code: String
      name: String
      country: Country
    }

    input CountryInput {
      code: String!
      name: String!
      states: [StateInput]
    }

    input StateInput {
      code: String!
      name: String!
    }

    type Mutation {
      setCountry(country: CountryInput!): Country!  @custom(http: {
        url: "http://mock:8888/setCountry",
        method: "POST",
        skipIntrospection: true,
        graphql: "mutation($input: CountryInput!) { setCountry(country: $input) }"
      })
    }
  remotequery: |-
    mutation($input: CountryInput!) { setCountry(country: $input) {
    code
    name
    states{
    code
    name
    }
    }}
  remotevariables: |
    { "input":
      {
        "code": "IN",
        "name": "India",
        "states": [
          {
            "code": "RJ",
            "name": "Rajasthan"
          },
          {
            "code": "KA",
            "name": "Karnataka"
          }
        ]
      }
    }

