#######################
# Input Schema
#######################

type Author {
	id: ID!
	name: String! @search(by: [hash])
	posts(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post] @hasInverse(field: author)
	postsAggregate(filter: PostFilter): PostAggregateResult
}

interface Post @secret(field: "pwd") @auth(password: {rule:"{$ROLE: { eq: \"Admin\" } }"}, query: {rule:"query($TEXT: String!) { \n  queryPost(filter: { text : {eq: $TEXT } } ) { \n    id \n  } \n}"}) {
	id: ID!
	text: String @search(by: [exact])
	datePublished: DateTime @search
	author(filter: AuthorFilter): Author! @hasInverse(field: posts)
}

type Question implements Post @auth(query: {rule:"query($ANS: Boolean!) { \n  queryQuestion(filter: { answered: $ANS } ) { \n    id \n  } \n}"}) @secret(field: "pwd") {
	id: ID!
	text: String @search(by: [exact])
	datePublished: DateTime @search
	author(filter: AuthorFilter): Author! @hasInverse(field: posts)
	answered: Boolean @search
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id(interface: Boolean) on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type AddQuestionPayload {
	question(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	numUids: Int
}

type AuthorAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type DeleteAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	msg: String
	numUids: Int
}

type DeletePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	msg: String
	numUids: Int
}

type DeleteQuestionPayload {
	question(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	msg: String
	numUids: Int
}

type PostAggregateResult {
	count: Int
	textMin: String
	textMax: String
	datePublishedMin: DateTime
	datePublishedMax: DateTime
}

type QuestionAggregateResult {
	count: Int
	textMin: String
	textMax: String
	datePublishedMin: DateTime
	datePublishedMax: DateTime
}

type UpdateAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type UpdatePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

type UpdateQuestionPayload {
	question(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum AuthorHasFilter {
	name
	posts
}

enum AuthorOrderable {
	name
}

enum PostHasFilter {
	text
	datePublished
	author
}

enum PostOrderable {
	text
	datePublished
}

enum QuestionHasFilter {
	text
	datePublished
	author
	answered
}

enum QuestionOrderable {
	text
	datePublished
}

#######################
# Generated Inputs
#######################

input AddAuthorInput {
	name: String!
	posts: [PostRef]
}

input AddQuestionInput {
	text: String
	datePublished: DateTime
	author: AuthorRef!
	answered: Boolean
	pwd: String!
}

input AuthorFilter {
	id: [ID!]
	name: StringHashFilter
	has: [AuthorHasFilter]
	and: [AuthorFilter]
	or: [AuthorFilter]
	not: AuthorFilter
}

input AuthorOrder {
	asc: AuthorOrderable
	desc: AuthorOrderable
	then: AuthorOrder
}

input AuthorPatch {
	name: String
	posts: [PostRef]
}

input AuthorRef {
	id: ID
	name: String
	posts: [PostRef]
}

input PostFilter {
	id: [ID!]
	text: StringExactFilter
	datePublished: DateTimeFilter
	has: [PostHasFilter]
	and: [PostFilter]
	or: [PostFilter]
	not: PostFilter
}

input PostOrder {
	asc: PostOrderable
	desc: PostOrderable
	then: PostOrder
}

input PostPatch {
	text: String
	datePublished: DateTime
	author: AuthorRef
	pwd: String
}

input PostRef {
	id: ID!
}

input QuestionFilter {
	id: [ID!]
	text: StringExactFilter
	datePublished: DateTimeFilter
	answered: Boolean
	has: [QuestionHasFilter]
	and: [QuestionFilter]
	or: [QuestionFilter]
	not: QuestionFilter
}

input QuestionOrder {
	asc: QuestionOrderable
	desc: QuestionOrderable
	then: QuestionOrder
}

input QuestionPatch {
	text: String
	datePublished: DateTime
	author: AuthorRef
	answered: Boolean
	pwd: String
}

input QuestionRef {
	id: ID
	text: String
	datePublished: DateTime
	author: AuthorRef
	answered: Boolean
	pwd: String
}

input UpdateAuthorInput {
	filter: AuthorFilter!
	set: AuthorPatch
	remove: AuthorPatch
}

input UpdatePostInput {
	filter: PostFilter!
	set: PostPatch
	remove: PostPatch
}

input UpdateQuestionInput {
	filter: QuestionFilter!
	set: QuestionPatch
	remove: QuestionPatch
}

#######################
# Generated Query
#######################

type Query {
	getAuthor(id: ID!): Author
	queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	aggregateAuthor(filter: AuthorFilter): AuthorAggregateResult
	getPost(id: ID!): Post
	checkPostPassword(id: ID!, pwd: String!): Post
	queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	aggregatePost(filter: PostFilter): PostAggregateResult
	getQuestion(id: ID!): Question
	checkQuestionPassword(id: ID!, pwd: String!): Question
	queryQuestion(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	aggregateQuestion(filter: QuestionFilter): QuestionAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addAuthor(input: [AddAuthorInput!]!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(filter: AuthorFilter!): DeleteAuthorPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(filter: PostFilter!): DeletePostPayload
	addQuestion(input: [AddQuestionInput!]!): AddQuestionPayload
	updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload
	deleteQuestion(filter: QuestionFilter!): DeleteQuestionPayload
}

