#######################
# Input Schema
#######################

type Todo @auth(query: {or:[{rule:"query($X_MyApp_User: String!) { \n    queryTodo { \n        owner (filter: { username: { eq: $X_MyApp_User }}) {\n            username\n        }\n    }\n}"},{rule:"query($X_MyApp_User: String!) { \n    queryTodo {\n        sharedWith (filter: { username: { eq: $X_MyApp_User }}) {\n            username\n        }\n    }\n}"},{rule:"query { \n    queryTodo(filter: { isPublic: true }) {\n        id\n    }\n}"}]}, add: {rule:"query($X_MyApp_User: String!) { \n    queryTodo {\n        owner (filter: { username: { eq: $X_MyApp_User }}) {\n            username\n        }\n    }\n}"}, update: {rule:"query($X_MyApp_User: String!) { \n    queryTodo {\n        owner (filter: { username: { eq: $X_MyApp_User }}) {\n            username\n        }\n    }\n}"}) {
	id: ID!
	title: String
	text: String
	isPublic: Boolean @search
	dateCompleted: String @search
	sharedWith(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	owner(filter: UserFilter): User @hasInverse(field: "todos")
	somethingPrivate: String
}

type User @auth(update: {rule:"query($X_MyApp_User: String!) { \n    queryUser(filter: { username: { eq: $X_MyApp_User }}) {\n        username\n    }\n}"}) {
	username: String! @id
	todos(filter: TodoFilter, order: TodoOrder, first: Int, offset: Int): [Todo] @hasInverse(field: owner)
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can currently represent values in range [-(2^53)+1, (2^53)-1] without any error.
Values out of this range but representable by a signed 64-bit integer, may get coercion error.
"""
scalar Int64

scalar DateTime

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @cascade on FIELD

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input Int64Filter {
	eq: Int64
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddTodoPayload {
	todo(filter: TodoFilter, order: TodoOrder, first: Int, offset: Int): [Todo]
	numUids: Int
}

type AddUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type DeleteTodoPayload {
	todo(filter: TodoFilter, order: TodoOrder, first: Int, offset: Int): [Todo]
	msg: String
	numUids: Int
}

type DeleteUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	msg: String
	numUids: Int
}

type UpdateTodoPayload {
	todo(filter: TodoFilter, order: TodoOrder, first: Int, offset: Int): [Todo]
	numUids: Int
}

type UpdateUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum TodoHasFilter {
	title
	text
	isPublic
	dateCompleted
	sharedWith
	owner
	somethingPrivate
}

enum TodoOrderable {
	title
	text
	dateCompleted
	somethingPrivate
}

enum UserHasFilter {
	username
	todos
}

enum UserOrderable {
	username
}

#######################
# Generated Inputs
#######################

input AddTodoInput {
	title: String
	text: String
	isPublic: Boolean
	dateCompleted: String
	sharedWith: [UserRef]
	owner: UserRef
	somethingPrivate: String
}

input AddUserInput {
	username: String!
	todos: [TodoRef]
}

input TodoFilter {
	id: [ID!]
	isPublic: Boolean
	dateCompleted: StringTermFilter
	has: TodoHasFilter
	and: TodoFilter
	or: TodoFilter
	not: TodoFilter
}

input TodoOrder {
	asc: TodoOrderable
	desc: TodoOrderable
	then: TodoOrder
}

input TodoPatch {
	title: String
	text: String
	isPublic: Boolean
	dateCompleted: String
	sharedWith: [UserRef]
	owner: UserRef
	somethingPrivate: String
}

input TodoRef {
	id: ID
	title: String
	text: String
	isPublic: Boolean
	dateCompleted: String
	sharedWith: [UserRef]
	owner: UserRef
	somethingPrivate: String
}

input UpdateTodoInput {
	filter: TodoFilter!
	set: TodoPatch
	remove: TodoPatch
}

input UpdateUserInput {
	filter: UserFilter!
	set: UserPatch
	remove: UserPatch
}

input UserFilter {
	username: StringHashFilter
	has: UserHasFilter
	and: UserFilter
	or: UserFilter
	not: UserFilter
}

input UserOrder {
	asc: UserOrderable
	desc: UserOrderable
	then: UserOrder
}

input UserPatch {
	todos: [TodoRef]
}

input UserRef {
	username: String
	todos: [TodoRef]
}

#######################
# Generated Query
#######################

type Query {
	getTodo(id: ID!): Todo
	queryTodo(filter: TodoFilter, order: TodoOrder, first: Int, offset: Int): [Todo]
	getUser(username: String!): User
	queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addTodo(input: [AddTodoInput!]!): AddTodoPayload
	updateTodo(input: UpdateTodoInput!): UpdateTodoPayload
	deleteTodo(filter: TodoFilter!): DeleteTodoPayload
	addUser(input: [AddUserInput!]!): AddUserPayload
	updateUser(input: UpdateUserInput!): UpdateUserPayload
	deleteUser(filter: UserFilter!): DeleteUserPayload
}

