#######################
# Input Schema
#######################

interface Movie {
	id: ID!
	name: String!
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director] @dgraph(pred: "directed.movies")
	directorAggregate(filter: DirectorFilter): DirectorAggregateResult
}

type OscarMovie implements Movie {
	id: ID!
	name: String!
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director] @dgraph(pred: "directed.movies")
	year: Int!
	directorAggregate(filter: DirectorFilter): DirectorAggregateResult
}

type Director {
	id: ID!
	name: String!
	directed(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie] @dgraph(pred: "~directed.movies")
	directedAggregate(filter: OscarMovieFilter): OscarMovieAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddDirectorPayload {
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	numUids: Int
}

type AddOscarMoviePayload {
	oscarMovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	numUids: Int
}

type DeleteDirectorPayload {
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	msg: String
	numUids: Int
}

type DeleteMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	msg: String
	numUids: Int
}

type DeleteOscarMoviePayload {
	oscarMovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	msg: String
	numUids: Int
}

type DirectorAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type MovieAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type OscarMovieAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	yearMin: Int
	yearMax: Int
	yearSum: Int
	yearAvg: Float
}

type UpdateDirectorPayload {
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	numUids: Int
}

type UpdateMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	numUids: Int
}

type UpdateOscarMoviePayload {
	oscarMovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum DirectorHasFilter {
	name
	directed
}

enum DirectorOrderable {
	name
}

enum MovieHasFilter {
	name
	director
}

enum MovieOrderable {
	name
}

enum OscarMovieHasFilter {
	name
	director
	year
}

enum OscarMovieOrderable {
	name
	year
}

#######################
# Generated Inputs
#######################

input AddDirectorInput {
	name: String!
}

input AddOscarMovieInput {
	name: String!
	director: [DirectorRef]
	year: Int!
}

input DirectorFilter {
	id: [ID!]
	has: [DirectorHasFilter]
	and: [DirectorFilter]
	or: [DirectorFilter]
	not: DirectorFilter
}

input DirectorOrder {
	asc: DirectorOrderable
	desc: DirectorOrderable
	then: DirectorOrder
}

input DirectorPatch {
	name: String
}

input DirectorRef {
	id: ID
	name: String
}

input MovieFilter {
	id: [ID!]
	has: [MovieHasFilter]
	and: [MovieFilter]
	or: [MovieFilter]
	not: MovieFilter
}

input MovieOrder {
	asc: MovieOrderable
	desc: MovieOrderable
	then: MovieOrder
}

input MoviePatch {
	name: String
	director: [DirectorRef]
}

input MovieRef {
	id: ID!
}

input OscarMovieFilter {
	id: [ID!]
	has: [OscarMovieHasFilter]
	and: [OscarMovieFilter]
	or: [OscarMovieFilter]
	not: OscarMovieFilter
}

input OscarMovieOrder {
	asc: OscarMovieOrderable
	desc: OscarMovieOrderable
	then: OscarMovieOrder
}

input OscarMoviePatch {
	name: String
	director: [DirectorRef]
	year: Int
}

input OscarMovieRef {
	id: ID
	name: String
	director: [DirectorRef]
	year: Int
}

input UpdateDirectorInput {
	filter: DirectorFilter!
	set: DirectorPatch
	remove: DirectorPatch
}

input UpdateMovieInput {
	filter: MovieFilter!
	set: MoviePatch
	remove: MoviePatch
}

input UpdateOscarMovieInput {
	filter: OscarMovieFilter!
	set: OscarMoviePatch
	remove: OscarMoviePatch
}

#######################
# Generated Query
#######################

type Query {
	getMovie(id: ID!): Movie
	queryMovie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	aggregateMovie(filter: MovieFilter): MovieAggregateResult
	getOscarMovie(id: ID!): OscarMovie
	queryOscarMovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	aggregateOscarMovie(filter: OscarMovieFilter): OscarMovieAggregateResult
	getDirector(id: ID!): Director
	queryDirector(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	aggregateDirector(filter: DirectorFilter): DirectorAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateMovie(input: UpdateMovieInput!): UpdateMoviePayload
	deleteMovie(filter: MovieFilter!): DeleteMoviePayload
	addOscarMovie(input: [AddOscarMovieInput!]!): AddOscarMoviePayload
	updateOscarMovie(input: UpdateOscarMovieInput!): UpdateOscarMoviePayload
	deleteOscarMovie(filter: OscarMovieFilter!): DeleteOscarMoviePayload
	addDirector(input: [AddDirectorInput!]!): AddDirectorPayload
	updateDirector(input: UpdateDirectorInput!): UpdateDirectorPayload
	deleteDirector(filter: DirectorFilter!): DeleteDirectorPayload
}

