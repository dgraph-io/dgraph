#######################
# Input Schema
#######################

interface Movie {
	id: ID!
	name: String!
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director] @dgraph(pred: "~directed.movies")
}

type OscarMovie implements Movie {
	id: ID!
	name: String!
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director] @dgraph(pred: "~directed.movies")
	year: Int!
}

type Director {
	id: ID!
	name: String!
	directed(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie] @dgraph(pred: "directed.movies")
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddDirectorPayload {
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	numUids: Int
}

type AddOscarMoviePayload {
	oscarmovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	numUids: Int
}

type DeleteDirectorPayload {
	msg: String
	numUids: Int
}

type DeleteMoviePayload {
	msg: String
	numUids: Int
}

type DeleteOscarMoviePayload {
	msg: String
	numUids: Int
}

type UpdateDirectorPayload {
	director(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
	numUids: Int
}

type UpdateMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	numUids: Int
}

type UpdateOscarMoviePayload {
	oscarmovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum DirectorOrderable {
	name
}

enum MovieOrderable {
	name
}

enum OscarMovieOrderable {
	name
	year
}

#######################
# Generated Inputs
#######################

input AddDirectorInput {
	name: String!
	directed: [OscarMovieRef]
}

input AddOscarMovieInput {
	name: String!
	director: [DirectorRef]
	year: Int!
}

input DirectorFilter {
	id: [ID!]
	not: DirectorFilter
}

input DirectorOrder {
	asc: DirectorOrderable
	desc: DirectorOrderable
	then: DirectorOrder
}

input DirectorPatch {
	name: String
	directed: [OscarMovieRef]
}

input DirectorRef {
	id: ID
	name: String
	directed: [OscarMovieRef]
}

input MovieFilter {
	id: [ID!]
	not: MovieFilter
}

input MovieOrder {
	asc: MovieOrderable
	desc: MovieOrderable
	then: MovieOrder
}

input MoviePatch {
	name: String
}

input MovieRef {
	id: ID!
}

input OscarMovieFilter {
	id: [ID!]
	not: OscarMovieFilter
}

input OscarMovieOrder {
	asc: OscarMovieOrderable
	desc: OscarMovieOrderable
	then: OscarMovieOrder
}

input OscarMoviePatch {
	name: String
	year: Int
}

input OscarMovieRef {
	id: ID
	name: String
	director: [DirectorRef]
	year: Int
}

input UpdateDirectorInput {
	filter: DirectorFilter!
	set: DirectorPatch
	remove: DirectorPatch
}

input UpdateMovieInput {
	filter: MovieFilter!
	set: MoviePatch
	remove: MoviePatch
}

input UpdateOscarMovieInput {
	filter: OscarMovieFilter!
	set: OscarMoviePatch
	remove: OscarMoviePatch
}

#######################
# Generated Query
#######################

type Query {
	getMovie(id: ID!): Movie
	queryMovie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	getOscarMovie(id: ID!): OscarMovie
	queryOscarMovie(filter: OscarMovieFilter, order: OscarMovieOrder, first: Int, offset: Int): [OscarMovie]
	getDirector(id: ID!): Director
	queryDirector(filter: DirectorFilter, order: DirectorOrder, first: Int, offset: Int): [Director]
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateMovie(input: UpdateMovieInput!): UpdateMoviePayload
	deleteMovie(filter: MovieFilter!): DeleteMoviePayload
	addOscarMovie(input: [AddOscarMovieInput!]!): AddOscarMoviePayload
	updateOscarMovie(input: UpdateOscarMovieInput!): UpdateOscarMoviePayload
	deleteOscarMovie(filter: OscarMovieFilter!): DeleteOscarMoviePayload
	addDirector(input: [AddDirectorInput!]!): AddDirectorPayload
	updateDirector(input: UpdateDirectorInput!): UpdateDirectorPayload
	deleteDirector(filter: DirectorFilter!): DeleteDirectorPayload
}
