#######################
# Input Schema
#######################

type Post {
	postID: ID
	content: String!
	author(filter: AuthorFilter): Author!
	genre(filter: GenreFilter): Genre
}

type Author {
	id: ID
	name: String! @id @search(by: [regexp])
	pen_name: String
	posts(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
}

type Genre {
	name: String! @id
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can currently represent values in range [-(2^53)+1, (2^53)-1] without any error.
Values out of this range but representable by a signed 64-bit integer, may get coercion error.
"""
scalar Int64

scalar DateTime

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @cascade on FIELD

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input Int64Filter {
	eq: Int64
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type AddGenrePayload {
	genre(filter: GenreFilter, order: GenreOrder, first: Int, offset: Int): [Genre]
	numUids: Int
}

type AddPostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

type DeleteAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	msg: String
	numUids: Int
}

type DeleteGenrePayload {
	genre(filter: GenreFilter, order: GenreOrder, first: Int, offset: Int): [Genre]
	msg: String
	numUids: Int
}

type DeletePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	msg: String
	numUids: Int
}

type UpdateAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type UpdatePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum AuthorHasFilter {
	name
	pen_name
	posts
}

enum AuthorOrderable {
	name
	pen_name
}

enum GenreHasFilter {
	name
}

enum GenreOrderable {
	name
}

enum PostHasFilter {
	content
	author
	genre
}

enum PostOrderable {
	content
}

#######################
# Generated Inputs
#######################

input AddAuthorInput {
	name: String!
	pen_name: String
	posts: [PostRef]
}

input AddGenreInput {
	name: String!
}

input AddPostInput {
	content: String!
	author: AuthorRef!
	genre: GenreRef
}

input AuthorFilter {
	id: [ID!]
	name: StringHashFilter_StringRegExpFilter
	has: AuthorHasFilter
	and: AuthorFilter
	or: AuthorFilter
	not: AuthorFilter
}

input AuthorOrder {
	asc: AuthorOrderable
	desc: AuthorOrderable
	then: AuthorOrder
}

input AuthorPatch {
	pen_name: String
	posts: [PostRef]
}

input AuthorRef {
	id: ID
	name: String
	pen_name: String
	posts: [PostRef]
}

input GenreFilter {
	name: StringHashFilter
	has: GenreHasFilter
	and: GenreFilter
	or: GenreFilter
	not: GenreFilter
}

input GenreOrder {
	asc: GenreOrderable
	desc: GenreOrderable
	then: GenreOrder
}

input GenreRef {
	name: String!
}

input PostFilter {
	postID: [ID!]
	has: PostHasFilter
	and: PostFilter
	or: PostFilter
	not: PostFilter
}

input PostOrder {
	asc: PostOrderable
	desc: PostOrderable
	then: PostOrder
}

input PostPatch {
	content: String
	author: AuthorRef
	genre: GenreRef
}

input PostRef {
	postID: ID
	content: String
	author: AuthorRef
	genre: GenreRef
}

input StringHashFilter_StringRegExpFilter {
	eq: String
	regexp: String
}

input UpdateAuthorInput {
	filter: AuthorFilter!
	set: AuthorPatch
	remove: AuthorPatch
}

input UpdatePostInput {
	filter: PostFilter!
	set: PostPatch
	remove: PostPatch
}

#######################
# Generated Query
#######################

type Query {
	getPost(postID: ID!): Post
	queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	getAuthor(id: ID, name: String): Author
	queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	getGenre(name: String!): Genre
	queryGenre(filter: GenreFilter, order: GenreOrder, first: Int, offset: Int): [Genre]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addPost(input: [AddPostInput!]!): AddPostPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(filter: PostFilter!): DeletePostPayload
	addAuthor(input: [AddAuthorInput!]!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(filter: AuthorFilter!): DeleteAuthorPayload
	addGenre(input: [AddGenreInput!]!): AddGenrePayload
	deleteGenre(filter: GenreFilter!): DeleteGenrePayload
}

