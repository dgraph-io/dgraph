#######################
# Input Schema
#######################

type Movie {
	id: ID!
	name: String!
	director(filter: MovieDirectorFilter, order: MovieDirectorOrder, first: Int, offset: Int): [MovieDirector] @dgraph(pred: "~directed.movies")
	directorAggregate(filter: MovieDirectorFilter): MovieDirectorAggregateResult
}

type MovieDirector {
	id: ID!
	name: String!
	directed(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie] @dgraph(pred: "directed.movies")
	directedAggregate(filter: MovieFilter): MovieAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddMovieDirectorPayload {
	movieDirector(filter: MovieDirectorFilter, order: MovieDirectorOrder, first: Int, offset: Int): [MovieDirector]
	numUids: Int
}

type AddMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	numUids: Int
}

type DeleteMovieDirectorPayload {
	movieDirector(filter: MovieDirectorFilter, order: MovieDirectorOrder, first: Int, offset: Int): [MovieDirector]
	msg: String
	numUids: Int
}

type DeleteMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	msg: String
	numUids: Int
}

type MovieAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type MovieDirectorAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type UpdateMovieDirectorPayload {
	movieDirector(filter: MovieDirectorFilter, order: MovieDirectorOrder, first: Int, offset: Int): [MovieDirector]
	numUids: Int
}

type UpdateMoviePayload {
	movie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum MovieDirectorHasFilter {
	name
	directed
}

enum MovieDirectorOrderable {
	name
}

enum MovieHasFilter {
	name
	director
}

enum MovieOrderable {
	name
}

#######################
# Generated Inputs
#######################

input AddMovieDirectorInput {
	name: String!
	directed: [MovieRef]
}

input AddMovieInput {
	name: String!
}

input MovieDirectorFilter {
	id: [ID!]
	has: [MovieDirectorHasFilter]
	and: [MovieDirectorFilter]
	or: [MovieDirectorFilter]
	not: MovieDirectorFilter
}

input MovieDirectorOrder {
	asc: MovieDirectorOrderable
	desc: MovieDirectorOrderable
	then: MovieDirectorOrder
}

input MovieDirectorPatch {
	name: String
	directed: [MovieRef]
}

input MovieDirectorRef {
	id: ID
	name: String
	directed: [MovieRef]
}

input MovieFilter {
	id: [ID!]
	has: [MovieHasFilter]
	and: [MovieFilter]
	or: [MovieFilter]
	not: MovieFilter
}

input MovieOrder {
	asc: MovieOrderable
	desc: MovieOrderable
	then: MovieOrder
}

input MoviePatch {
	name: String
}

input MovieRef {
	id: ID
	name: String
}

input UpdateMovieDirectorInput {
	filter: MovieDirectorFilter!
	set: MovieDirectorPatch
	remove: MovieDirectorPatch
}

input UpdateMovieInput {
	filter: MovieFilter!
	set: MoviePatch
	remove: MoviePatch
}

#######################
# Generated Query
#######################

type Query {
	getMovie(id: ID!): Movie
	queryMovie(filter: MovieFilter, order: MovieOrder, first: Int, offset: Int): [Movie]
	aggregateMovie(filter: MovieFilter): MovieAggregateResult
	getMovieDirector(id: ID!): MovieDirector
	queryMovieDirector(filter: MovieDirectorFilter, order: MovieDirectorOrder, first: Int, offset: Int): [MovieDirector]
	aggregateMovieDirector(filter: MovieDirectorFilter): MovieDirectorAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addMovie(input: [AddMovieInput!]!): AddMoviePayload
	updateMovie(input: UpdateMovieInput!): UpdateMoviePayload
	deleteMovie(filter: MovieFilter!): DeleteMoviePayload
	addMovieDirector(input: [AddMovieDirectorInput!]!): AddMovieDirectorPayload
	updateMovieDirector(input: UpdateMovieDirectorInput!): UpdateMovieDirectorPayload
	deleteMovieDirector(filter: MovieDirectorFilter!): DeleteMovieDirectorPayload
}

