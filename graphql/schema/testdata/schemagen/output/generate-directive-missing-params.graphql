#######################
# Input Schema
#######################

type Person @generate(query: {query:false}, mutation: {update:false}, subscription: false) {
	id: ID!
	name: String!
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter!
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input Int64Filter {
	eq: Int64
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddPersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

type DeletePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	msg: String
	numUids: Int
}

type UpdatePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum PersonHasFilter {
	name
}

enum PersonOrderable {
	name
}

#######################
# Generated Inputs
#######################

input AddPersonInput {
	name: String!
}

input PersonFilter {
	id: [ID!]
	has: PersonHasFilter
	and: PersonFilter
	or: PersonFilter
	not: PersonFilter
}

input PersonOrder {
	asc: PersonOrderable
	desc: PersonOrderable
	then: PersonOrder
}

input PersonPatch {
	name: String
}

input PersonRef {
	id: ID
	name: String
}

input UpdatePersonInput {
	filter: PersonFilter!
	set: PersonPatch
	remove: PersonPatch
}

#######################
# Generated Query
#######################

type Query {
	getPerson(id: ID!): Person
}

#######################
# Generated Mutations
#######################

type Mutation {
	addPerson(input: [AddPersonInput!]!): AddPersonPayload
	deletePerson(filter: PersonFilter!): DeletePersonPayload
}

