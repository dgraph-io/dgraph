#######################
# Input Schema
#######################

type Author {
	id: ID!
	name: String! @search(by: [hash])
	posts(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post] @hasInverse(field: author)
}

interface Post {
	id: ID!
	text: String @search(by: [fulltext])
	datePublished: DateTime @search
	author(filter: AuthorFilter): Author! @hasInverse(field: posts)
}

type Question implements Post {
	id: ID!
	text: String @search(by: [fulltext])
	datePublished: DateTime @search
	author(filter: AuthorFilter): Author! @hasInverse(field: posts)
	answered: Boolean
}

type Answer implements Post {
	id: ID!
	text: String @search(by: [fulltext])
	datePublished: DateTime @search
	author(filter: AuthorFilter): Author! @hasInverse(field: posts)
	markedUseful: Boolean
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddAnswerPayload {
	answer(filter: AnswerFilter, order: AnswerOrder, first: Int, offset: Int): [Answer]
	numUids: Int
}

type AddAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type AddQuestionPayload {
	question(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	numUids: Int
}

type DeleteAnswerPayload {
	msg: String
	numUids: Int
}

type DeleteAuthorPayload {
	msg: String
	numUids: Int
}

type DeletePostPayload {
	msg: String
	numUids: Int
}

type DeleteQuestionPayload {
	msg: String
	numUids: Int
}

type UpdateAnswerPayload {
	answer(filter: AnswerFilter, order: AnswerOrder, first: Int, offset: Int): [Answer]
	numUids: Int
}

type UpdateAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type UpdatePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	numUids: Int
}

type UpdateQuestionPayload {
	question(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum AnswerOrderable {
	text
	datePublished
}

enum AuthorOrderable {
	name
}

enum PostOrderable {
	text
	datePublished
}

enum QuestionOrderable {
	text
	datePublished
}

#######################
# Generated Inputs
#######################

input AddAnswerInput {
	text: String
	datePublished: DateTime
	author: AuthorRef!
	markedUseful: Boolean
}

input AddAuthorInput {
	name: String!
	posts: [PostRef]
}

input AddQuestionInput {
	text: String
	datePublished: DateTime
	author: AuthorRef!
	answered: Boolean
}

input AnswerFilter {
	id: [ID!]
	text: StringFullTextFilter
	datePublished: DateTimeFilter
	and: AnswerFilter
	or: AnswerFilter
	not: AnswerFilter
}

input AnswerOrder {
	asc: AnswerOrderable
	desc: AnswerOrderable
	then: AnswerOrder
}

input AnswerPatch {
	text: String
	datePublished: DateTime
	author: AuthorRef
	markedUseful: Boolean
}

input AnswerRef {
	id: ID
	text: String
	datePublished: DateTime
	author: AuthorRef
	markedUseful: Boolean
}

input AuthorFilter {
	id: [ID!]
	name: StringHashFilter
	and: AuthorFilter
	or: AuthorFilter
	not: AuthorFilter
}

input AuthorOrder {
	asc: AuthorOrderable
	desc: AuthorOrderable
	then: AuthorOrder
}

input AuthorPatch {
	name: String
	posts: [PostRef]
}

input AuthorRef {
	id: ID
	name: String
	posts: [PostRef]
}

input PostFilter {
	id: [ID!]
	text: StringFullTextFilter
	datePublished: DateTimeFilter
	and: PostFilter
	or: PostFilter
	not: PostFilter
}

input PostOrder {
	asc: PostOrderable
	desc: PostOrderable
	then: PostOrder
}

input PostPatch {
	text: String
	datePublished: DateTime
	author: AuthorRef
}

input PostRef {
	id: ID!
}

input QuestionFilter {
	id: [ID!]
	text: StringFullTextFilter
	datePublished: DateTimeFilter
	and: QuestionFilter
	or: QuestionFilter
	not: QuestionFilter
}

input QuestionOrder {
	asc: QuestionOrderable
	desc: QuestionOrderable
	then: QuestionOrder
}

input QuestionPatch {
	text: String
	datePublished: DateTime
	author: AuthorRef
	answered: Boolean
}

input QuestionRef {
	id: ID
	text: String
	datePublished: DateTime
	author: AuthorRef
	answered: Boolean
}

input UpdateAnswerInput {
	filter: AnswerFilter!
	set: AnswerPatch
	remove: AnswerPatch
}

input UpdateAuthorInput {
	filter: AuthorFilter!
	set: AuthorPatch
	remove: AuthorPatch
}

input UpdatePostInput {
	filter: PostFilter!
	set: PostPatch
	remove: PostPatch
}

input UpdateQuestionInput {
	filter: QuestionFilter!
	set: QuestionPatch
	remove: QuestionPatch
}

#######################
# Generated Query
#######################

type Query {
	getAuthor(id: ID!): Author
	queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	getPost(id: ID!): Post
	queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	getQuestion(id: ID!): Question
	queryQuestion(filter: QuestionFilter, order: QuestionOrder, first: Int, offset: Int): [Question]
	getAnswer(id: ID!): Answer
	queryAnswer(filter: AnswerFilter, order: AnswerOrder, first: Int, offset: Int): [Answer]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addAuthor(input: [AddAuthorInput!]!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(filter: AuthorFilter!): DeleteAuthorPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(filter: PostFilter!): DeletePostPayload
	addQuestion(input: [AddQuestionInput!]!): AddQuestionPayload
	updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload
	deleteQuestion(filter: QuestionFilter!): DeleteQuestionPayload
	addAnswer(input: [AddAnswerInput!]!): AddAnswerPayload
	updateAnswer(input: UpdateAnswerInput!): UpdateAnswerPayload
	deleteAnswer(filter: AnswerFilter!): DeleteAnswerPayload
}
