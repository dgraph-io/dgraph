#######################
# Input Schema
#######################

interface I {
	id: ID!
}

type T implements I {
	id: ID!
	text: String
}

type B {
	name: String
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can currently represent values in range [-(2^53)+1, (2^53)-1] without any error.
Values out of this range but representable by a signed 64-bit integer, may get coercion error.
"""
scalar Int64

scalar DateTime

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @cascade on FIELD

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input Int64Filter {
	eq: Int64
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddBPayload {
	b(order: BOrder, first: Int, offset: Int): [B]
	numUids: Int
}

type AddTPayload {
	t(filter: TFilter, order: TOrder, first: Int, offset: Int): [T]
	numUids: Int
}

type DeleteIPayload {
	i(filter: IFilter, first: Int, offset: Int): [I]
	msg: String
	numUids: Int
}

type DeleteTPayload {
	t(filter: TFilter, order: TOrder, first: Int, offset: Int): [T]
	msg: String
	numUids: Int
}

type UpdateTPayload {
	t(filter: TFilter, order: TOrder, first: Int, offset: Int): [T]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum BHasFilter {
	name
}

enum BOrderable {
	name
}

enum THasFilter {
	text
}

enum TOrderable {
	text
}

#######################
# Generated Inputs
#######################

input AddBInput {
	name: String
}

input AddTInput {
	text: String
}

input BFilter {
	has: BHasFilter
	and: BFilter
	or: BFilter
	not: BFilter
}

input BOrder {
	asc: BOrderable
	desc: BOrderable
	then: BOrder
}

input BRef {
	name: String
}

input IFilter {
	id: [ID!]
	not: IFilter
}

input IRef {
	id: ID!
}

input TFilter {
	id: [ID!]
	has: THasFilter
	and: TFilter
	or: TFilter
	not: TFilter
}

input TOrder {
	asc: TOrderable
	desc: TOrderable
	then: TOrder
}

input TPatch {
	text: String
}

input TRef {
	id: ID
	text: String
}

input UpdateTInput {
	filter: TFilter!
	set: TPatch
	remove: TPatch
}

#######################
# Generated Query
#######################

type Query {
	getI(id: ID!): I
	queryI(filter: IFilter, first: Int, offset: Int): [I]
	getT(id: ID!): T
	queryT(filter: TFilter, order: TOrder, first: Int, offset: Int): [T]
	queryB(order: BOrder, first: Int, offset: Int): [B]
}

#######################
# Generated Mutations
#######################

type Mutation {
	deleteI(filter: IFilter!): DeleteIPayload
	addT(input: [AddTInput!]!): AddTPayload
	updateT(input: UpdateTInput!): UpdateTPayload
	deleteT(filter: TFilter!): DeleteTPayload
	addB(input: [AddBInput!]!): AddBPayload
}

