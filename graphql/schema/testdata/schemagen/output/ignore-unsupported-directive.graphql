#######################
# Input Schema
#######################

enum Role {
	Admin
	User
}

type Product {
	id: ID!
	price: Float! @search
	name: String! @search @dgraph(pred: "p")
	name2: String! @search @dgraph(pred: "p")
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddProductPayload {
	product(filter: ProductFilter, order: ProductOrder, first: Int, offset: Int): [Product]
	numUids: Int
}

type DeleteProductPayload {
	msg: String
	numUids: Int
}

type UpdateProductPayload {
	product(filter: ProductFilter, order: ProductOrder, first: Int, offset: Int): [Product]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum ProductOrderable {
	price
	name
	name2
}

#######################
# Generated Inputs
#######################

input AddProductInput {
	price: Float!
	name: String!
	name2: String!
}

input ProductFilter {
	id: [ID!]
	price: FloatFilter
	name: StringTermFilter
	name2: StringTermFilter
	and: ProductFilter
	or: ProductFilter
	not: ProductFilter
}

input ProductOrder {
	asc: ProductOrderable
	desc: ProductOrderable
	then: ProductOrder
}

input ProductPatch {
	price: Float
	name: String
	name2: String
}

input ProductRef {
	id: ID
	price: Float
	name: String
	name2: String
}

input UpdateProductInput {
	filter: ProductFilter!
	set: ProductPatch
	remove: ProductPatch
}

#######################
# Generated Query
#######################

type Query {
	getProduct(id: ID!): Product
	queryProduct(filter: ProductFilter, order: ProductOrder, first: Int, offset: Int): [Product]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addProduct(input: [AddProductInput!]!): AddProductPayload
	updateProduct(input: UpdateProductInput!): UpdateProductPayload
	deleteProduct(filter: ProductFilter!): DeleteProductPayload
}
