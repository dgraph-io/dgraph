#######################
# Input Schema
#######################

type Object {
	id: ID!
	name: String
	ownedBy(filter: PersonFilter): Person @dgraph(pred: "Object.owner")
}

type BusinessMan implements Person {
	id: ID!
	name: String
	owns(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object] @dgraph(pred: "~Object.owner")
	companyName: String
	ownsAggregate(filter: ObjectFilter): ObjectAggregateResult
}

interface Person {
	id: ID!
	name: String
	owns(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object] @dgraph(pred: "~Object.owner")
	ownsAggregate(filter: ObjectFilter): ObjectAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id(interface: Boolean) on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddBusinessManPayload {
	businessMan(filter: BusinessManFilter, order: BusinessManOrder, first: Int, offset: Int): [BusinessMan]
	numUids: Int
}

type AddObjectPayload {
	object(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object]
	numUids: Int
}

type BusinessManAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	companyNameMin: String
	companyNameMax: String
}

type DeleteBusinessManPayload {
	businessMan(filter: BusinessManFilter, order: BusinessManOrder, first: Int, offset: Int): [BusinessMan]
	msg: String
	numUids: Int
}

type DeleteObjectPayload {
	object(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object]
	msg: String
	numUids: Int
}

type DeletePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	msg: String
	numUids: Int
}

type ObjectAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type PersonAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type UpdateBusinessManPayload {
	businessMan(filter: BusinessManFilter, order: BusinessManOrder, first: Int, offset: Int): [BusinessMan]
	numUids: Int
}

type UpdateObjectPayload {
	object(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object]
	numUids: Int
}

type UpdatePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum BusinessManHasFilter {
	name
	owns
	companyName
}

enum BusinessManOrderable {
	name
	companyName
}

enum ObjectHasFilter {
	name
	ownedBy
}

enum ObjectOrderable {
	name
}

enum PersonHasFilter {
	name
	owns
}

enum PersonOrderable {
	name
}

#######################
# Generated Inputs
#######################

input AddBusinessManInput {
	name: String
	companyName: String
}

input AddObjectInput {
	name: String
	ownedBy: PersonRef
}

input BusinessManFilter {
	id: [ID!]
	has: [BusinessManHasFilter]
	and: [BusinessManFilter]
	or: [BusinessManFilter]
	not: BusinessManFilter
}

input BusinessManOrder {
	asc: BusinessManOrderable
	desc: BusinessManOrderable
	then: BusinessManOrder
}

input BusinessManPatch {
	name: String
	companyName: String
}

input BusinessManRef {
	id: ID
	name: String
	companyName: String
}

input ObjectFilter {
	id: [ID!]
	has: [ObjectHasFilter]
	and: [ObjectFilter]
	or: [ObjectFilter]
	not: ObjectFilter
}

input ObjectOrder {
	asc: ObjectOrderable
	desc: ObjectOrderable
	then: ObjectOrder
}

input ObjectPatch {
	name: String
	ownedBy: PersonRef
}

input ObjectRef {
	id: ID
	name: String
	ownedBy: PersonRef
}

input PersonFilter {
	id: [ID!]
	has: [PersonHasFilter]
	and: [PersonFilter]
	or: [PersonFilter]
	not: PersonFilter
}

input PersonOrder {
	asc: PersonOrderable
	desc: PersonOrderable
	then: PersonOrder
}

input PersonPatch {
	name: String
}

input PersonRef {
	id: ID!
}

input UpdateBusinessManInput {
	filter: BusinessManFilter!
	set: BusinessManPatch
	remove: BusinessManPatch
}

input UpdateObjectInput {
	filter: ObjectFilter!
	set: ObjectPatch
	remove: ObjectPatch
}

input UpdatePersonInput {
	filter: PersonFilter!
	set: PersonPatch
	remove: PersonPatch
}

#######################
# Generated Query
#######################

type Query {
	getObject(id: ID!): Object
	queryObject(filter: ObjectFilter, order: ObjectOrder, first: Int, offset: Int): [Object]
	aggregateObject(filter: ObjectFilter): ObjectAggregateResult
	getBusinessMan(id: ID!): BusinessMan
	queryBusinessMan(filter: BusinessManFilter, order: BusinessManOrder, first: Int, offset: Int): [BusinessMan]
	aggregateBusinessMan(filter: BusinessManFilter): BusinessManAggregateResult
	getPerson(id: ID!): Person
	queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	aggregatePerson(filter: PersonFilter): PersonAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addObject(input: [AddObjectInput!]!): AddObjectPayload
	updateObject(input: UpdateObjectInput!): UpdateObjectPayload
	deleteObject(filter: ObjectFilter!): DeleteObjectPayload
	addBusinessMan(input: [AddBusinessManInput!]!): AddBusinessManPayload
	updateBusinessMan(input: UpdateBusinessManInput!): UpdateBusinessManPayload
	deleteBusinessMan(filter: BusinessManFilter!): DeleteBusinessManPayload
	updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
	deletePerson(filter: PersonFilter!): DeletePersonPayload
}

