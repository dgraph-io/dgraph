#######################
# Input Schema
#######################

interface Character @secret(field: "password") {
	id: ID!
	name: String! @search(by: [exact])
	friends(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	appearsIn(first: Int, offset: Int): [Episode!]! @search
}

type Human implements Character @secret(field: "password") {
	id: ID!
	name: String! @search(by: [exact])
	friends(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	appearsIn(first: Int, offset: Int): [Episode!]! @search
	starships(filter: StarshipFilter, order: StarshipOrder, first: Int, offset: Int): [Starship]
	totalCredits: Int
}

type Droid implements Character @secret(field: "password") {
	id: ID!
	name: String! @search(by: [exact])
	friends(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	appearsIn(first: Int, offset: Int): [Episode!]! @search
	primaryFunction: String
}

enum Episode {
	NEWHOPE
	EMPIRE
	JEDI
}

type Starship {
	id: ID!
	name: String! @search(by: [term])
	length: Float
}

#######################
# Extended Definitions
#######################

scalar DateTime
scalar Password

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddDroidPayload {
	droid(filter: DroidFilter, order: DroidOrder, first: Int, offset: Int): [Droid]
}

type AddHumanPayload {
	human(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
}

type AddStarshipPayload {
	starship(filter: StarshipFilter, order: StarshipOrder, first: Int, offset: Int): [Starship]
}

type DeleteCharacterPayload {
	msg: String
}

type DeleteDroidPayload {
	msg: String
}

type DeleteHumanPayload {
	msg: String
}

type DeleteStarshipPayload {
	msg: String
}

type UpdateCharacterPayload {
	character(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
}

type UpdateDroidPayload {
	droid(filter: DroidFilter, order: DroidOrder, first: Int, offset: Int): [Droid]
}

type UpdateHumanPayload {
	human(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
}

type UpdateStarshipPayload {
	starship(filter: StarshipFilter, order: StarshipOrder, first: Int, offset: Int): [Starship]
}

#######################
# Generated Enums
#######################

enum CharacterOrderable {
	name
}

enum DroidOrderable {
	name
	primaryFunction
}

enum HumanOrderable {
	name
	totalCredits
}

enum StarshipOrderable {
	name
	length
}

#######################
# Generated Inputs
#######################

input AddDroidInput {
	name: String!
	friends: [CharacterRef]
	appearsIn: [Episode!]!
	primaryFunction: String
	password: Password!
}

input AddHumanInput {
	name: String!
	friends: [CharacterRef]
	appearsIn: [Episode!]!
	starships: [StarshipRef]
	totalCredits: Int
	password: Password!
}

input AddStarshipInput {
	name: String!
	length: Float
}

input CharacterFilter {
	id: [ID!]
	name: StringExactFilter
	appearsIn: Episode_hash
	and: CharacterFilter
	or: CharacterFilter
	not: CharacterFilter
}

input CharacterOrder {
	asc: CharacterOrderable
	desc: CharacterOrderable
	then: CharacterOrder
}

input CharacterPatch {
	name: String
	friends: [CharacterRef]
	appearsIn: [Episode!]
	password: Password
}

input CharacterRef {
	id: ID!
}

input DroidFilter {
	id: [ID!]
	name: StringExactFilter
	appearsIn: Episode_hash
	and: DroidFilter
	or: DroidFilter
	not: DroidFilter
}

input DroidOrder {
	asc: DroidOrderable
	desc: DroidOrderable
	then: DroidOrder
}

input DroidPatch {
	name: String
	friends: [CharacterRef]
	appearsIn: [Episode!]
	primaryFunction: String
	password: Password
}

input DroidRef {
	id: ID
	name: String
	friends: [CharacterRef]
	appearsIn: [Episode!]
	primaryFunction: String
	password: Password
}

input Episode_hash {
	eq: [Episode!]!
}

input HumanFilter {
	id: [ID!]
	name: StringExactFilter
	appearsIn: Episode_hash
	and: HumanFilter
	or: HumanFilter
	not: HumanFilter
}

input HumanOrder {
	asc: HumanOrderable
	desc: HumanOrderable
	then: HumanOrder
}

input HumanPatch {
	name: String
	friends: [CharacterRef]
	appearsIn: [Episode!]
	starships: [StarshipRef]
	totalCredits: Int
	password: Password
}

input HumanRef {
	id: ID
	name: String
	friends: [CharacterRef]
	appearsIn: [Episode!]
	starships: [StarshipRef]
	totalCredits: Int
	password: Password
}

input StarshipFilter {
	id: [ID!]
	name: StringTermFilter
	and: StarshipFilter
	or: StarshipFilter
	not: StarshipFilter
}

input StarshipOrder {
	asc: StarshipOrderable
	desc: StarshipOrderable
	then: StarshipOrder
}

input StarshipPatch {
	name: String
	length: Float
}

input StarshipRef {
	id: ID
	name: String
	length: Float
}

input UpdateCharacterInput {
	filter: CharacterFilter!
	set: CharacterPatch
	remove: CharacterPatch
}

input UpdateDroidInput {
	filter: DroidFilter!
	set: DroidPatch
	remove: DroidPatch
}

input UpdateHumanInput {
	filter: HumanFilter!
	set: HumanPatch
	remove: HumanPatch
}

input UpdateStarshipInput {
	filter: StarshipFilter!
	set: StarshipPatch
	remove: StarshipPatch
}

#######################
# Generated Query
#######################

type Query {
	getCharacter(id: ID!): Character
	checkCharacterPassword(id: ID!, password: Password!): Character
	queryCharacter(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	getHuman(id: ID!): Human
	checkHumanPassword(id: ID!, password: Password!): Human
	queryHuman(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
	getDroid(id: ID!): Droid
	checkDroidPassword(id: ID!, password: Password!): Droid
	queryDroid(filter: DroidFilter, order: DroidOrder, first: Int, offset: Int): [Droid]
	getStarship(id: ID!): Starship
	queryStarship(filter: StarshipFilter, order: StarshipOrder, first: Int, offset: Int): [Starship]
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateCharacter(input: UpdateCharacterInput!): UpdateCharacterPayload
	deleteCharacter(filter: CharacterFilter!): DeleteCharacterPayload
	addHuman(input: [AddHumanInput!]!): AddHumanPayload
	updateHuman(input: UpdateHumanInput!): UpdateHumanPayload
	deleteHuman(filter: HumanFilter!): DeleteHumanPayload
	addDroid(input: [AddDroidInput!]!): AddDroidPayload
	updateDroid(input: UpdateDroidInput!): UpdateDroidPayload
	deleteDroid(filter: DroidFilter!): DeleteDroidPayload
	addStarship(input: [AddStarshipInput!]!): AddStarshipPayload
	updateStarship(input: UpdateStarshipInput!): UpdateStarshipPayload
	deleteStarship(filter: StarshipFilter!): DeleteStarshipPayload
}
