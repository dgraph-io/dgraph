#######################
# Input Schema
#######################

type Author @secret(field: "pwd") {
	name: String! @id
	token: String
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

type DeleteAuthorPayload {
	msg: String
	numUids: Int
}

type UpdateAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum AuthorOrderable {
	name
	token
}

#######################
# Generated Inputs
#######################

input AddAuthorInput {
	name: String!
	token: String
	pwd: String!
}

input AuthorFilter {
	name: StringHashFilter
	and: AuthorFilter
	or: AuthorFilter
	not: AuthorFilter
}

input AuthorOrder {
	asc: AuthorOrderable
	desc: AuthorOrderable
	then: AuthorOrder
}

input AuthorPatch {
	token: String
	pwd: String
}

input AuthorRef {
	name: String
	token: String
	pwd: String
}

input UpdateAuthorInput {
	filter: AuthorFilter!
	set: AuthorPatch
	remove: AuthorPatch
}

#######################
# Generated Query
#######################

type Query {
	getAuthor(name: String!): Author
	checkAuthorPassword(name: String!, pwd: String!): Author
	queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addAuthor(input: [AddAuthorInput!]!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(filter: AuthorFilter!): DeleteAuthorPayload
}
