#######################
# Input Schema
#######################

type Message {
	id: ID!
	content: String!
	author: String
	datePosted: DateTime
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddMessagePayload {
	message(filter: MessageFilter, order: MessageOrder, first: Int, offset: Int): [Message]
	numUids: Int
}

type DeleteMessagePayload {
	msg: String
	numUids: Int
}

type UpdateMessagePayload {
	message(filter: MessageFilter, order: MessageOrder, first: Int, offset: Int): [Message]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum MessageOrderable {
	content
	author
	datePosted
}

#######################
# Generated Inputs
#######################

input AddMessageInput {
	content: String!
	author: String
	datePosted: DateTime
}

input MessageFilter {
	id: [ID!]
	not: MessageFilter
}

input MessageOrder {
	asc: MessageOrderable
	desc: MessageOrderable
	then: MessageOrder
}

input MessagePatch {
	content: String
	author: String
	datePosted: DateTime
}

input MessageRef {
	id: ID
	content: String
	author: String
	datePosted: DateTime
}

input UpdateMessageInput {
	filter: MessageFilter!
	set: MessagePatch
	remove: MessagePatch
}

#######################
# Generated Query
#######################

type Query {
	getMessage(id: ID!): Message
	queryMessage(filter: MessageFilter, order: MessageOrder, first: Int, offset: Int): [Message]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addMessage(input: [AddMessageInput!]!): AddMessagePayload
	updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
	deleteMessage(filter: MessageFilter!): DeleteMessagePayload
}
