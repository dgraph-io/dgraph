#######################
# Input Schema
#######################

interface Character {
	id: ID!
	name: String! @search(by: [exact])
	friends(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
}

interface Employee {
	employeeId: String!
	title: String!
}

type Human implements Character & Employee {
	employeeId: String!
	title: String!
	id: ID!
	name: String! @search(by: [exact])
	friends(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	totalCredits: Int
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can currently represent values in range [-(2^53)+1, (2^53)-1] without any error.
Values out of this range but representable by a signed 64-bit integer, may get coercion error.
"""
scalar Int64

scalar DateTime

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete:AuthRule) on OBJECT
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE
directive @cascade on FIELD

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input Int64Filter {
	eq: Int64
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddHumanPayload {
	human(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
	numUids: Int
}

type DeleteCharacterPayload {
	character(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	msg: String
	numUids: Int
}

type DeleteHumanPayload {
	human(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
	msg: String
	numUids: Int
}

type UpdateCharacterPayload {
	character(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	numUids: Int
}

type UpdateHumanPayload {
	human(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
	numUids: Int
}

#######################
# Generated Enums
#######################

enum CharacterHasFilter {
	name
	friends
}

enum CharacterOrderable {
	name
}

enum EmployeeHasFilter {
	employeeId
	title
}

enum EmployeeOrderable {
	employeeId
	title
}

enum HumanHasFilter {
	employeeId
	title
	name
	friends
	totalCredits
}

enum HumanOrderable {
	employeeId
	title
	name
	totalCredits
}

#######################
# Generated Inputs
#######################

input AddHumanInput {
	employeeId: String!
	title: String!
	name: String!
	friends: [CharacterRef]
	totalCredits: Int
}

input CharacterFilter {
	id: [ID!]
	name: StringExactFilter
	has: CharacterHasFilter
	and: CharacterFilter
	or: CharacterFilter
	not: CharacterFilter
}

input CharacterOrder {
	asc: CharacterOrderable
	desc: CharacterOrderable
	then: CharacterOrder
}

input CharacterPatch {
	name: String
	friends: [CharacterRef]
}

input CharacterRef {
	id: ID!
}

input EmployeeFilter {
	has: EmployeeHasFilter
	and: EmployeeFilter
	or: EmployeeFilter
	not: EmployeeFilter
}

input EmployeeOrder {
	asc: EmployeeOrderable
	desc: EmployeeOrderable
	then: EmployeeOrder
}

input HumanFilter {
	id: [ID!]
	name: StringExactFilter
	has: HumanHasFilter
	and: HumanFilter
	or: HumanFilter
	not: HumanFilter
}

input HumanOrder {
	asc: HumanOrderable
	desc: HumanOrderable
	then: HumanOrder
}

input HumanPatch {
	employeeId: String
	title: String
	name: String
	friends: [CharacterRef]
	totalCredits: Int
}

input HumanRef {
	id: ID
	employeeId: String
	title: String
	name: String
	friends: [CharacterRef]
	totalCredits: Int
}

input UpdateCharacterInput {
	filter: CharacterFilter!
	set: CharacterPatch
	remove: CharacterPatch
}

input UpdateHumanInput {
	filter: HumanFilter!
	set: HumanPatch
	remove: HumanPatch
}

#######################
# Generated Query
#######################

type Query {
	getCharacter(id: ID!): Character
	queryCharacter(filter: CharacterFilter, order: CharacterOrder, first: Int, offset: Int): [Character]
	queryEmployee(order: EmployeeOrder, first: Int, offset: Int): [Employee]
	getHuman(id: ID!): Human
	queryHuman(filter: HumanFilter, order: HumanOrder, first: Int, offset: Int): [Human]
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateCharacter(input: UpdateCharacterInput!): UpdateCharacterPayload
	deleteCharacter(filter: CharacterFilter!): DeleteCharacterPayload
	addHuman(input: [AddHumanInput!]!): AddHumanPayload
	updateHuman(input: UpdateHumanInput!): UpdateHumanPayload
	deleteHuman(filter: HumanFilter!): DeleteHumanPayload
}

