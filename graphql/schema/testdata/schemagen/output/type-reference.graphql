#######################
# Input Schema
#######################

type Post {
	id: ID!
	title: String!
	text: String
	author(filter: AuthorFilter): Author!
}

type Author {
	id: ID!
	name: String!
}

#######################
# Extended Definitions
#######################

scalar DateTime

enum DgraphIndex {
	int
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION

input IntFilter {
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
}

input FloatFilter {
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
}

input DateTimeFilter {
	eq: DateTime
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
}

input StringHashFilter {
	eq: String
}

#######################
# Generated Types
#######################

type AddAuthorPayload {
	author: [Author]
}

type AddPostPayload {
	post: [Post]
}

type DeleteAuthorPayload {
	msg: String
}

type DeletePostPayload {
	msg: String
}

type UpdateAuthorPayload {
	author(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
}

type UpdatePostPayload {
	post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
}

#######################
# Generated Enums
#######################

enum AuthorOrderable {
	name
}

enum PostOrderable {
	title
	text
}

#######################
# Generated Inputs
#######################

input AuthorFilter {
	id: [ID!]
	not: AuthorFilter
}

input AuthorInput {
	name: String!
}

input AuthorOrder {
	asc: AuthorOrderable
	desc: AuthorOrderable
	then: AuthorOrder
}

input AuthorRef {
	id: ID
	name: String
}

input PatchAuthor {
	name: String
}

input PatchPost {
	title: String
	text: String
	author: AuthorRef
}

input PostFilter {
	id: [ID!]
	not: PostFilter
}

input PostInput {
	title: String!
	text: String
	author: AuthorRef!
}

input PostOrder {
	asc: PostOrderable
	desc: PostOrderable
	then: PostOrder
}

input PostRef {
	id: ID
	title: String
	text: String
	author: AuthorRef
}

input UpdateAuthorInput {
	filter: AuthorFilter!
	set: PatchAuthor
	remove: PatchAuthor
}

input UpdatePostInput {
	filter: PostFilter!
	set: PatchPost
	remove: PatchPost
}

#######################
# Generated Query
#######################

type Query {
	getPost(id: ID!): Post
	queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
	getAuthor(id: ID!): Author
	queryAuthor(filter: AuthorFilter, order: AuthorOrder, first: Int, offset: Int): [Author]
}

#######################
# Generated Mutations
#######################

type Mutation {
	addPost(input: [PostInput!]!): AddPostPayload
	updatePost(input: UpdatePostInput!): UpdatePostPayload
	deletePost(filter: PostFilter!): DeletePostPayload
	addAuthor(input: [AuthorInput!]!): AddAuthorPayload
	updateAuthor(input: UpdateAuthorInput!): UpdateAuthorPayload
	deleteAuthor(filter: AuthorFilter!): DeleteAuthorPayload
}
