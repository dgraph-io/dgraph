type Country {
	cid: ID!
	id: String! @id
	name: String!
	cities: [City]
}

type City {
	cid: ID!
	id: String! @id
	name: String!
	country: Country! @hasInverse(field: cities)
	restaurants: [RestaurantAddress] @hasInverse(field: city)
}

interface Location {
	id: ID!
	lat: Float!
	long: Float!
	address: String!
	locality: String!
	city: City!
	zipcode: Int
}

type RestaurantAddress implements Location {
	restaurant: Restaurant! @hasInverse(field: addr)
}

type Restaurant {
	id: ID!
	xid: String! @id
	name: String! @custom(http: {
		url: "http://localhost:9000/getType?id=$id&field=name&type=Restaurant"
		method: GET
		mode: SINGLE
		skipIntrospection: true
	})
	pic: String
	addr: RestaurantAddress!
	rating: Float @custom(http: {
		url: "http://localhost:9000/getType?id=$id&field=rating&type=Restaurant"
		method: GET
		mode: SINGLE
		skipIntrospection: true
	})
	costFor2: Float
	currency: String
	cuisines: [Cuisine]
	dishes: [Dish] @hasInverse(field: servedBy)
	createdAt: DateTime!
}

type Cuisine {
	id: ID!
	name: String! @custom(http: {
		url: "http://localhost:9000/getType?id=$id&field=name&type=Cuisine"
		method: GET
		mode: SINGLE
		skipIntrospection: true
	})
	restaurants: [Restaurant] @hasInverse(field: cuisines)
	dishes: [Dish] @hasInverse(field: cuisine)
}

type Dish {
	id: ID!
	name: String! @custom(http: {
		url: "http://localhost:9000/getType?id=$id&field=name&type=Dish"
		method: GET
		mode: SINGLE
		skipIntrospection: true
	})
	pic: String
	price: Float! @custom(http: {
		url: "http://localhost:9000/getType?id=$id&field=price&type=Dish"
		method: GET
		mode: SINGLE
		skipIntrospection: true
	})
	description: String
	isVeg: Boolean!
	cuisine: Cuisine
	servedBy: Restaurant!
}
