// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: graphresponse.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Assigned struct {
	Uids map[string]uint64 `protobuf:"bytes,1,rep,name=Uids" json:"Uids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Assigned) Reset()                    { *m = Assigned{} }
func (m *Assigned) String() string            { return proto.CompactTextString(m) }
func (*Assigned) ProtoMessage()               {}
func (*Assigned) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{0} }

func (m *Assigned) GetUids() map[string]uint64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type Num struct {
	Val uint64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *Num) Reset()                    { *m = Num{} }
func (m *Num) String() string            { return proto.CompactTextString(m) }
func (*Num) ProtoMessage()               {}
func (*Num) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{1} }

func (m *Num) GetVal() uint64 {
	if m != nil {
		return m.Val
	}
	return 0
}

type AssignedIds struct {
	StartId uint64 `protobuf:"varint,1,opt,name=startId,proto3" json:"startId,omitempty"`
	EndId   uint64 `protobuf:"varint,2,opt,name=endId,proto3" json:"endId,omitempty"`
}

func (m *AssignedIds) Reset()                    { *m = AssignedIds{} }
func (m *AssignedIds) String() string            { return proto.CompactTextString(m) }
func (*AssignedIds) ProtoMessage()               {}
func (*AssignedIds) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{2} }

func (m *AssignedIds) GetStartId() uint64 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *AssignedIds) GetEndId() uint64 {
	if m != nil {
		return m.EndId
	}
	return 0
}

type NQuad struct {
	Subject     string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Predicate   string   `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	ObjectId    string   `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectValue *Value   `protobuf:"bytes,4,opt,name=object_value,json=objectValue" json:"object_value,omitempty"`
	Label       string   `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Lang        string   `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	Facets      []*Facet `protobuf:"bytes,7,rep,name=facets" json:"facets,omitempty"`
	SubjectVar  string   `protobuf:"bytes,8,opt,name=subject_var,json=subjectVar,proto3" json:"subject_var,omitempty"`
	ObjectVar   string   `protobuf:"bytes,9,opt,name=object_var,json=objectVar,proto3" json:"object_var,omitempty"`
}

func (m *NQuad) Reset()                    { *m = NQuad{} }
func (m *NQuad) String() string            { return proto.CompactTextString(m) }
func (*NQuad) ProtoMessage()               {}
func (*NQuad) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{3} }

func (m *NQuad) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *NQuad) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *NQuad) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *NQuad) GetObjectValue() *Value {
	if m != nil {
		return m.ObjectValue
	}
	return nil
}

func (m *NQuad) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *NQuad) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *NQuad) GetFacets() []*Facet {
	if m != nil {
		return m.Facets
	}
	return nil
}

func (m *NQuad) GetSubjectVar() string {
	if m != nil {
		return m.SubjectVar
	}
	return ""
}

func (m *NQuad) GetObjectVar() string {
	if m != nil {
		return m.ObjectVar
	}
	return ""
}

type Value struct {
	// Types that are valid to be assigned to Val:
	//	*Value_DefaultVal
	//	*Value_BytesVal
	//	*Value_IntVal
	//	*Value_BoolVal
	//	*Value_StrVal
	//	*Value_DoubleVal
	//	*Value_GeoVal
	//	*Value_DateVal
	//	*Value_DatetimeVal
	//	*Value_PasswordVal
	//	*Value_UidVal
	Val isValue_Val `protobuf_oneof:"val"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{4} }

type isValue_Val interface {
	isValue_Val()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_DefaultVal struct {
	DefaultVal string `protobuf:"bytes,1,opt,name=default_val,json=defaultVal,proto3,oneof"`
}
type Value_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,2,opt,name=bytes_val,json=bytesVal,proto3,oneof"`
}
type Value_IntVal struct {
	IntVal int64 `protobuf:"varint,3,opt,name=int_val,json=intVal,proto3,oneof"`
}
type Value_BoolVal struct {
	BoolVal bool `protobuf:"varint,4,opt,name=bool_val,json=boolVal,proto3,oneof"`
}
type Value_StrVal struct {
	StrVal string `protobuf:"bytes,5,opt,name=str_val,json=strVal,proto3,oneof"`
}
type Value_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,6,opt,name=double_val,json=doubleVal,proto3,oneof"`
}
type Value_GeoVal struct {
	GeoVal []byte `protobuf:"bytes,7,opt,name=geo_val,json=geoVal,proto3,oneof"`
}
type Value_DateVal struct {
	DateVal []byte `protobuf:"bytes,8,opt,name=date_val,json=dateVal,proto3,oneof"`
}
type Value_DatetimeVal struct {
	DatetimeVal []byte `protobuf:"bytes,9,opt,name=datetime_val,json=datetimeVal,proto3,oneof"`
}
type Value_PasswordVal struct {
	PasswordVal string `protobuf:"bytes,10,opt,name=password_val,json=passwordVal,proto3,oneof"`
}
type Value_UidVal struct {
	UidVal uint64 `protobuf:"varint,11,opt,name=uid_val,json=uidVal,proto3,oneof"`
}

func (*Value_DefaultVal) isValue_Val()  {}
func (*Value_BytesVal) isValue_Val()    {}
func (*Value_IntVal) isValue_Val()      {}
func (*Value_BoolVal) isValue_Val()     {}
func (*Value_StrVal) isValue_Val()      {}
func (*Value_DoubleVal) isValue_Val()   {}
func (*Value_GeoVal) isValue_Val()      {}
func (*Value_DateVal) isValue_Val()     {}
func (*Value_DatetimeVal) isValue_Val() {}
func (*Value_PasswordVal) isValue_Val() {}
func (*Value_UidVal) isValue_Val()      {}

func (m *Value) GetVal() isValue_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Value) GetDefaultVal() string {
	if x, ok := m.GetVal().(*Value_DefaultVal); ok {
		return x.DefaultVal
	}
	return ""
}

func (m *Value) GetBytesVal() []byte {
	if x, ok := m.GetVal().(*Value_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

func (m *Value) GetIntVal() int64 {
	if x, ok := m.GetVal().(*Value_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (m *Value) GetBoolVal() bool {
	if x, ok := m.GetVal().(*Value_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *Value) GetStrVal() string {
	if x, ok := m.GetVal().(*Value_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (m *Value) GetDoubleVal() float64 {
	if x, ok := m.GetVal().(*Value_DoubleVal); ok {
		return x.DoubleVal
	}
	return 0
}

func (m *Value) GetGeoVal() []byte {
	if x, ok := m.GetVal().(*Value_GeoVal); ok {
		return x.GeoVal
	}
	return nil
}

func (m *Value) GetDateVal() []byte {
	if x, ok := m.GetVal().(*Value_DateVal); ok {
		return x.DateVal
	}
	return nil
}

func (m *Value) GetDatetimeVal() []byte {
	if x, ok := m.GetVal().(*Value_DatetimeVal); ok {
		return x.DatetimeVal
	}
	return nil
}

func (m *Value) GetPasswordVal() string {
	if x, ok := m.GetVal().(*Value_PasswordVal); ok {
		return x.PasswordVal
	}
	return ""
}

func (m *Value) GetUidVal() uint64 {
	if x, ok := m.GetVal().(*Value_UidVal); ok {
		return x.UidVal
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_DefaultVal)(nil),
		(*Value_BytesVal)(nil),
		(*Value_IntVal)(nil),
		(*Value_BoolVal)(nil),
		(*Value_StrVal)(nil),
		(*Value_DoubleVal)(nil),
		(*Value_GeoVal)(nil),
		(*Value_DateVal)(nil),
		(*Value_DatetimeVal)(nil),
		(*Value_PasswordVal)(nil),
		(*Value_UidVal)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// val
	switch x := m.Val.(type) {
	case *Value_DefaultVal:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.DefaultVal)
	case *Value_BytesVal:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.BytesVal)
	case *Value_IntVal:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntVal))
	case *Value_BoolVal:
		t := uint64(0)
		if x.BoolVal {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Value_StrVal:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StrVal)
	case *Value_DoubleVal:
		_ = b.EncodeVarint(6<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.DoubleVal))
	case *Value_GeoVal:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.GeoVal)
	case *Value_DateVal:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.DateVal)
	case *Value_DatetimeVal:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.DatetimeVal)
	case *Value_PasswordVal:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PasswordVal)
	case *Value_UidVal:
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.UidVal))
	case nil:
	default:
		return fmt.Errorf("Value.Val has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // val.default_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Value_DefaultVal{x}
		return true, err
	case 2: // val.bytes_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Value_BytesVal{x}
		return true, err
	case 3: // val.int_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Value_IntVal{int64(x)}
		return true, err
	case 4: // val.bool_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Value_BoolVal{x != 0}
		return true, err
	case 5: // val.str_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Value_StrVal{x}
		return true, err
	case 6: // val.double_val
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Val = &Value_DoubleVal{math.Float64frombits(x)}
		return true, err
	case 7: // val.geo_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Value_GeoVal{x}
		return true, err
	case 8: // val.date_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Value_DateVal{x}
		return true, err
	case 9: // val.datetime_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Val = &Value_DatetimeVal{x}
		return true, err
	case 10: // val.password_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Value_PasswordVal{x}
		return true, err
	case 11: // val.uid_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Value_UidVal{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// val
	switch x := m.Val.(type) {
	case *Value_DefaultVal:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DefaultVal)))
		n += len(x.DefaultVal)
	case *Value_BytesVal:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesVal)))
		n += len(x.BytesVal)
	case *Value_IntVal:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntVal))
	case *Value_BoolVal:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Value_StrVal:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StrVal)))
		n += len(x.StrVal)
	case *Value_DoubleVal:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *Value_GeoVal:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GeoVal)))
		n += len(x.GeoVal)
	case *Value_DateVal:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DateVal)))
		n += len(x.DateVal)
	case *Value_DatetimeVal:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DatetimeVal)))
		n += len(x.DatetimeVal)
	case *Value_PasswordVal:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PasswordVal)))
		n += len(x.PasswordVal)
	case *Value_UidVal:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UidVal))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Mutation struct {
	SetJson    []byte          `protobuf:"bytes,1,opt,name=set_json,json=setJson,proto3" json:"set_json,omitempty"`
	DeleteJson []byte          `protobuf:"bytes,2,opt,name=delete_json,json=deleteJson,proto3" json:"delete_json,omitempty"`
	Schema     []*SchemaUpdate `protobuf:"bytes,3,rep,name=schema" json:"schema,omitempty"`
	StartTs    uint64          `protobuf:"varint,13,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	DropAll    bool            `protobuf:"varint,14,opt,name=DropAll,proto3" json:"DropAll,omitempty"`
	Set        []*NQuad        `protobuf:"bytes,15,rep,name=set" json:"set,omitempty"`
	Del        []*NQuad        `protobuf:"bytes,16,rep,name=del" json:"del,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{5} }

func (m *Mutation) GetSetJson() []byte {
	if m != nil {
		return m.SetJson
	}
	return nil
}

func (m *Mutation) GetDeleteJson() []byte {
	if m != nil {
		return m.DeleteJson
	}
	return nil
}

func (m *Mutation) GetSchema() []*SchemaUpdate {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *Mutation) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *Mutation) GetDropAll() bool {
	if m != nil {
		return m.DropAll
	}
	return false
}

func (m *Mutation) GetSet() []*NQuad {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Mutation) GetDel() []*NQuad {
	if m != nil {
		return m.Del
	}
	return nil
}

type Request struct {
	Query    string            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Schema   *SchemaRequest    `protobuf:"bytes,3,opt,name=schema" json:"schema,omitempty"`
	Vars     map[string]string `protobuf:"bytes,4,rep,name=vars" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTs  uint64            `protobuf:"varint,13,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Mutation *Mutation         `protobuf:"bytes,100,opt,name=mutation" json:"mutation,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{6} }

func (m *Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Request) GetSchema() *SchemaRequest {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *Request) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *Request) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *Request) GetMutation() *Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

type Latency struct {
	Parsing    string `protobuf:"bytes,1,opt,name=parsing,proto3" json:"parsing,omitempty"`
	Processing string `protobuf:"bytes,2,opt,name=processing,proto3" json:"processing,omitempty"`
	Pb         string `protobuf:"bytes,3,opt,name=pb,proto3" json:"pb,omitempty"`
}

func (m *Latency) Reset()                    { *m = Latency{} }
func (m *Latency) String() string            { return proto.CompactTextString(m) }
func (*Latency) ProtoMessage()               {}
func (*Latency) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{7} }

func (m *Latency) GetParsing() string {
	if m != nil {
		return m.Parsing
	}
	return ""
}

func (m *Latency) GetProcessing() string {
	if m != nil {
		return m.Processing
	}
	return ""
}

func (m *Latency) GetPb() string {
	if m != nil {
		return m.Pb
	}
	return ""
}

type Property struct {
	Prop  string `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (m *Property) String() string            { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{8} }

func (m *Property) GetProp() string {
	if m != nil {
		return m.Prop
	}
	return ""
}

func (m *Property) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Node struct {
	Attribute  string      `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Properties []*Property `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty"`
	Children   []*Node     `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{9} }

func (m *Node) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *Node) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type Response struct {
	N      []*Node       `protobuf:"bytes,1,rep,name=n" json:"n,omitempty"`
	L      *Latency      `protobuf:"bytes,2,opt,name=l" json:"l,omitempty"`
	Schema []*SchemaNode `protobuf:"bytes,4,rep,name=schema" json:"schema,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{10} }

func (m *Response) GetN() []*Node {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *Response) GetL() *Latency {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *Response) GetSchema() []*SchemaNode {
	if m != nil {
		return m.Schema
	}
	return nil
}

type Check struct {
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{11} }

type Version struct {
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{12} }

func (m *Version) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func init() {
	proto.RegisterType((*Assigned)(nil), "protos.Assigned")
	proto.RegisterType((*Num)(nil), "protos.Num")
	proto.RegisterType((*AssignedIds)(nil), "protos.AssignedIds")
	proto.RegisterType((*NQuad)(nil), "protos.NQuad")
	proto.RegisterType((*Value)(nil), "protos.Value")
	proto.RegisterType((*Mutation)(nil), "protos.Mutation")
	proto.RegisterType((*Request)(nil), "protos.Request")
	proto.RegisterType((*Latency)(nil), "protos.Latency")
	proto.RegisterType((*Property)(nil), "protos.Property")
	proto.RegisterType((*Node)(nil), "protos.Node")
	proto.RegisterType((*Response)(nil), "protos.Response")
	proto.RegisterType((*Check)(nil), "protos.Check")
	proto.RegisterType((*Version)(nil), "protos.Version")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dgraph service

type DgraphClient interface {
	// TODO(mrjn): Rename it to Query.
	Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Mutate(ctx context.Context, in *Mutation, opts ...grpc.CallOption) (*Assigned, error)
	CheckVersion(ctx context.Context, in *Check, opts ...grpc.CallOption) (*Version, error)
	AssignUids(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error)
}

type dgraphClient struct {
	cc *grpc.ClientConn
}

func NewDgraphClient(cc *grpc.ClientConn) DgraphClient {
	return &dgraphClient{cc}
}

func (c *dgraphClient) Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.Dgraph/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) Mutate(ctx context.Context, in *Mutation, opts ...grpc.CallOption) (*Assigned, error) {
	out := new(Assigned)
	err := grpc.Invoke(ctx, "/protos.Dgraph/Mutate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) CheckVersion(ctx context.Context, in *Check, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/protos.Dgraph/CheckVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) AssignUids(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error) {
	out := new(AssignedIds)
	err := grpc.Invoke(ctx, "/protos.Dgraph/AssignUids", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dgraph service

type DgraphServer interface {
	// TODO(mrjn): Rename it to Query.
	Run(context.Context, *Request) (*Response, error)
	Mutate(context.Context, *Mutation) (*Assigned, error)
	CheckVersion(context.Context, *Check) (*Version, error)
	AssignUids(context.Context, *Num) (*AssignedIds, error)
}

func RegisterDgraphServer(s *grpc.Server, srv DgraphServer) {
	s.RegisterService(&_Dgraph_serviceDesc, srv)
}

func _Dgraph_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Dgraph/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Run(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mutation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Dgraph/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Mutate(ctx, req.(*Mutation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_CheckVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Check)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).CheckVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Dgraph/CheckVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).CheckVersion(ctx, req.(*Check))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_AssignUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).AssignUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Dgraph/AssignUids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).AssignUids(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dgraph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Dgraph",
	HandlerType: (*DgraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Dgraph_Run_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _Dgraph_Mutate_Handler,
		},
		{
			MethodName: "CheckVersion",
			Handler:    _Dgraph_CheckVersion_Handler,
		},
		{
			MethodName: "AssignUids",
			Handler:    _Dgraph_AssignUids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graphresponse.proto",
}

func (m *Assigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assigned) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		for k, _ := range m.Uids {
			dAtA[i] = 0xa
			i++
			v := m.Uids[k]
			mapSize := 1 + len(k) + sovGraphresponse(uint64(len(k))) + 1 + sovGraphresponse(uint64(v))
			i = encodeVarintGraphresponse(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *Num) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Num) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Val != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *AssignedIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignedIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.StartId))
	}
	if m.EndId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.EndId))
	}
	return i, nil
}

func (m *NQuad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NQuad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Predicate) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Predicate)))
		i += copy(dAtA[i:], m.Predicate)
	}
	if len(m.ObjectId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.ObjectId)))
		i += copy(dAtA[i:], m.ObjectId)
	}
	if m.ObjectValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.ObjectValue.Size()))
		n1, err := m.ObjectValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	if len(m.Facets) > 0 {
		for _, msg := range m.Facets {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SubjectVar) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.SubjectVar)))
		i += copy(dAtA[i:], m.SubjectVar)
	}
	if len(m.ObjectVar) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.ObjectVar)))
		i += copy(dAtA[i:], m.ObjectVar)
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Val != nil {
		nn2, err := m.Val.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Value_DefaultVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.DefaultVal)))
	i += copy(dAtA[i:], m.DefaultVal)
	return i, nil
}
func (m *Value_BytesVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BytesVal != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.BytesVal)))
		i += copy(dAtA[i:], m.BytesVal)
	}
	return i, nil
}
func (m *Value_IntVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintGraphresponse(dAtA, i, uint64(m.IntVal))
	return i, nil
}
func (m *Value_BoolVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.BoolVal {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Value_StrVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.StrVal)))
	i += copy(dAtA[i:], m.StrVal)
	return i, nil
}
func (m *Value_DoubleVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x31
	i++
	i = encodeFixed64Graphresponse(dAtA, i, uint64(math.Float64bits(float64(m.DoubleVal))))
	return i, nil
}
func (m *Value_GeoVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GeoVal != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.GeoVal)))
		i += copy(dAtA[i:], m.GeoVal)
	}
	return i, nil
}
func (m *Value_DateVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DateVal != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.DateVal)))
		i += copy(dAtA[i:], m.DateVal)
	}
	return i, nil
}
func (m *Value_DatetimeVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DatetimeVal != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.DatetimeVal)))
		i += copy(dAtA[i:], m.DatetimeVal)
	}
	return i, nil
}
func (m *Value_PasswordVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x52
	i++
	i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.PasswordVal)))
	i += copy(dAtA[i:], m.PasswordVal)
	return i, nil
}
func (m *Value_UidVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	i = encodeVarintGraphresponse(dAtA, i, uint64(m.UidVal))
	return i, nil
}
func (m *Mutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mutation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SetJson) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.SetJson)))
		i += copy(dAtA[i:], m.SetJson)
	}
	if len(m.DeleteJson) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.DeleteJson)))
		i += copy(dAtA[i:], m.DeleteJson)
	}
	if len(m.Schema) > 0 {
		for _, msg := range m.Schema {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.StartTs))
	}
	if m.DropAll {
		dAtA[i] = 0x70
		i++
		if m.DropAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Set) > 0 {
		for _, msg := range m.Set {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Del) > 0 {
		for _, msg := range m.Del {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.Schema != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.Schema.Size()))
		n3, err := m.Schema.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Vars) > 0 {
		for k, _ := range m.Vars {
			dAtA[i] = 0x22
			i++
			v := m.Vars[k]
			mapSize := 1 + len(k) + sovGraphresponse(uint64(len(k))) + 1 + len(v) + sovGraphresponse(uint64(len(v)))
			i = encodeVarintGraphresponse(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.StartTs))
	}
	if m.Mutation != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.Mutation.Size()))
		n4, err := m.Mutation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Latency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Latency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parsing) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Parsing)))
		i += copy(dAtA[i:], m.Parsing)
	}
	if len(m.Processing) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Processing)))
		i += copy(dAtA[i:], m.Processing)
	}
	if len(m.Pb) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Pb)))
		i += copy(dAtA[i:], m.Pb)
	}
	return i, nil
}

func (m *Property) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prop) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Prop)))
		i += copy(dAtA[i:], m.Prop)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.Value.Size()))
		n5, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attribute) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Attribute)))
		i += copy(dAtA[i:], m.Attribute)
	}
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.N) > 0 {
		for _, msg := range m.N {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.L != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(m.L.Size()))
		n6, err := m.L.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Schema) > 0 {
		for _, msg := range m.Schema {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGraphresponse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Check) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphresponse(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	return i, nil
}

func encodeFixed64Graphresponse(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Graphresponse(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGraphresponse(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Assigned) Size() (n int) {
	var l int
	_ = l
	if len(m.Uids) > 0 {
		for k, v := range m.Uids {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphresponse(uint64(len(k))) + 1 + sovGraphresponse(uint64(v))
			n += mapEntrySize + 1 + sovGraphresponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Num) Size() (n int) {
	var l int
	_ = l
	if m.Val != 0 {
		n += 1 + sovGraphresponse(uint64(m.Val))
	}
	return n
}

func (m *AssignedIds) Size() (n int) {
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovGraphresponse(uint64(m.StartId))
	}
	if m.EndId != 0 {
		n += 1 + sovGraphresponse(uint64(m.EndId))
	}
	return n
}

func (m *NQuad) Size() (n int) {
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if m.ObjectValue != nil {
		l = m.ObjectValue.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Facets) > 0 {
		for _, e := range m.Facets {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	l = len(m.SubjectVar)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.ObjectVar)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Val != nil {
		n += m.Val.Size()
	}
	return n
}

func (m *Value_DefaultVal) Size() (n int) {
	var l int
	_ = l
	l = len(m.DefaultVal)
	n += 1 + l + sovGraphresponse(uint64(l))
	return n
}
func (m *Value_BytesVal) Size() (n int) {
	var l int
	_ = l
	if m.BytesVal != nil {
		l = len(m.BytesVal)
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}
func (m *Value_IntVal) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGraphresponse(uint64(m.IntVal))
	return n
}
func (m *Value_BoolVal) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *Value_StrVal) Size() (n int) {
	var l int
	_ = l
	l = len(m.StrVal)
	n += 1 + l + sovGraphresponse(uint64(l))
	return n
}
func (m *Value_DoubleVal) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Value_GeoVal) Size() (n int) {
	var l int
	_ = l
	if m.GeoVal != nil {
		l = len(m.GeoVal)
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}
func (m *Value_DateVal) Size() (n int) {
	var l int
	_ = l
	if m.DateVal != nil {
		l = len(m.DateVal)
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}
func (m *Value_DatetimeVal) Size() (n int) {
	var l int
	_ = l
	if m.DatetimeVal != nil {
		l = len(m.DatetimeVal)
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}
func (m *Value_PasswordVal) Size() (n int) {
	var l int
	_ = l
	l = len(m.PasswordVal)
	n += 1 + l + sovGraphresponse(uint64(l))
	return n
}
func (m *Value_UidVal) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGraphresponse(uint64(m.UidVal))
	return n
}
func (m *Mutation) Size() (n int) {
	var l int
	_ = l
	l = len(m.SetJson)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.DeleteJson)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Schema) > 0 {
		for _, e := range m.Schema {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if m.StartTs != 0 {
		n += 1 + sovGraphresponse(uint64(m.StartTs))
	}
	if m.DropAll {
		n += 2
	}
	if len(m.Set) > 0 {
		for _, e := range m.Set {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if len(m.Del) > 0 {
		for _, e := range m.Del {
			l = e.Size()
			n += 2 + l + sovGraphresponse(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Vars) > 0 {
		for k, v := range m.Vars {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphresponse(uint64(len(k))) + 1 + len(v) + sovGraphresponse(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphresponse(uint64(mapEntrySize))
		}
	}
	if m.StartTs != 0 {
		n += 1 + sovGraphresponse(uint64(m.StartTs))
	}
	if m.Mutation != nil {
		l = m.Mutation.Size()
		n += 2 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Latency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Parsing)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Processing)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Pb)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Property) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prop)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.Attribute)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if len(m.N) > 0 {
		for _, e := range m.N {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if m.L != nil {
		l = m.L.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Schema) > 0 {
		for _, e := range m.Schema {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	return n
}

func (m *Check) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func sovGraphresponse(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraphresponse(x uint64) (n int) {
	return sovGraphresponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Assigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Uids == nil {
				m.Uids = make(map[string]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Uids[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Num) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Num: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Num: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignedIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignedIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignedIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndId", wireType)
			}
			m.EndId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NQuad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NQuad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NQuad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectValue == nil {
				m.ObjectValue = &Value{}
			}
			if err := m.ObjectValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Facets = append(m.Facets, &Facet{})
			if err := m.Facets[len(m.Facets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectVar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectVar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectVar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectVar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = &Value_DefaultVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Val = &Value_BytesVal{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Val = &Value_IntVal{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Val = &Value_BoolVal{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = &Value_StrVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Val = &Value_DoubleVal{float64(math.Float64frombits(v))}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Val = &Value_GeoVal{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Val = &Value_DateVal{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatetimeVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Val = &Value_DatetimeVal{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = &Value_PasswordVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UidVal", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Val = &Value_UidVal{v}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetJson = append(m.SetJson[:0], dAtA[iNdEx:postIndex]...)
			if m.SetJson == nil {
				m.SetJson = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteJson = append(m.DeleteJson[:0], dAtA[iNdEx:postIndex]...)
			if m.DeleteJson == nil {
				m.DeleteJson = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema, &SchemaUpdate{})
			if err := m.Schema[len(m.Schema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropAll = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Set = append(m.Set, &NQuad{})
			if err := m.Set[len(m.Set)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Del", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Del = append(m.Del, &NQuad{})
			if err := m.Del[len(m.Del)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &SchemaRequest{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Vars == nil {
				m.Vars = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthGraphresponse
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Vars[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Vars[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mutation == nil {
				m.Mutation = &Mutation{}
			}
			if err := m.Mutation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Latency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Latency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Latency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parsing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parsing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Node{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N, &Node{})
			if err := m.N[len(m.N)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L == nil {
				m.L = &Latency{}
			}
			if err := m.L.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema, &SchemaNode{})
			if err := m.Schema[len(m.Schema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphresponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraphresponse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraphresponse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraphresponse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphresponse   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("graphresponse.proto", fileDescriptorGraphresponse) }

var fileDescriptorGraphresponse = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xcd, 0x6e, 0x1c, 0x45,
	0x10, 0xde, 0xd9, 0xbf, 0x99, 0xad, 0xdd, 0xc4, 0x56, 0x27, 0x88, 0xf1, 0x1a, 0xff, 0x64, 0x22,
	0x24, 0x2b, 0x4a, 0x56, 0x91, 0x39, 0x80, 0x90, 0x38, 0xe4, 0x07, 0x64, 0x23, 0xb0, 0xa0, 0x43,
	0x7c, 0xb5, 0x7a, 0xb7, 0x3b, 0xeb, 0x49, 0xc6, 0x33, 0xe3, 0xee, 0x1e, 0x23, 0xdf, 0x78, 0x0c,
	0x6e, 0xbc, 0x4e, 0x8e, 0x3c, 0x02, 0x98, 0x23, 0x0f, 0x01, 0xaa, 0xea, 0xee, 0xf1, 0x3a, 0x41,
	0xe4, 0xb4, 0xd3, 0xdf, 0xf7, 0x55, 0x75, 0x55, 0x75, 0x75, 0xf5, 0xc2, 0x9d, 0xa5, 0x16, 0xf5,
	0xa9, 0x56, 0xa6, 0xae, 0x4a, 0xa3, 0x66, 0xb5, 0xae, 0x6c, 0xc5, 0x86, 0xf4, 0x63, 0xa6, 0x93,
	0x57, 0x62, 0xa1, 0xac, 0x71, 0xe8, 0x74, 0x62, 0x16, 0xa7, 0xea, 0x4c, 0xb8, 0x55, 0x66, 0x20,
	0x79, 0x62, 0x4c, 0xbe, 0x2c, 0x95, 0x64, 0x33, 0xe8, 0xbf, 0xcc, 0xa5, 0x49, 0xa3, 0xdd, 0xde,
	0xde, 0x78, 0x7f, 0xea, 0x14, 0x66, 0x16, 0xf8, 0x19, 0x92, 0x5f, 0x97, 0x56, 0x5f, 0x72, 0xd2,
	0x4d, 0x3f, 0x87, 0x51, 0x0b, 0xb1, 0x75, 0xe8, 0xbd, 0x51, 0x97, 0x69, 0xb4, 0x1b, 0xed, 0x8d,
	0x38, 0x7e, 0xb2, 0xbb, 0x30, 0xb8, 0x10, 0x45, 0xa3, 0xd2, 0xee, 0x6e, 0xb4, 0xd7, 0xe7, 0x6e,
	0xf1, 0x65, 0xf7, 0x8b, 0x28, 0xfb, 0x18, 0x7a, 0x47, 0xcd, 0x19, 0x9a, 0x5c, 0x88, 0x82, 0x4c,
	0xfa, 0x1c, 0x3f, 0xb3, 0xaf, 0x60, 0x1c, 0x76, 0x3b, 0x94, 0x86, 0xa5, 0x10, 0x1b, 0x2b, 0xb4,
	0x3d, 0x94, 0x5e, 0x14, 0x96, 0xe8, 0x5b, 0x95, 0xf2, 0x50, 0x06, 0xdf, 0xb4, 0xc8, 0x7e, 0xeb,
	0xc2, 0xe0, 0xe8, 0xc7, 0x46, 0x48, 0xb2, 0x6c, 0xe6, 0xaf, 0xd5, 0xc2, 0xfa, 0x88, 0xc2, 0x92,
	0x7d, 0x02, 0xa3, 0x5a, 0x2b, 0x99, 0x2f, 0x84, 0x75, 0x91, 0x8d, 0xf8, 0x35, 0xc0, 0x36, 0x61,
	0x54, 0x91, 0xee, 0x24, 0x97, 0x69, 0x8f, 0xd8, 0xc4, 0x01, 0x87, 0x92, 0x3d, 0x86, 0x89, 0x27,
	0x5d, 0x5e, 0xfd, 0xdd, 0x68, 0x6f, 0xbc, 0x7f, 0x2b, 0xd4, 0xe9, 0x18, 0x41, 0x3e, 0x76, 0x12,
	0x5a, 0x60, 0x98, 0x85, 0x98, 0xab, 0x22, 0x1d, 0x90, 0x2b, 0xb7, 0x60, 0x0c, 0xfa, 0x85, 0x28,
	0x97, 0xe9, 0x90, 0x40, 0xfa, 0x66, 0x9f, 0xc2, 0xd0, 0x9d, 0x52, 0x1a, 0x53, 0xf5, 0x5b, 0xaf,
	0xdf, 0x20, 0xca, 0x3d, 0xc9, 0x76, 0x60, 0xec, 0x13, 0x39, 0xb9, 0x10, 0x3a, 0x4d, 0xc8, 0x03,
	0x78, 0xe8, 0x58, 0x68, 0xb6, 0x05, 0x50, 0x5d, 0xf3, 0x23, 0x97, 0x5f, 0x08, 0x49, 0x67, 0x7f,
	0x76, 0x61, 0xe0, 0x42, 0xbb, 0x07, 0x63, 0xa9, 0x5e, 0x89, 0xa6, 0xa0, 0x6c, 0x5c, 0x95, 0x0e,
	0x3a, 0x1c, 0x3c, 0x78, 0x2c, 0x0a, 0xb6, 0x05, 0xa3, 0xf9, 0xa5, 0x55, 0x86, 0x04, 0x58, 0xaa,
	0xc9, 0x41, 0x87, 0x27, 0x04, 0x21, 0xbd, 0x01, 0x71, 0x5e, 0x3a, 0x6b, 0xac, 0x54, 0xef, 0xa0,
	0xc3, 0x87, 0x79, 0x49, 0x96, 0x9b, 0x90, 0xcc, 0xab, 0xaa, 0x20, 0x0e, 0xab, 0x94, 0x1c, 0x74,
	0x78, 0x8c, 0x88, 0xb7, 0x33, 0x56, 0x13, 0x37, 0xf0, 0xbb, 0x0e, 0x8d, 0xd5, 0x48, 0xed, 0x00,
	0xc8, 0xaa, 0x99, 0x17, 0x8a, 0x58, 0xac, 0x4f, 0x74, 0xd0, 0xe1, 0x23, 0x87, 0x79, 0xdb, 0xa5,
	0xaa, 0x88, 0x8d, 0x7d, 0x40, 0xc3, 0xa5, 0xaa, 0xfc, 0x9e, 0x52, 0x58, 0x67, 0x99, 0x78, 0x2e,
	0x46, 0x04, 0xc9, 0xfb, 0x30, 0xc1, 0x4f, 0x9b, 0x9f, 0x39, 0xc1, 0xc8, 0x0b, 0xc6, 0x01, 0xf5,
	0xa2, 0x5a, 0x18, 0xf3, 0x73, 0xa5, 0x25, 0x89, 0xc0, 0x47, 0x37, 0x0e, 0xa8, 0x8f, 0xa0, 0xc9,
	0x1d, 0x3f, 0xc6, 0xde, 0xc3, 0x08, 0x9a, 0x1c, 0xa9, 0xa7, 0x03, 0xea, 0xe7, 0xec, 0xef, 0x08,
	0x92, 0xef, 0x1b, 0x2b, 0x6c, 0x5e, 0x95, 0x6c, 0x03, 0x12, 0xa3, 0xec, 0xc9, 0x6b, 0x53, 0x95,
	0x54, 0xe3, 0x09, 0x8f, 0x8d, 0xb2, 0xdf, 0x9a, 0xaa, 0xc4, 0xb3, 0x94, 0xaa, 0x50, 0x56, 0x39,
	0x96, 0x0a, 0x8c, 0xf5, 0x47, 0x88, 0x04, 0x0f, 0x61, 0xe8, 0xee, 0x6a, 0xda, 0xa3, 0x9e, 0xb8,
	0x1b, 0x7a, 0xe2, 0x05, 0xa1, 0x2f, 0x6b, 0x0c, 0x9e, 0x7b, 0x0d, 0xed, 0x84, 0xb7, 0xe3, 0xc4,
	0x9a, 0xf4, 0xd6, 0xca, 0x6d, 0xf9, 0x89, 0xee, 0xd1, 0x73, 0x5d, 0xd5, 0x4f, 0x8a, 0x22, 0xbd,
	0x8d, 0xa7, 0xc1, 0xc3, 0x92, 0xed, 0x40, 0xcf, 0x28, 0x9b, 0xae, 0xdd, 0xec, 0x39, 0xba, 0x43,
	0x1c, 0x19, 0x14, 0x48, 0x55, 0xa4, 0xeb, 0xff, 0x29, 0x90, 0xaa, 0xc8, 0xfe, 0x89, 0x20, 0xe6,
	0xea, 0xbc, 0x51, 0xc6, 0x62, 0xbb, 0x9f, 0x37, 0x4a, 0x87, 0x29, 0xe0, 0x16, 0xec, 0xd1, 0x4a,
	0x1a, 0x78, 0x61, 0x3e, 0xba, 0x99, 0x86, 0x37, 0x6e, 0xf3, 0x78, 0x04, 0xfd, 0x0b, 0xa1, 0x4d,
	0xda, 0xa7, 0x2d, 0x37, 0x82, 0xd8, 0xcb, 0x66, 0xc7, 0x42, 0x87, 0x21, 0x84, 0xb2, 0xff, 0x4b,
	0xfb, 0x21, 0x24, 0x67, 0xfe, 0x1c, 0x52, 0x49, 0x5b, 0xaf, 0x07, 0x6f, 0xe1, 0x7c, 0x78, 0xab,
	0xc0, 0x69, 0xd6, 0xfa, 0xfe, 0xd0, 0x34, 0x1b, 0xad, 0x4e, 0xb3, 0x17, 0x10, 0x7f, 0x27, 0xac,
	0x2a, 0x17, 0x97, 0x58, 0xe8, 0x5a, 0x68, 0x93, 0x97, 0xcb, 0x30, 0x76, 0xfc, 0x92, 0x6d, 0x03,
	0xd4, 0xba, 0x5a, 0x28, 0x43, 0xa4, 0xf3, 0xb1, 0x82, 0xb0, 0xdb, 0xd0, 0xad, 0xe7, 0x7e, 0xe2,
	0x74, 0xeb, 0x79, 0xf6, 0x0c, 0x92, 0x1f, 0x74, 0x55, 0x2b, 0x6d, 0x2f, 0x71, 0x5e, 0xd4, 0xba,
	0xaa, 0xbd, 0x4b, 0xfa, 0x66, 0xf7, 0x57, 0xc3, 0x79, 0x6f, 0x08, 0x39, 0x2e, 0xfb, 0x25, 0x82,
	0xfe, 0x51, 0x25, 0x15, 0x0e, 0x3d, 0x61, 0xad, 0xce, 0xe7, 0x8d, 0x55, 0xde, 0xcd, 0x35, 0xc0,
	0x1e, 0x53, 0x6c, 0xb8, 0x57, 0xae, 0x4c, 0xda, 0xa5, 0xba, 0xb7, 0x95, 0x0a, 0x51, 0xf0, 0x15,
	0x0d, 0xdb, 0x83, 0x64, 0x71, 0x9a, 0x17, 0x52, 0xab, 0xd2, 0xf7, 0xe6, 0xa4, 0x6d, 0x8d, 0x4a,
	0x2a, 0xde, 0xb2, 0xd9, 0x39, 0x24, 0xdc, 0xbf, 0x4a, 0x6c, 0x0a, 0x51, 0xe9, 0x1f, 0x97, 0x9b,
	0xf2, 0xa8, 0x64, 0x5b, 0x10, 0x15, 0x3e, 0x97, 0xb5, 0xc0, 0xf9, 0xaa, 0xf2, 0xa8, 0x60, 0x0f,
	0xda, 0x1e, 0x72, 0x6d, 0xc1, 0x6e, 0xf6, 0x10, 0x79, 0xf1, 0x8a, 0x2c, 0x86, 0xc1, 0xb3, 0x53,
	0xb5, 0x78, 0x93, 0x6d, 0x42, 0x7c, 0xac, 0xb4, 0xc1, 0x6b, 0xb8, 0x0e, 0x3d, 0x2b, 0xc2, 0xa1,
	0xe0, 0xe7, 0xfe, 0xdb, 0x08, 0x86, 0xcf, 0xe9, 0xd5, 0x64, 0x0f, 0xa0, 0xc7, 0x9b, 0x92, 0xad,
	0xbd, 0xd3, 0x6a, 0xd3, 0xf5, 0x6b, 0xc0, 0x65, 0x90, 0x75, 0xd8, 0x0c, 0x86, 0xd4, 0x3b, 0x8a,
	0xbd, 0xd7, 0x4b, 0xd7, 0xfa, 0xf0, 0x86, 0x65, 0x1d, 0x7c, 0x33, 0x28, 0x98, 0x10, 0x48, 0x7b,
	0x50, 0x84, 0x4e, 0xdb, 0x3d, 0x3d, 0x4f, 0x16, 0xe0, 0xec, 0xf1, 0x6d, 0x65, 0xe3, 0xb6, 0x50,
	0xcd, 0xd9, 0xf4, 0xce, 0xbb, 0x1b, 0x1c, 0x4a, 0x93, 0x75, 0x9e, 0xde, 0x7b, 0x7b, 0xb5, 0x1d,
	0xfd, 0x7e, 0xb5, 0x1d, 0xfd, 0x71, 0xb5, 0x1d, 0xfd, 0xfa, 0xd7, 0x76, 0x07, 0xd6, 0xf2, 0x6a,
	0x26, 0x29, 0x39, 0x67, 0x31, 0x77, 0x7f, 0x05, 0x3e, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd6,
	0xb3, 0xcf, 0x49, 0x28, 0x08, 0x00, 0x00,
}
