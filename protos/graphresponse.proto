/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use protos/gen.sh to generate .pb.go files.
syntax="proto3";
import "facets.proto";
import "schema.proto";

package protos;

option java_package = "io.dgraph.proto";

service Dgraph {
  // TODO(mrjn): Rename it to Query.
    rpc Run (Request) returns (Response) {};
    rpc Mutate (Mutation) returns (Assigned) {};
    rpc CheckVersion(Check) returns (Version) {};
    rpc AssignUids(Num) returns (AssignedIds) {};
}

message Assigned {
  map<string, uint64> Uids = 1;
}

message Num {
    uint64 val = 1;
}

message AssignedIds {
    uint64 startId = 1;
    uint64 endId = 2;
}

message NQuad {
    string subject = 1;
    string predicate = 2;
    string object_id = 3;
    Value object_value = 4;
    string label = 5;
    string lang = 6;
    repeated Facet facets = 7;
    string subject_var = 8;
    string object_var = 9;
}

message Value {
    oneof val {
        string default_val = 1;
        bytes bytes_val = 2;
        int64 int_val = 3;
        bool bool_val = 4;
        string str_val = 5;
        double double_val = 6;
        bytes geo_val = 7;  // Geo data in WKB format
        bytes date_val = 8;
        bytes datetime_val = 9;
        string password_val = 10;
        uint64 uid_val=11;
    }
}

message Mutation {
    bytes set_json = 1;
    bytes delete_json = 2;
    repeated SchemaUpdate schema = 3;

    uint64 start_ts = 13;
    bool DropAll = 14;

    repeated NQuad set = 15;
    repeated NQuad del = 16;

}

message Request {
    string query = 1;
    SchemaRequest schema = 3;
    map<string, string> vars = 4; // Support for GraphQL like variables.

    uint64 start_ts = 13;
    Mutation mutation = 100;
}

message Latency {
    string parsing = 1;
    string processing = 2;
    string encoding = 3;
}

message Response {
    bytes json = 1;
    Latency latency = 2;
    repeated SchemaNode schema = 4;
}

message Check {}

message Version {
    string tag = 1;
}
