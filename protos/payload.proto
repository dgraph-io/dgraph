/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use gen.sh to generate .pb.go files.
syntax = "proto3";
import "graphresponse.proto";
import "schema.proto";
import "task.proto";

package protos;

option java_package = "io.dgraph.proto";

message Payload {
	bytes Data = 1;
}

message MovePredicatePayload {
 string predicate = 1;
 uint32 source_group_id = 2;
 uint32 dest_group_id = 3;
 MembershipState state = 4;
}

// BackupPayload is used both as a request and a response.
// When used in request, groups represents the list of groups that need to be backed up.
// When used in response, groups represent the list of groups that were backed up.
message ExportPayload {
	uint64 req_id = 1;    // Use req_id to handle duplicate requests.
	uint32 group_id = 2;  // Group id to back up.
	enum Status {
		NONE      = 0;
		SUCCESS   = 1;
		DUPLICATE = 2;
		FAILED    = 3;
	}
	Status status = 3;
}

service Raft {
	// Connection testing RPC.
	rpc Echo (Payload)             returns (Payload) {}

	rpc RaftMessage (Payload)     returns (Payload) {}
	rpc JoinCluster (RaftContext) returns (Payload) {}
}

service Zero {
	rpc Connect (Member) returns (MembershipState) {}
	rpc Update (stream Group)  returns (stream MembershipState) {}
	rpc ShouldServe (Tablet) returns (Tablet) {}
	rpc AssignUids (Num)                 returns (AssignedIds) {}
}

service Worker {
	// Data serving RPCs.
	rpc Mutate (Mutations)               returns (Payload) {}
	rpc ServeTask (Query)                returns (Result) {}
	rpc PredicateAndSchemaData (stream GroupKeys) returns (stream KV) {}
	rpc Sort (SortMessage)                      returns (SortResult) {}
	rpc Schema (SchemaRequest)                  returns (SchemaResult) {}

	rpc Export (ExportPayload)                    returns (ExportPayload) {}
	rpc ReceivePredicate(stream KV) returns (Payload) {}
	rpc MovePredicate(MovePredicatePayload) returns (Payload) {}
}
