//
// Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Style guide for Protocol Buffer 3.
// Use CamelCase (with an initial capital) for message names – for example,
// SongServerRequest. Use underscore_separated_names for field names – for
// example, song_name.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: pb.proto

package pb

import (
	pb "github.com/dgraph-io/badger/v4/pb"
	api "github.com/dgraph-io/dgo/v240/protos/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DirectedEdge_Op int32

const (
	DirectedEdge_SET DirectedEdge_Op = 0
	DirectedEdge_DEL DirectedEdge_Op = 1
	DirectedEdge_OVR DirectedEdge_Op = 2
)

var DirectedEdge_Op_name = map[int32]string{
	0: "SET",
	1: "DEL",
}

var DirectedEdge_Op_value = map[string]int32{
	"SET": 0,
	"DEL": 1,
}

func (x DirectedEdge_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectedEdge_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[0].Descriptor()
}

func (DirectedEdge_Op) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[0]
}

func (x DirectedEdge_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectedEdge_Op.Descriptor instead.
func (DirectedEdge_Op) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{19, 0}
}

type Mutations_DropOp int32

const (
	Mutations_NONE Mutations_DropOp = 0
	Mutations_ALL  Mutations_DropOp = 1
	Mutations_DATA Mutations_DropOp = 2
	Mutations_TYPE Mutations_DropOp = 3
)

// Enum value maps for Mutations_DropOp.
var (
	Mutations_DropOp_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "DATA",
		3: "TYPE",
	}
	Mutations_DropOp_value = map[string]int32{
		"NONE": 0,
		"ALL":  1,
		"DATA": 2,
		"TYPE": 3,
	}
)

func (x Mutations_DropOp) Enum() *Mutations_DropOp {
	p := new(Mutations_DropOp)
	*p = x
	return p
}

func (x Mutations_DropOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mutations_DropOp) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[1].Descriptor()
}

func (Mutations_DropOp) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[1]
}

func (x Mutations_DropOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mutations_DropOp.Descriptor instead.
func (Mutations_DropOp) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{20, 0}
}

// HintType represents a hint that will be passed along the mutation and used
// to add the predicate to the schema if it's not already there.
type Metadata_HintType int32

const (
	// DEFAULT means no hint is provided and Dgraph will follow the default
	// behavior.
	Metadata_DEFAULT Metadata_HintType = 0
	// SINGLE signals that the predicate should be created as a single type (e.g
	// string, uid).
	Metadata_SINGLE Metadata_HintType = 1
	// LIST signals that the predicate should be created as a list (e.g
	// [string], [uid]).
	Metadata_LIST Metadata_HintType = 2
)

// Enum value maps for Metadata_HintType.
var (
	Metadata_HintType_name = map[int32]string{
		0: "DEFAULT",
		1: "SINGLE",
		2: "LIST",
	}
	Metadata_HintType_value = map[string]int32{
		"DEFAULT": 0,
		"SINGLE":  1,
		"LIST":    2,
	}
)

func (x Metadata_HintType) Enum() *Metadata_HintType {
	p := new(Metadata_HintType)
	*p = x
	return p
}

func (x Metadata_HintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_HintType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[2].Descriptor()
}

func (Metadata_HintType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[2]
}

func (x Metadata_HintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_HintType.Descriptor instead.
func (Metadata_HintType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{21, 0}
}

type Posting_ValType int32

const (
	Posting_DEFAULT  Posting_ValType = 0
	Posting_BINARY   Posting_ValType = 1
	Posting_INT      Posting_ValType = 2 // We treat it as int64.
	Posting_FLOAT    Posting_ValType = 3
	Posting_BOOL     Posting_ValType = 4
	Posting_DATETIME Posting_ValType = 5
	Posting_GEO      Posting_ValType = 6
	Posting_UID      Posting_ValType = 7
	Posting_PASSWORD Posting_ValType = 8
	Posting_STRING   Posting_ValType = 9
	Posting_OBJECT   Posting_ValType = 10
	Posting_BIGFLOAT Posting_ValType = 11
	Posting_VFLOAT   Posting_ValType = 12 // Float64 Vector
)

// Enum value maps for Posting_ValType.
var (
	Posting_ValType_name = map[int32]string{
		0:  "DEFAULT",
		1:  "BINARY",
		2:  "INT",
		3:  "FLOAT",
		4:  "BOOL",
		5:  "DATETIME",
		6:  "GEO",
		7:  "UID",
		8:  "PASSWORD",
		9:  "STRING",
		10: "OBJECT",
		11: "BIGFLOAT",
		12: "VFLOAT",
	}
	Posting_ValType_value = map[string]int32{
		"DEFAULT":  0,
		"BINARY":   1,
		"INT":      2,
		"FLOAT":    3,
		"BOOL":     4,
		"DATETIME": 5,
		"GEO":      6,
		"UID":      7,
		"PASSWORD": 8,
		"STRING":   9,
		"OBJECT":   10,
		"BIGFLOAT": 11,
		"VFLOAT":   12,
	}
)

func (x Posting_ValType) Enum() *Posting_ValType {
	p := new(Posting_ValType)
	*p = x
	return p
}

func (x Posting_ValType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Posting_ValType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[3].Descriptor()
}

func (Posting_ValType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[3]
}

func (x Posting_ValType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Posting_ValType.Descriptor instead.
func (Posting_ValType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{28, 0}
}

type Posting_PostingType int32

const (
	Posting_REF        Posting_PostingType = 0 // UID
	Posting_VALUE      Posting_PostingType = 1 // simple, plain value
	Posting_VALUE_LANG Posting_PostingType = 2 // value with specified language
)

// Enum value maps for Posting_PostingType.
var (
	Posting_PostingType_name = map[int32]string{
		0: "REF",
		1: "VALUE",
		2: "VALUE_LANG",
	}
	Posting_PostingType_value = map[string]int32{
		"REF":        0,
		"VALUE":      1,
		"VALUE_LANG": 2,
	}
)

func (x Posting_PostingType) Enum() *Posting_PostingType {
	p := new(Posting_PostingType)
	*p = x
	return p
}

func (x Posting_PostingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Posting_PostingType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[4].Descriptor()
}

func (Posting_PostingType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[4]
}

func (x Posting_PostingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Posting_PostingType.Descriptor instead.
func (Posting_PostingType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{28, 1}
}

type SchemaUpdate_Directive int32

const (
	SchemaUpdate_NONE    SchemaUpdate_Directive = 0
	SchemaUpdate_INDEX   SchemaUpdate_Directive = 1
	SchemaUpdate_REVERSE SchemaUpdate_Directive = 2
	SchemaUpdate_DELETE  SchemaUpdate_Directive = 3
)

// Enum value maps for SchemaUpdate_Directive.
var (
	SchemaUpdate_Directive_name = map[int32]string{
		0: "NONE",
		1: "INDEX",
		2: "REVERSE",
		3: "DELETE",
	}
	SchemaUpdate_Directive_value = map[string]int32{
		"NONE":    0,
		"INDEX":   1,
		"REVERSE": 2,
		"DELETE":  3,
	}
)

func (x SchemaUpdate_Directive) Enum() *SchemaUpdate_Directive {
	p := new(SchemaUpdate_Directive)
	*p = x
	return p
}

func (x SchemaUpdate_Directive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaUpdate_Directive) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[5].Descriptor()
}

func (SchemaUpdate_Directive) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[5]
}

func (x SchemaUpdate_Directive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaUpdate_Directive.Descriptor instead.
func (SchemaUpdate_Directive) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{41, 0}
}

type NumLeaseType int32

const (
	Num_NS_ID  NumLeaseType = 0
	Num_UID    NumLeaseType = 1
	Num_TXN_TS NumLeaseType = 2
)

// Enum value maps for NumLeaseType.
var (
	NumLeaseType_name = map[int32]string{
		0: "NS_ID",
		1: "UID",
		2: "TXN_TS",
	}
	NumLeaseType_value = map[string]int32{
		"NS_ID":  0,
		"UID":    1,
		"TXN_TS": 2,
	}
)

func (x NumLeaseType) Enum() *NumLeaseType {
	p := new(NumLeaseType)
	*p = x
	return p
}

func (x NumLeaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumLeaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[6].Descriptor()
}

func (NumLeaseType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[6]
}

func (x NumLeaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumLeaseType.Descriptor instead.
func (NumLeaseType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{56, 0}
}

type DropOperation_DropOp int32

const (
	DropOperation_ALL  DropOperation_DropOp = 0
	DropOperation_DATA DropOperation_DropOp = 1
	DropOperation_ATTR DropOperation_DropOp = 2
	DropOperation_NS   DropOperation_DropOp = 3
)

// Enum value maps for DropOperation_DropOp.
var (
	DropOperation_DropOp_name = map[int32]string{
		0: "ALL",
		1: "DATA",
		2: "ATTR",
		3: "NS",
	}
	DropOperation_DropOp_value = map[string]int32{
		"ALL":  0,
		"DATA": 1,
		"ATTR": 2,
		"NS":   3,
	}
)

func (x DropOperation_DropOp) Enum() *DropOperation_DropOp {
	p := new(DropOperation_DropOp)
	*p = x
	return p
}

func (x DropOperation_DropOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropOperation_DropOp) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[7].Descriptor()
}

func (DropOperation_DropOp) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[7]
}

func (x DropOperation_DropOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropOperation_DropOp.Descriptor instead.
func (DropOperation_DropOp) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{65, 0}
}

type BackupKey_KeyType int32

const (
	BackupKey_UNKNOWN   BackupKey_KeyType = 0
	BackupKey_DATA      BackupKey_KeyType = 1
	BackupKey_INDEX     BackupKey_KeyType = 2
	BackupKey_REVERSE   BackupKey_KeyType = 3
	BackupKey_COUNT     BackupKey_KeyType = 4
	BackupKey_COUNT_REV BackupKey_KeyType = 5
	BackupKey_SCHEMA    BackupKey_KeyType = 6
	BackupKey_TYPE      BackupKey_KeyType = 7
)

// Enum value maps for BackupKey_KeyType.
var (
	BackupKey_KeyType_name = map[int32]string{
		0: "UNKNOWN",
		1: "DATA",
		2: "INDEX",
		3: "REVERSE",
		4: "COUNT",
		5: "COUNT_REV",
		6: "SCHEMA",
		7: "TYPE",
	}
	BackupKey_KeyType_value = map[string]int32{
		"UNKNOWN":   0,
		"DATA":      1,
		"INDEX":     2,
		"REVERSE":   3,
		"COUNT":     4,
		"COUNT_REV": 5,
		"SCHEMA":    6,
		"TYPE":      7,
	}
)

func (x BackupKey_KeyType) Enum() *BackupKey_KeyType {
	p := new(BackupKey_KeyType)
	*p = x
	return p
}

func (x BackupKey_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupKey_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_enumTypes[8].Descriptor()
}

func (BackupKey_KeyType) Type() protoreflect.EnumType {
	return &file_pb_proto_enumTypes[8]
}

func (x BackupKey_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupKey_KeyType.Descriptor instead.
func (BackupKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{68, 0}
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []uint64 `protobuf:"fixed64,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{0}
}

func (x *List) GetUids() []uint64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

type TaskValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val     []byte          `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	ValType Posting_ValType `protobuf:"varint,2,opt,name=val_type,json=valType,proto3,enum=pb.Posting_ValType" json:"val_type,omitempty"`
}

func (x *TaskValue) Reset() {
	*x = TaskValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskValue) ProtoMessage() {}

func (x *TaskValue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskValue.ProtoReflect.Descriptor instead.
func (*TaskValue) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{1}
}

func (x *TaskValue) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *TaskValue) GetValType() Posting_ValType {
	if x != nil {
		return x.ValType
	}
	return Posting_DEFAULT
}

type SrcFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args    []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	IsCount bool     `protobuf:"varint,4,opt,name=isCount,proto3" json:"isCount,omitempty"`
}

func (x *SrcFunction) Reset() {
	*x = SrcFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcFunction) ProtoMessage() {}

func (x *SrcFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcFunction.ProtoReflect.Descriptor instead.
func (*SrcFunction) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{2}
}

func (x *SrcFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SrcFunction) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SrcFunction) GetIsCount() bool {
	if x != nil {
		return x.IsCount
	}
	return false
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr     string   `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	Langs    []string `protobuf:"bytes,2,rep,name=langs,proto3" json:"langs,omitempty"`                         // language list for attribute
	AfterUid uint64   `protobuf:"fixed64,3,opt,name=after_uid,json=afterUid,proto3" json:"after_uid,omitempty"` // Only return UIDs greater than this.
	DoCount  bool     `protobuf:"varint,4,opt,name=do_count,json=doCount,proto3" json:"do_count,omitempty"`     // Are we just getting lengths?
	// Exactly one of uids and terms is populated.
	UidList *List `protobuf:"bytes,5,opt,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	// Function to generate or filter UIDs.
	SrcFunc      *SrcFunction `protobuf:"bytes,6,opt,name=src_func,json=srcFunc,proto3" json:"src_func,omitempty"`
	Reverse      bool         `protobuf:"varint,7,opt,name=reverse,proto3" json:"reverse,omitempty"`                              // Whether this is a reverse edge.
	FacetParam   *FacetParams `protobuf:"bytes,8,opt,name=facet_param,json=facetParam,proto3" json:"facet_param,omitempty"`       // which facets to fetch
	FacetsFilter *FilterTree  `protobuf:"bytes,9,opt,name=facets_filter,json=facetsFilter,proto3" json:"facets_filter,omitempty"` // filtering on facets : has Op (and/or/not) tree
	ExpandAll    bool         `protobuf:"varint,10,opt,name=expand_all,json=expandAll,proto3" json:"expand_all,omitempty"`        // expand all language variants.
	ReadTs       uint64       `protobuf:"varint,13,opt,name=read_ts,json=readTs,proto3" json:"read_ts,omitempty"`
	Cache        int32        `protobuf:"varint,14,opt,name=cache,proto3" json:"cache,omitempty"`
	First        int32        `protobuf:"varint,15,opt,name=first,proto3" json:"first,omitempty"` // used to limit the number of result. Typically, the count is value of first
	// field. Now, It's been used only for has query.
	Offset int32 `protobuf:"varint,16,opt,name=offset,proto3" json:"offset,omitempty"` // offset helps in fetching lesser results for the has query when there is
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *Query) GetLangs() []string {
	if x != nil {
		return x.Langs
	}
	return nil
}

func (x *Query) GetAfterUid() uint64 {
	if x != nil {
		return x.AfterUid
	}
	return 0
}

func (x *Query) GetDoCount() bool {
	if x != nil {
		return x.DoCount
	}
	return false
}

func (x *Query) GetUidList() *List {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *Query) GetSrcFunc() *SrcFunction {
	if x != nil {
		return x.SrcFunc
	}
	return nil
}

func (x *Query) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *Query) GetFacetParam() *FacetParams {
	if x != nil {
		return x.FacetParam
	}
	return nil
}

func (x *Query) GetFacetsFilter() *FilterTree {
	if x != nil {
		return x.FacetsFilter
	}
	return nil
}

func (x *Query) GetExpandAll() bool {
	if x != nil {
		return x.ExpandAll
	}
	return false
}

func (x *Query) GetReadTs() uint64 {
	if x != nil {
		return x.ReadTs
	}
	return 0
}

func (x *Query) GetCache() int32 {
	if x != nil {
		return x.Cache
	}
	return 0
}

func (x *Query) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Query) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*TaskValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ValueList) Reset() {
	*x = ValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueList) ProtoMessage() {}

func (x *ValueList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueList.ProtoReflect.Descriptor instead.
func (*ValueList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{4}
}

func (x *ValueList) GetValues() []*TaskValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type LangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang []string `protobuf:"bytes,1,rep,name=lang,proto3" json:"lang,omitempty"`
}

func (x *LangList) Reset() {
	*x = LangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangList) ProtoMessage() {}

func (x *LangList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangList.ProtoReflect.Descriptor instead.
func (*LangList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{5}
}

func (x *LangList) GetLang() []string {
	if x != nil {
		return x.Lang
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidMatrix     []*List           `protobuf:"bytes,1,rep,name=uid_matrix,json=uidMatrix,proto3" json:"uid_matrix,omitempty"`
	ValueMatrix   []*ValueList      `protobuf:"bytes,2,rep,name=value_matrix,json=valueMatrix,proto3" json:"value_matrix,omitempty"`
	Counts        []uint32          `protobuf:"varint,3,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	IntersectDest bool              `protobuf:"varint,4,opt,name=intersect_dest,json=intersectDest,proto3" json:"intersect_dest,omitempty"`
	FacetMatrix   []*FacetsList     `protobuf:"bytes,5,rep,name=facet_matrix,json=facetMatrix,proto3" json:"facet_matrix,omitempty"`
	LangMatrix    []*LangList       `protobuf:"bytes,6,rep,name=lang_matrix,json=langMatrix,proto3" json:"lang_matrix,omitempty"`
	List          bool              `protobuf:"varint,7,opt,name=list,proto3" json:"list,omitempty"`
	VectorMetrics map[string]uint64 `protobuf:"bytes,8,rep,name=vector_metrics,json=vectorMetrics,proto3" json:"vector_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{6}
}

func (x *Result) GetUidMatrix() []*List {
	if x != nil {
		return x.UidMatrix
	}
	return nil
}

func (x *Result) GetValueMatrix() []*ValueList {
	if x != nil {
		return x.ValueMatrix
	}
	return nil
}

func (x *Result) GetCounts() []uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *Result) GetIntersectDest() bool {
	if x != nil {
		return x.IntersectDest
	}
	return false
}

func (x *Result) GetFacetMatrix() []*FacetsList {
	if x != nil {
		return x.FacetMatrix
	}
	return nil
}

func (x *Result) GetLangMatrix() []*LangList {
	if x != nil {
		return x.LangMatrix
	}
	return nil
}

func (x *Result) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *Result) GetVectorMetrics() map[string]uint64 {
	if x != nil {
		return x.VectorMetrics
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr  string   `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	Desc  bool     `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Langs []string `protobuf:"bytes,3,rep,name=langs,proto3" json:"langs,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{7}
}

func (x *Order) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *Order) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *Order) GetLangs() []string {
	if x != nil {
		return x.Langs
	}
	return nil
}

type SortMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order     []*Order `protobuf:"bytes,1,rep,name=order,proto3" json:"order,omitempty"`
	UidMatrix []*List  `protobuf:"bytes,2,rep,name=uid_matrix,json=uidMatrix,proto3" json:"uid_matrix,omitempty"`
	Count     int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`   // Return this many elements.
	Offset    int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"` // Skip this many elements.
	ReadTs    uint64   `protobuf:"varint,13,opt,name=read_ts,json=readTs,proto3" json:"read_ts,omitempty"`
}

func (x *SortMessage) Reset() {
	*x = SortMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMessage) ProtoMessage() {}

func (x *SortMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMessage.ProtoReflect.Descriptor instead.
func (*SortMessage) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{8}
}

func (x *SortMessage) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *SortMessage) GetUidMatrix() []*List {
	if x != nil {
		return x.UidMatrix
	}
	return nil
}

func (x *SortMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SortMessage) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SortMessage) GetReadTs() uint64 {
	if x != nil {
		return x.ReadTs
	}
	return 0
}

type SortResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidMatrix []*List `protobuf:"bytes,1,rep,name=uid_matrix,json=uidMatrix,proto3" json:"uid_matrix,omitempty"`
}

func (x *SortResult) Reset() {
	*x = SortResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortResult) ProtoMessage() {}

func (x *SortResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortResult.ProtoReflect.Descriptor instead.
func (*SortResult) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{9}
}

func (x *SortResult) GetUidMatrix() []*List {
	if x != nil {
		return x.UidMatrix
	}
	return nil
}

type RaftContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Group      uint32 `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Addr       string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	SnapshotTs uint64 `protobuf:"varint,4,opt,name=snapshot_ts,json=snapshotTs,proto3" json:"snapshot_ts,omitempty"`
	IsLearner  bool   `protobuf:"varint,5,opt,name=is_learner,json=isLearner,proto3" json:"is_learner,omitempty"`
}

func (x *RaftContext) Reset() {
	*x = RaftContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftContext) ProtoMessage() {}

func (x *RaftContext) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftContext.ProtoReflect.Descriptor instead.
func (*RaftContext) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{10}
}

func (x *RaftContext) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftContext) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *RaftContext) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RaftContext) GetSnapshotTs() uint64 {
	if x != nil {
		return x.SnapshotTs
	}
	return 0
}

func (x *RaftContext) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

// Member stores information about RAFT group member for a single RAFT node.
// Note that each server can be serving multiple RAFT groups. Each group would
// have one RAFT node per server serving that group.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId         uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Addr            string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Leader          bool   `protobuf:"varint,4,opt,name=leader,proto3" json:"leader,omitempty"`
	AmDead          bool   `protobuf:"varint,5,opt,name=am_dead,json=amDead,proto3" json:"am_dead,omitempty"`
	LastUpdate      uint64 `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Learner         bool   `protobuf:"varint,7,opt,name=learner,proto3" json:"learner,omitempty"`
	ClusterInfoOnly bool   `protobuf:"varint,13,opt,name=cluster_info_only,json=clusterInfoOnly,proto3" json:"cluster_info_only,omitempty"`
	ForceGroupId    bool   `protobuf:"varint,14,opt,name=force_group_id,json=forceGroupId,proto3" json:"force_group_id,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{11}
}

func (x *Member) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Member) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Member) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

func (x *Member) GetAmDead() bool {
	if x != nil {
		return x.AmDead
	}
	return false
}

func (x *Member) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Member) GetLearner() bool {
	if x != nil {
		return x.Learner
	}
	return false
}

func (x *Member) GetClusterInfoOnly() bool {
	if x != nil {
		return x.ClusterInfoOnly
	}
	return false
}

func (x *Member) GetForceGroupId() bool {
	if x != nil {
		return x.ForceGroupId
	}
	return false
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members      map[uint64]*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Raft ID is the key.
	Tablets      map[string]*Tablet `protobuf:"bytes,2,rep,name=tablets,proto3" json:"tablets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`  // Predicate + others are key.
	SnapshotTs   uint64             `protobuf:"varint,3,opt,name=snapshot_ts,json=snapshotTs,proto3" json:"snapshot_ts,omitempty"`                                                                 // Stores Snapshot transaction ts.
	Checksum     uint64             `protobuf:"varint,4,opt,name=checksum,proto3" json:"checksum,omitempty"`                                                                                       // Stores a checksum.
	CheckpointTs uint64             `protobuf:"varint,5,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`                                                           // Stores checkpoint ts as seen by leader.
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{12}
}

func (x *Group) GetMembers() map[uint64]*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Group) GetTablets() map[string]*Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *Group) GetSnapshotTs() uint64 {
	if x != nil {
		return x.SnapshotTs
	}
	return 0
}

func (x *Group) GetChecksum() uint64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *Group) GetCheckpointTs() uint64 {
	if x != nil {
		return x.CheckpointTs
	}
	return 0
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	MaxNodes uint64 `protobuf:"varint,2,opt,name=maxNodes,proto3" json:"maxNodes,omitempty"`
	ExpiryTs int64  `protobuf:"varint,3,opt,name=expiryTs,proto3" json:"expiryTs,omitempty"`
	Enabled  bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{13}
}

func (x *License) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *License) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *License) GetExpiryTs() int64 {
	if x != nil {
		return x.ExpiryTs
	}
	return 0
}

func (x *License) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ZeroProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotTs map[uint32]uint64 `protobuf:"bytes,1,rep,name=snapshot_ts,json=snapshotTs,proto3" json:"snapshot_ts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Group ID -> Snapshot Ts.
	Member     *Member           `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	Tablet     *Tablet           `protobuf:"bytes,3,opt,name=tablet,proto3" json:"tablet,omitempty"`
	MaxUID     uint64            `protobuf:"varint,4,opt,name=maxUID,proto3" json:"maxUID,omitempty"`
	MaxTxnTs   uint64            `protobuf:"varint,5,opt,name=maxTxnTs,proto3" json:"maxTxnTs,omitempty"`
	MaxNsID    uint64            `protobuf:"varint,12,opt,name=maxNsID,proto3" json:"maxNsID,omitempty"`
	MaxRaftId  uint64            `protobuf:"varint,6,opt,name=maxRaftId,proto3" json:"maxRaftId,omitempty"`
	Txn        *api.TxnContext   `protobuf:"bytes,7,opt,name=txn,proto3" json:"txn,omitempty"`
	Cid        string            `protobuf:"bytes,9,opt,name=cid,proto3" json:"cid,omitempty"` // Used as unique identifier for the cluster.
	License    *License          `protobuf:"bytes,10,opt,name=license,proto3" json:"license,omitempty"`
	Snapshot   *ZeroSnapshot     `protobuf:"bytes,11,opt,name=snapshot,proto3" json:"snapshot,omitempty"` // Used to make Zeros take a snapshot.
	// 12 has already been used.
	DeleteNs *DeleteNsRequest `protobuf:"bytes,13,opt,name=delete_ns,json=deleteNs,proto3" json:"delete_ns,omitempty"` // Used to delete namespace.
	Tablets  []*Tablet        `protobuf:"bytes,14,rep,name=tablets,proto3" json:"tablets,omitempty"`
}

func (x *ZeroProposal) Reset() {
	*x = ZeroProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZeroProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroProposal) ProtoMessage() {}

func (x *ZeroProposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroProposal.ProtoReflect.Descriptor instead.
func (*ZeroProposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{14}
}

func (x *ZeroProposal) GetSnapshotTs() map[uint32]uint64 {
	if x != nil {
		return x.SnapshotTs
	}
	return nil
}

func (x *ZeroProposal) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ZeroProposal) GetTablet() *Tablet {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *ZeroProposal) GetMaxUID() uint64 {
	if x != nil {
		return x.MaxUID
	}
	return 0
}

func (x *ZeroProposal) GetMaxTxnTs() uint64 {
	if x != nil {
		return x.MaxTxnTs
	}
	return 0
}

func (x *ZeroProposal) GetMaxNsID() uint64 {
	if x != nil {
		return x.MaxNsID
	}
	return 0
}

func (x *ZeroProposal) GetMaxRaftId() uint64 {
	if x != nil {
		return x.MaxRaftId
	}
	return 0
}

func (x *ZeroProposal) GetTxn() *api.TxnContext {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *ZeroProposal) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ZeroProposal) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *ZeroProposal) GetSnapshot() *ZeroSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *ZeroProposal) GetDeleteNs() *DeleteNsRequest {
	if x != nil {
		return x.DeleteNs
	}
	return nil
}

func (x *ZeroProposal) GetTablets() []*Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

// MembershipState is used to pack together the current membership state of all
// the nodes in the caller server; and the membership updates recorded by the
// callee server since the provided lastUpdate.
type MembershipState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter   uint64             `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"` // used to find latest membershipState in case of race.
	Groups    map[uint32]*Group  `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Zeros     map[uint64]*Member `protobuf:"bytes,3,rep,name=zeros,proto3" json:"zeros,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxUID    uint64             `protobuf:"varint,4,opt,name=maxUID,proto3" json:"maxUID,omitempty"`
	MaxTxnTs  uint64             `protobuf:"varint,5,opt,name=maxTxnTs,proto3" json:"maxTxnTs,omitempty"`
	MaxNsID   uint64             `protobuf:"varint,10,opt,name=maxNsID,proto3" json:"maxNsID,omitempty"`
	MaxRaftId uint64             `protobuf:"varint,6,opt,name=maxRaftId,proto3" json:"maxRaftId,omitempty"`
	Removed   []*Member          `protobuf:"bytes,7,rep,name=removed,proto3" json:"removed,omitempty"`
	Cid       string             `protobuf:"bytes,8,opt,name=cid,proto3" json:"cid,omitempty"`         // Used to uniquely identify the Dgraph cluster.
	License   *License           `protobuf:"bytes,9,opt,name=license,proto3" json:"license,omitempty"` // 10 has already been used.
}

func (x *MembershipState) Reset() {
	*x = MembershipState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipState) ProtoMessage() {}

func (x *MembershipState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipState.ProtoReflect.Descriptor instead.
func (*MembershipState) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{15}
}

func (x *MembershipState) GetCounter() uint64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *MembershipState) GetGroups() map[uint32]*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *MembershipState) GetZeros() map[uint64]*Member {
	if x != nil {
		return x.Zeros
	}
	return nil
}

func (x *MembershipState) GetMaxUID() uint64 {
	if x != nil {
		return x.MaxUID
	}
	return 0
}

func (x *MembershipState) GetMaxTxnTs() uint64 {
	if x != nil {
		return x.MaxTxnTs
	}
	return 0
}

func (x *MembershipState) GetMaxNsID() uint64 {
	if x != nil {
		return x.MaxNsID
	}
	return 0
}

func (x *MembershipState) GetMaxRaftId() uint64 {
	if x != nil {
		return x.MaxRaftId
	}
	return 0
}

func (x *MembershipState) GetRemoved() []*Member {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *MembershipState) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *MembershipState) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

type ConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     *Member          `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	State      *MembershipState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	MaxPending uint64           `protobuf:"varint,3,opt,name=max_pending,json=maxPending,proto3" json:"max_pending,omitempty"` // Used to determine the timstamp for reading after bulk load
}

func (x *ConnectionState) Reset() {
	*x = ConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState) ProtoMessage() {}

func (x *ConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState.ProtoReflect.Descriptor instead.
func (*ConnectionState) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{16}
}

func (x *ConnectionState) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ConnectionState) GetState() *MembershipState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ConnectionState) GetMaxPending() uint64 {
	if x != nil {
		return x.MaxPending
	}
	return 0
}

type HealthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance    string   `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Address     string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status      string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Group       string   `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"` // string so group = 0 can be printed in JSON.
	Version     string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Uptime      int64    `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	LastEcho    int64    `protobuf:"varint,7,opt,name=lastEcho,proto3" json:"lastEcho,omitempty"`
	Ongoing     []string `protobuf:"bytes,8,rep,name=ongoing,proto3" json:"ongoing,omitempty"`
	Indexing    []string `protobuf:"bytes,9,rep,name=indexing,proto3" json:"indexing,omitempty"`
	EeFeatures  []string `protobuf:"bytes,10,rep,name=ee_features,json=eeFeatures,proto3" json:"ee_features,omitempty"`
	MaxAssigned uint64   `protobuf:"varint,11,opt,name=max_assigned,json=maxAssigned,proto3" json:"max_assigned,omitempty"`
}

func (x *HealthInfo) Reset() {
	*x = HealthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthInfo) ProtoMessage() {}

func (x *HealthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthInfo.ProtoReflect.Descriptor instead.
func (*HealthInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{17}
}

func (x *HealthInfo) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *HealthInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HealthInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *HealthInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthInfo) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *HealthInfo) GetLastEcho() int64 {
	if x != nil {
		return x.LastEcho
	}
	return 0
}

func (x *HealthInfo) GetOngoing() []string {
	if x != nil {
		return x.Ongoing
	}
	return nil
}

func (x *HealthInfo) GetIndexing() []string {
	if x != nil {
		return x.Indexing
	}
	return nil
}

func (x *HealthInfo) GetEeFeatures() []string {
	if x != nil {
		return x.EeFeatures
	}
	return nil
}

func (x *HealthInfo) GetMaxAssigned() uint64 {
	if x != nil {
		return x.MaxAssigned
	}
	return 0
}

type Tablet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Predicate         string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Force             bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"` // Used while moving predicate.
	OnDiskBytes       int64  `protobuf:"varint,7,opt,name=on_disk_bytes,json=onDiskBytes,proto3" json:"on_disk_bytes,omitempty"`
	Remove            bool   `protobuf:"varint,8,opt,name=remove,proto3" json:"remove,omitempty"`
	ReadOnly          bool   `protobuf:"varint,9,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	MoveTs            uint64 `protobuf:"varint,10,opt,name=move_ts,json=moveTs,proto3" json:"move_ts,omitempty"`
	UncompressedBytes int64  `protobuf:"varint,11,opt,name=uncompressed_bytes,json=uncompressedBytes,proto3" json:"uncompressed_bytes,omitempty"` // Estimated uncompressed size of tablet in bytes
}

func (x *Tablet) Reset() {
	*x = Tablet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tablet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tablet) ProtoMessage() {}

func (x *Tablet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tablet.ProtoReflect.Descriptor instead.
func (*Tablet) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{18}
}

func (x *Tablet) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Tablet) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Tablet) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *Tablet) GetOnDiskBytes() int64 {
	if x != nil {
		return x.OnDiskBytes
	}
	return 0
}

func (x *Tablet) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *Tablet) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Tablet) GetMoveTs() uint64 {
	if x != nil {
		return x.MoveTs
	}
	return 0
}

func (x *Tablet) GetUncompressedBytes() int64 {
	if x != nil {
		return x.UncompressedBytes
	}
	return 0
}

type DirectedEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity       uint64          `protobuf:"fixed64,1,opt,name=entity,proto3" json:"entity,omitempty"`                                               // Subject or source node / UID.
	Attr         string          `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`                                                     // Attribute or predicate. Labels the edge.
	Value        []byte          `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                   // Edge points to a value.
	ValueType    Posting_ValType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=pb.Posting_ValType" json:"value_type,omitempty"` // The type of the value
	ValueId      uint64          `protobuf:"fixed64,5,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`                              // Object or destination node / UID.
	Lang         string          `protobuf:"bytes,7,opt,name=lang,proto3" json:"lang,omitempty"`
	Op           DirectedEdge_Op `protobuf:"varint,8,opt,name=op,proto3,enum=pb.DirectedEdge_Op" json:"op,omitempty"`
	Facets       []*api.Facet    `protobuf:"bytes,9,rep,name=facets,proto3" json:"facets,omitempty"`
	AllowedPreds []string        `protobuf:"bytes,10,rep,name=allowedPreds,proto3" json:"allowedPreds,omitempty"`
	Namespace    uint64          `protobuf:"varint,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DirectedEdge) Reset() {
	*x = DirectedEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectedEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectedEdge) ProtoMessage() {}

func (x *DirectedEdge) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectedEdge.ProtoReflect.Descriptor instead.
func (*DirectedEdge) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{19}
}

func (x *DirectedEdge) GetEntity() uint64 {
	if x != nil {
		return x.Entity
	}
	return 0
}

func (x *DirectedEdge) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *DirectedEdge) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DirectedEdge) GetValueType() Posting_ValType {
	if x != nil {
		return x.ValueType
	}
	return Posting_DEFAULT
}

func (x *DirectedEdge) GetValueId() uint64 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *DirectedEdge) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *DirectedEdge) GetOp() DirectedEdge_Op {
	if x != nil {
		return x.Op
	}
	return DirectedEdge_SET
}

func (x *DirectedEdge) GetFacets() []*api.Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *DirectedEdge) GetAllowedPreds() []string {
	if x != nil {
		return x.AllowedPreds
	}
	return nil
}

func (x *DirectedEdge) GetNamespace() uint64 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

type Mutations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	StartTs   uint64           `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Edges     []*DirectedEdge  `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`
	Schema    []*SchemaUpdate  `protobuf:"bytes,4,rep,name=schema,proto3" json:"schema,omitempty"`
	Types     []*TypeUpdate    `protobuf:"bytes,6,rep,name=types,proto3" json:"types,omitempty"`
	DropOp    Mutations_DropOp `protobuf:"varint,7,opt,name=drop_op,json=dropOp,proto3,enum=pb.Mutations_DropOp" json:"drop_op,omitempty"`
	DropValue string           `protobuf:"bytes,8,opt,name=drop_value,json=dropValue,proto3" json:"drop_value,omitempty"`
	Metadata  *Metadata        `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Mutations) Reset() {
	*x = Mutations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutations) ProtoMessage() {}

func (x *Mutations) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutations.ProtoReflect.Descriptor instead.
func (*Mutations) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{20}
}

func (x *Mutations) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Mutations) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *Mutations) GetEdges() []*DirectedEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *Mutations) GetSchema() []*SchemaUpdate {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Mutations) GetTypes() []*TypeUpdate {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Mutations) GetDropOp() Mutations_DropOp {
	if x != nil {
		return x.DropOp
	}
	return Mutations_NONE
}

func (x *Mutations) GetDropValue() string {
	if x != nil {
		return x.DropValue
	}
	return ""
}

func (x *Mutations) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of predicates to their hints.
	PredHints map[string]Metadata_HintType `protobuf:"bytes,1,rep,name=pred_hints,json=predHints,proto3" json:"pred_hints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=pb.Metadata_HintType"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{21}
}

func (x *Metadata) GetPredHints() map[string]Metadata_HintType {
	if x != nil {
		return x.PredHints
	}
	return nil
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *RaftContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Index   uint64       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ReadTs  uint64       `protobuf:"varint,3,opt,name=read_ts,json=readTs,proto3" json:"read_ts,omitempty"`
	// done is used to indicate that snapshot stream was a success.
	Done bool `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
	// since_ts stores the ts of the last snapshot to support diff snap updates.
	SinceTs uint64 `protobuf:"varint,5,opt,name=since_ts,json=sinceTs,proto3" json:"since_ts,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{22}
}

func (x *Snapshot) GetContext() *RaftContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Snapshot) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Snapshot) GetReadTs() uint64 {
	if x != nil {
		return x.ReadTs
	}
	return 0
}

func (x *Snapshot) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *Snapshot) GetSinceTs() uint64 {
	if x != nil {
		return x.SinceTs
	}
	return 0
}

type ZeroSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CheckpointTs uint64           `protobuf:"varint,2,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	State        *MembershipState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ZeroSnapshot) Reset() {
	*x = ZeroSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZeroSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroSnapshot) ProtoMessage() {}

func (x *ZeroSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroSnapshot.ProtoReflect.Descriptor instead.
func (*ZeroSnapshot) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{23}
}

func (x *ZeroSnapshot) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ZeroSnapshot) GetCheckpointTs() uint64 {
	if x != nil {
		return x.CheckpointTs
	}
	return 0
}

func (x *ZeroSnapshot) GetState() *MembershipState {
	if x != nil {
		return x.State
	}
	return nil
}

type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RestoreTs uint64 `protobuf:"varint,2,opt,name=restore_ts,json=restoreTs,proto3" json:"restore_ts,omitempty"`
	Location  string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	BackupId  string `protobuf:"bytes,4,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Credentials when using a minio or S3 bucket as the backup location.
	AccessKey    string `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey    string `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SessionToken string `protobuf:"bytes,7,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Anonymous    bool   `protobuf:"varint,8,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	// Info needed to process encrypted backups.
	EncryptionKeyFile string `protobuf:"bytes,9,opt,name=encryption_key_file,json=encryptionKeyFile,proto3" json:"encryption_key_file,omitempty"`
	// Vault options
	VaultAddr               string `protobuf:"bytes,10,opt,name=vault_addr,json=vaultAddr,proto3" json:"vault_addr,omitempty"`
	VaultRoleidFile         string `protobuf:"bytes,11,opt,name=vault_roleid_file,json=vaultRoleidFile,proto3" json:"vault_roleid_file,omitempty"`
	VaultSecretidFile       string `protobuf:"bytes,12,opt,name=vault_secretid_file,json=vaultSecretidFile,proto3" json:"vault_secretid_file,omitempty"`
	VaultPath               string `protobuf:"bytes,13,opt,name=vault_path,json=vaultPath,proto3" json:"vault_path,omitempty"`
	VaultField              string `protobuf:"bytes,14,opt,name=vault_field,json=vaultField,proto3" json:"vault_field,omitempty"`
	VaultFormat             string `protobuf:"bytes,15,opt,name=vault_format,json=vaultFormat,proto3" json:"vault_format,omitempty"`
	BackupNum               uint64 `protobuf:"varint,16,opt,name=backup_num,json=backupNum,proto3" json:"backup_num,omitempty"`
	IncrementalFrom         uint64 `protobuf:"varint,17,opt,name=incremental_from,json=incrementalFrom,proto3" json:"incremental_from,omitempty"`
	IsPartial               bool   `protobuf:"varint,18,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	FromNamespace           uint64 `protobuf:"varint,19,opt,name=fromNamespace,proto3" json:"fromNamespace,omitempty"`
	IsNamespaceAwareRestore bool   `protobuf:"varint,20,opt,name=isNamespaceAwareRestore,proto3" json:"isNamespaceAwareRestore,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{24}
}

func (x *RestoreRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RestoreRequest) GetRestoreTs() uint64 {
	if x != nil {
		return x.RestoreTs
	}
	return 0
}

func (x *RestoreRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RestoreRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *RestoreRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *RestoreRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *RestoreRequest) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *RestoreRequest) GetEncryptionKeyFile() string {
	if x != nil {
		return x.EncryptionKeyFile
	}
	return ""
}

func (x *RestoreRequest) GetVaultAddr() string {
	if x != nil {
		return x.VaultAddr
	}
	return ""
}

func (x *RestoreRequest) GetVaultRoleidFile() string {
	if x != nil {
		return x.VaultRoleidFile
	}
	return ""
}

func (x *RestoreRequest) GetVaultSecretidFile() string {
	if x != nil {
		return x.VaultSecretidFile
	}
	return ""
}

func (x *RestoreRequest) GetVaultPath() string {
	if x != nil {
		return x.VaultPath
	}
	return ""
}

func (x *RestoreRequest) GetVaultField() string {
	if x != nil {
		return x.VaultField
	}
	return ""
}

func (x *RestoreRequest) GetVaultFormat() string {
	if x != nil {
		return x.VaultFormat
	}
	return ""
}

func (x *RestoreRequest) GetBackupNum() uint64 {
	if x != nil {
		return x.BackupNum
	}
	return 0
}

func (x *RestoreRequest) GetIncrementalFrom() uint64 {
	if x != nil {
		return x.IncrementalFrom
	}
	return 0
}

func (x *RestoreRequest) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *RestoreRequest) GetFromNamespace() uint64 {
	if x != nil {
		return x.FromNamespace
	}
	return 0
}

func (x *RestoreRequest) GetIsNamespaceAwareRestore() bool {
	if x != nil {
		return x.IsNamespaceAwareRestore
	}
	return false
}

type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mutations        *Mutations       `protobuf:"bytes,2,opt,name=mutations,proto3" json:"mutations,omitempty"`
	Kv               []*pb.KV         `protobuf:"bytes,4,rep,name=kv,proto3" json:"kv,omitempty"`
	State            *MembershipState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	CleanPredicate   string           `protobuf:"bytes,6,opt,name=clean_predicate,json=cleanPredicate,proto3" json:"clean_predicate,omitempty"` // Delete the predicate which was moved to other group.
	Delta            *OracleDelta     `protobuf:"bytes,8,opt,name=delta,proto3" json:"delta,omitempty"`
	Snapshot         *Snapshot        `protobuf:"bytes,9,opt,name=snapshot,proto3" json:"snapshot,omitempty"`                                           // Used to tell the group when to take snapshot.
	Index            uint64           `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`                                               // Used to store Raft index, in raft.Ready.
	ExpectedChecksum uint64           `protobuf:"varint,11,opt,name=expected_checksum,json=expectedChecksum,proto3" json:"expected_checksum,omitempty"` // Block an operation until membership reaches this checksum.
	Restore          *RestoreRequest  `protobuf:"bytes,12,opt,name=restore,proto3" json:"restore,omitempty"`
	CdcState         *CDCState        `protobuf:"bytes,13,opt,name=cdc_state,json=cdcState,proto3" json:"cdc_state,omitempty"`
	DeleteNs         *DeleteNsRequest `protobuf:"bytes,14,opt,name=delete_ns,json=deleteNs,proto3" json:"delete_ns,omitempty"` // Used to delete namespace.
	// Skipping 15 as it is used for uint64 key in master and might be needed later here.
	StartTs uint64 `protobuf:"varint,16,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{25}
}

func (x *Proposal) GetMutations() *Mutations {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *Proposal) GetKv() []*pb.KV {
	if x != nil {
		return x.Kv
	}
	return nil
}

func (x *Proposal) GetState() *MembershipState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Proposal) GetCleanPredicate() string {
	if x != nil {
		return x.CleanPredicate
	}
	return ""
}

func (x *Proposal) GetDelta() *OracleDelta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *Proposal) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *Proposal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Proposal) GetExpectedChecksum() uint64 {
	if x != nil {
		return x.ExpectedChecksum
	}
	return 0
}

func (x *Proposal) GetRestore() *RestoreRequest {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *Proposal) GetCdcState() *CDCState {
	if x != nil {
		return x.CdcState
	}
	return nil
}

func (x *Proposal) GetDeleteNs() *DeleteNsRequest {
	if x != nil {
		return x.DeleteNs
	}
	return nil
}

func (x *Proposal) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

type CDCState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentTs uint64 `protobuf:"varint,1,opt,name=sent_ts,json=sentTs,proto3" json:"sent_ts,omitempty"`
}

func (x *CDCState) Reset() {
	*x = CDCState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCState) ProtoMessage() {}

func (x *CDCState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCState.ProtoReflect.Descriptor instead.
func (*CDCState) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{26}
}

func (x *CDCState) GetSentTs() uint64 {
	if x != nil {
		return x.SentTs
	}
	return 0
}

type KVS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// done used to indicate if the stream of KVS is over.
	Done bool `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	// predicates is the list of predicates known by the leader at the time of the
	// snapshot.
	Predicates []string `protobuf:"bytes,3,rep,name=predicates,proto3" json:"predicates,omitempty"`
	// types is the list of types known by the leader at the time of the snapshot.
	Types []string `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *KVS) Reset() {
	*x = KVS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVS) ProtoMessage() {}

func (x *KVS) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVS.ProtoReflect.Descriptor instead.
func (*KVS) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{27}
}

func (x *KVS) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *KVS) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *KVS) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *KVS) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

// Posting messages.
type Posting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint64              `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Value       []byte              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValType     Posting_ValType     `protobuf:"varint,3,opt,name=val_type,json=valType,proto3,enum=pb.Posting_ValType" json:"val_type,omitempty"`
	PostingType Posting_PostingType `protobuf:"varint,4,opt,name=posting_type,json=postingType,proto3,enum=pb.Posting_PostingType" json:"posting_type,omitempty"`
	LangTag     []byte              `protobuf:"bytes,5,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"` // Only set for VALUE_LANG
	Facets      []*api.Facet        `protobuf:"bytes,9,rep,name=facets,proto3" json:"facets,omitempty"`
	// TODO: op is only used temporarily. See if we can remove it from here.
	Op       uint32 `protobuf:"varint,12,opt,name=op,proto3" json:"op,omitempty"`
	StartTs  uint64 `protobuf:"varint,13,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`    // Meant to use only inmemory
	CommitTs uint64 `protobuf:"varint,14,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"` // Meant to use only inmemory
}

func (x *Posting) Reset() {
	*x = Posting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Posting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Posting) ProtoMessage() {}

func (x *Posting) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Posting.ProtoReflect.Descriptor instead.
func (*Posting) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{28}
}

func (x *Posting) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Posting) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Posting) GetValType() Posting_ValType {
	if x != nil {
		return x.ValType
	}
	return Posting_DEFAULT
}

func (x *Posting) GetPostingType() Posting_PostingType {
	if x != nil {
		return x.PostingType
	}
	return Posting_REF
}

func (x *Posting) GetLangTag() []byte {
	if x != nil {
		return x.LangTag
	}
	return nil
}

func (x *Posting) GetFacets() []*api.Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *Posting) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *Posting) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *Posting) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

type UidBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base uint64 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	// deltas contains the deltas encoded with Varints. We don't store deltas as a
	// list of integers, because when the PB is brought to memory, Go would always
	// use 8-bytes per integer. Instead, storing it as a byte slice is a lot
	// cheaper in memory.
	Deltas []byte `protobuf:"bytes,2,opt,name=deltas,proto3" json:"deltas,omitempty"`
	// num_uids is the number of UIDs in the block. We are including this because
	// we want to switch encoding to groupvarint encoding. Current avaialble open
	// source version implements encoding and decoding for uint32. To use that, we
	// create different blocks for different 32-bit MSB base uids. That is, if the
	// 32 MSBs are different, we will create a new block irrespective of whether
	// the block is filled with the block_size or not. Default Blocksize is 256 so
	// uint32 would be sufficient.
	NumUids uint32 `protobuf:"varint,3,opt,name=num_uids,json=numUids,proto3" json:"num_uids,omitempty"`
}

func (x *UidBlock) Reset() {
	*x = UidBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidBlock) ProtoMessage() {}

func (x *UidBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidBlock.ProtoReflect.Descriptor instead.
func (*UidBlock) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{29}
}

func (x *UidBlock) GetBase() uint64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *UidBlock) GetDeltas() []byte {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *UidBlock) GetNumUids() uint32 {
	if x != nil {
		return x.NumUids
	}
	return 0
}

type UidPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize uint32      `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Blocks    []*UidBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	AllocRef  uint64      `protobuf:"varint,23,opt,name=alloc_ref,json=allocRef,proto3" json:"alloc_ref,omitempty"` // This field should be set to 0 during marshal.
}

func (x *UidPack) Reset() {
	*x = UidPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidPack) ProtoMessage() {}

func (x *UidPack) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidPack.ProtoReflect.Descriptor instead.
func (*UidPack) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{30}
}

func (x *UidPack) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *UidPack) GetBlocks() []*UidBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *UidPack) GetAllocRef() uint64 {
	if x != nil {
		return x.AllocRef
	}
	return 0
}

type PostingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pack     *UidPack   `protobuf:"bytes,1,opt,name=pack,proto3" json:"pack,omitempty"` // Encoded list of uids in this posting list.
	Postings []*Posting `protobuf:"bytes,2,rep,name=postings,proto3" json:"postings,omitempty"`
	CommitTs uint64     `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"` // More inclination towards smaller values.
	Splits   []uint64   `protobuf:"varint,4,rep,packed,name=splits,proto3" json:"splits,omitempty"`
}

func (x *PostingList) Reset() {
	*x = PostingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostingList) ProtoMessage() {}

func (x *PostingList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostingList.ProtoReflect.Descriptor instead.
func (*PostingList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{31}
}

func (x *PostingList) GetPack() *UidPack {
	if x != nil {
		return x.Pack
	}
	return nil
}

func (x *PostingList) GetPostings() []*Posting {
	if x != nil {
		return x.Postings
	}
	return nil
}

func (x *PostingList) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *PostingList) GetSplits() []uint64 {
	if x != nil {
		return x.Splits
	}
	return nil
}

type FacetParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *FacetParam) Reset() {
	*x = FacetParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetParam) ProtoMessage() {}

func (x *FacetParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetParam.ProtoReflect.Descriptor instead.
func (*FacetParam) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{32}
}

func (x *FacetParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FacetParam) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type FacetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllKeys bool          `protobuf:"varint,1,opt,name=all_keys,json=allKeys,proto3" json:"all_keys,omitempty"` // keys should be in sorted order.
	Param   []*FacetParam `protobuf:"bytes,2,rep,name=param,proto3" json:"param,omitempty"`
}

func (x *FacetParams) Reset() {
	*x = FacetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetParams) ProtoMessage() {}

func (x *FacetParams) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetParams.ProtoReflect.Descriptor instead.
func (*FacetParams) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{33}
}

func (x *FacetParams) GetAllKeys() bool {
	if x != nil {
		return x.AllKeys
	}
	return false
}

func (x *FacetParams) GetParam() []*FacetParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type Facets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facets []*api.Facet `protobuf:"bytes,1,rep,name=facets,proto3" json:"facets,omitempty"`
}

func (x *Facets) Reset() {
	*x = Facets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facets) ProtoMessage() {}

func (x *Facets) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facets.ProtoReflect.Descriptor instead.
func (*Facets) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{34}
}

func (x *Facets) GetFacets() []*api.Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

type FacetsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacetsList []*Facets `protobuf:"bytes,1,rep,name=facets_list,json=facetsList,proto3" json:"facets_list,omitempty"`
}

func (x *FacetsList) Reset() {
	*x = FacetsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetsList) ProtoMessage() {}

func (x *FacetsList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetsList.ProtoReflect.Descriptor instead.
func (*FacetsList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{35}
}

func (x *FacetsList) GetFacetsList() []*Facets {
	if x != nil {
		return x.FacetsList
	}
	return nil
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the function : eq, le
	Key  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`   // Facet key over which to run the function.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"` // Arguments of the function.
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{36}
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Function) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// Op and Children are internal nodes and Func on leaves.
type FilterTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       string        `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	Children []*FilterTree `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	Func     *Function     `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
}

func (x *FilterTree) Reset() {
	*x = FilterTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTree) ProtoMessage() {}

func (x *FilterTree) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTree.ProtoReflect.Descriptor instead.
func (*FilterTree) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{37}
}

func (x *FilterTree) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *FilterTree) GetChildren() []*FilterTree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FilterTree) GetFunc() *Function {
	if x != nil {
		return x.Func
	}
	return nil
}

// Schema messages.
type SchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    uint32   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Predicates []string `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`
	// fields can be on of type, index, reverse or tokenizer
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	Types  []string `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *SchemaRequest) Reset() {
	*x = SchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRequest) ProtoMessage() {}

func (x *SchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRequest.ProtoReflect.Descriptor instead.
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{38}
}

func (x *SchemaRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SchemaRequest) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *SchemaRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SchemaRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type SchemaNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate  string             `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Type       string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Index      bool               `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Tokenizer  []string           `protobuf:"bytes,4,rep,name=tokenizer,proto3" json:"tokenizer,omitempty"`
	Reverse    bool               `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Count      bool               `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	List       bool               `protobuf:"varint,7,opt,name=list,proto3" json:"list,omitempty"`
	Upsert     bool               `protobuf:"varint,8,opt,name=upsert,proto3" json:"upsert,omitempty"`
	Lang       bool               `protobuf:"varint,9,opt,name=lang,proto3" json:"lang,omitempty"`
	NoConflict bool               `protobuf:"varint,10,opt,name=no_conflict,json=noConflict,proto3" json:"no_conflict,omitempty"`
	Unique     bool               `protobuf:"varint,11,opt,name=unique,proto3" json:"unique,omitempty"`
	IndexSpecs []*VectorIndexSpec `protobuf:"bytes,12,rep,name=index_specs,json=indexSpecs,proto3" json:"index_specs,omitempty"`
}

func (x *SchemaNode) Reset() {
	*x = SchemaNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaNode) ProtoMessage() {}

func (x *SchemaNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaNode.ProtoReflect.Descriptor instead.
func (*SchemaNode) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{39}
}

func (x *SchemaNode) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *SchemaNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SchemaNode) GetIndex() bool {
	if x != nil {
		return x.Index
	}
	return false
}

func (x *SchemaNode) GetTokenizer() []string {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

func (x *SchemaNode) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *SchemaNode) GetCount() bool {
	if x != nil {
		return x.Count
	}
	return false
}

func (x *SchemaNode) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *SchemaNode) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *SchemaNode) GetLang() bool {
	if x != nil {
		return x.Lang
	}
	return false
}

func (x *SchemaNode) GetNoConflict() bool {
	if x != nil {
		return x.NoConflict
	}
	return false
}

func (x *SchemaNode) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *SchemaNode) GetIndexSpecs() []*VectorIndexSpec {
	if x != nil {
		return x.IndexSpecs
	}
	return nil
}

type SchemaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in pb.proto.
	Schema []*SchemaNode `protobuf:"bytes,1,rep,name=schema,proto3" json:"schema,omitempty"`
}

func (x *SchemaResult) Reset() {
	*x = SchemaResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaResult) ProtoMessage() {}

func (x *SchemaResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaResult.ProtoReflect.Descriptor instead.
func (*SchemaResult) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{40}
}

// Deprecated: Marked as deprecated in pb.proto.
func (x *SchemaResult) GetSchema() []*SchemaNode {
	if x != nil {
		return x.Schema
	}
	return nil
}

type SchemaUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate string                 `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	ValueType Posting_ValType        `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=pb.Posting_ValType" json:"value_type,omitempty"`
	Directive SchemaUpdate_Directive `protobuf:"varint,3,opt,name=directive,proto3,enum=pb.SchemaUpdate_Directive" json:"directive,omitempty"`
	Tokenizer []string               `protobuf:"bytes,4,rep,name=tokenizer,proto3" json:"tokenizer,omitempty"`
	Count     bool                   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	List      bool                   `protobuf:"varint,6,opt,name=list,proto3" json:"list,omitempty"`
	Upsert    bool                   `protobuf:"varint,8,opt,name=upsert,proto3" json:"upsert,omitempty"`
	Lang      bool                   `protobuf:"varint,9,opt,name=lang,proto3" json:"lang,omitempty"`
	Unique    bool                   `protobuf:"varint,14,opt,name=unique,proto3" json:"unique,omitempty"`
	// Fields required for type system.
	NonNullable     bool `protobuf:"varint,10,opt,name=non_nullable,json=nonNullable,proto3" json:"non_nullable,omitempty"`
	NonNullableList bool `protobuf:"varint,11,opt,name=non_nullable_list,json=nonNullableList,proto3" json:"non_nullable_list,omitempty"`
	// If value_type is OBJECT, then this represents an object type with a
	// custom name. This field stores said name.
	ObjectTypeName string             `protobuf:"bytes,12,opt,name=object_type_name,json=objectTypeName,proto3" json:"object_type_name,omitempty"`
	NoConflict     bool               `protobuf:"varint,13,opt,name=no_conflict,json=noConflict,proto3" json:"no_conflict,omitempty"`
	IndexSpecs     []*VectorIndexSpec `protobuf:"bytes,15,rep,name=index_specs,json=indexSpecs,proto3" json:"index_specs,omitempty"`
}

func (x *SchemaUpdate) Reset() {
	*x = SchemaUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaUpdate) ProtoMessage() {}

func (x *SchemaUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaUpdate.ProtoReflect.Descriptor instead.
func (*SchemaUpdate) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{41}
}

func (x *SchemaUpdate) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *SchemaUpdate) GetValueType() Posting_ValType {
	if x != nil {
		return x.ValueType
	}
	return Posting_DEFAULT
}

func (x *SchemaUpdate) GetDirective() SchemaUpdate_Directive {
	if x != nil {
		return x.Directive
	}
	return SchemaUpdate_NONE
}

func (x *SchemaUpdate) GetTokenizer() []string {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

func (x *SchemaUpdate) GetCount() bool {
	if x != nil {
		return x.Count
	}
	return false
}

func (x *SchemaUpdate) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *SchemaUpdate) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *SchemaUpdate) GetLang() bool {
	if x != nil {
		return x.Lang
	}
	return false
}

func (x *SchemaUpdate) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *SchemaUpdate) GetNonNullable() bool {
	if x != nil {
		return x.NonNullable
	}
	return false
}

func (x *SchemaUpdate) GetNonNullableList() bool {
	if x != nil {
		return x.NonNullableList
	}
	return false
}

func (x *SchemaUpdate) GetObjectTypeName() string {
	if x != nil {
		return x.ObjectTypeName
	}
	return ""
}

func (x *SchemaUpdate) GetNoConflict() bool {
	if x != nil {
		return x.NoConflict
	}
	return false
}

func (x *SchemaUpdate) GetIndexSpecs() []*VectorIndexSpec {
	if x != nil {
		return x.IndexSpecs
	}
	return nil
}

type VectorIndexSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This names the kind of Vector Index, e.g.,
	//
	//	hnsw, lsh, hypertree, ...
	Name    string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options []*OptionPair `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *VectorIndexSpec) Reset() {
	*x = VectorIndexSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorIndexSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorIndexSpec) ProtoMessage() {}

func (x *VectorIndexSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorIndexSpec.ProtoReflect.Descriptor instead.
func (*VectorIndexSpec) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{42}
}

func (x *VectorIndexSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorIndexSpec) GetOptions() []*OptionPair {
	if x != nil {
		return x.Options
	}
	return nil
}

type OptionPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionPair) Reset() {
	*x = OptionPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionPair) ProtoMessage() {}

func (x *OptionPair) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionPair.ProtoReflect.Descriptor instead.
func (*OptionPair) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{43}
}

func (x *OptionPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OptionPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TypeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName string          `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Fields   []*SchemaUpdate `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TypeUpdate) Reset() {
	*x = TypeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeUpdate) ProtoMessage() {}

func (x *TypeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeUpdate.ProtoReflect.Descriptor instead.
func (*TypeUpdate) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{44}
}

func (x *TypeUpdate) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeUpdate) GetFields() []*SchemaUpdate {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MapHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionKeys [][]byte `protobuf:"bytes,1,rep,name=partition_keys,json=partitionKeys,proto3" json:"partition_keys,omitempty"`
}

func (x *MapHeader) Reset() {
	*x = MapHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapHeader) ProtoMessage() {}

func (x *MapHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapHeader.ProtoReflect.Descriptor instead.
func (*MapHeader) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{45}
}

func (x *MapHeader) GetPartitionKeys() [][]byte {
	if x != nil {
		return x.PartitionKeys
	}
	return nil
}

type MovePredicatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate        string `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	SourceGid        uint32 `protobuf:"varint,2,opt,name=source_gid,json=sourceGid,proto3" json:"source_gid,omitempty"`
	DestGid          uint32 `protobuf:"varint,3,opt,name=dest_gid,json=destGid,proto3" json:"dest_gid,omitempty"`
	TxnTs            uint64 `protobuf:"varint,4,opt,name=txn_ts,json=txnTs,proto3" json:"txn_ts,omitempty"`
	ExpectedChecksum uint64 `protobuf:"varint,5,opt,name=expected_checksum,json=expectedChecksum,proto3" json:"expected_checksum,omitempty"`
}

func (x *MovePredicatePayload) Reset() {
	*x = MovePredicatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePredicatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePredicatePayload) ProtoMessage() {}

func (x *MovePredicatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePredicatePayload.ProtoReflect.Descriptor instead.
func (*MovePredicatePayload) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{46}
}

func (x *MovePredicatePayload) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *MovePredicatePayload) GetSourceGid() uint32 {
	if x != nil {
		return x.SourceGid
	}
	return 0
}

func (x *MovePredicatePayload) GetDestGid() uint32 {
	if x != nil {
		return x.DestGid
	}
	return 0
}

func (x *MovePredicatePayload) GetTxnTs() uint64 {
	if x != nil {
		return x.TxnTs
	}
	return 0
}

func (x *MovePredicatePayload) GetExpectedChecksum() uint64 {
	if x != nil {
		return x.ExpectedChecksum
	}
	return 0
}

type TxnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs  uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs uint64 `protobuf:"varint,2,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
}

func (x *TxnStatus) Reset() {
	*x = TxnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnStatus) ProtoMessage() {}

func (x *TxnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnStatus.ProtoReflect.Descriptor instead.
func (*TxnStatus) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{47}
}

func (x *TxnStatus) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TxnStatus) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

type OracleDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txns           []*TxnStatus      `protobuf:"bytes,1,rep,name=txns,proto3" json:"txns,omitempty"`
	MaxAssigned    uint64            `protobuf:"varint,2,opt,name=max_assigned,json=maxAssigned,proto3" json:"max_assigned,omitempty"`
	GroupChecksums map[uint32]uint64 `protobuf:"bytes,3,rep,name=group_checksums,json=groupChecksums,proto3" json:"group_checksums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // implement tmax.
}

func (x *OracleDelta) Reset() {
	*x = OracleDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDelta) ProtoMessage() {}

func (x *OracleDelta) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDelta.ProtoReflect.Descriptor instead.
func (*OracleDelta) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{48}
}

func (x *OracleDelta) GetTxns() []*TxnStatus {
	if x != nil {
		return x.Txns
	}
	return nil
}

func (x *OracleDelta) GetMaxAssigned() uint64 {
	if x != nil {
		return x.MaxAssigned
	}
	return 0
}

func (x *OracleDelta) GetGroupChecksums() map[uint32]uint64 {
	if x != nil {
		return x.GroupChecksums
	}
	return nil
}

type TxnTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts []uint64 `protobuf:"varint,1,rep,packed,name=ts,proto3" json:"ts,omitempty"`
}

func (x *TxnTimestamps) Reset() {
	*x = TxnTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnTimestamps) ProtoMessage() {}

func (x *TxnTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnTimestamps.ProtoReflect.Descriptor instead.
func (*TxnTimestamps) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{49}
}

func (x *TxnTimestamps) GetTs() []uint64 {
	if x != nil {
		return x.Ts
	}
	return nil
}

type PeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PeerResponse) Reset() {
	*x = PeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerResponse) ProtoMessage() {}

func (x *PeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerResponse.ProtoReflect.Descriptor instead.
func (*PeerResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{50}
}

func (x *PeerResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type RaftBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *RaftContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Payload *api.Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RaftBatch) Reset() {
	*x = RaftBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftBatch) ProtoMessage() {}

func (x *RaftBatch) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftBatch.ProtoReflect.Descriptor instead.
func (*RaftBatch) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{51}
}

func (x *RaftBatch) GetContext() *RaftContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RaftBatch) GetPayload() *api.Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TabletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets []*Tablet `protobuf:"bytes,1,rep,name=tablets,proto3" json:"tablets,omitempty"`
}

func (x *TabletResponse) Reset() {
	*x = TabletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletResponse) ProtoMessage() {}

func (x *TabletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletResponse.ProtoReflect.Descriptor instead.
func (*TabletResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{52}
}

func (x *TabletResponse) GetTablets() []*Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type TabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets []*Tablet `protobuf:"bytes,1,rep,name=tablets,proto3" json:"tablets,omitempty"`
	GroupId uint32    `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TabletRequest) Reset() {
	*x = TabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletRequest) ProtoMessage() {}

func (x *TabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletRequest.ProtoReflect.Descriptor instead.
func (*TabletRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{53}
}

func (x *TabletRequest) GetTablets() []*Tablet {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *TabletRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes [][]byte    `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Matches  []*pb.Match `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{54}
}

func (x *SubscriptionRequest) GetPrefixes() [][]byte {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *SubscriptionRequest) GetMatches() []*pb.Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvs *pb.KVList `protobuf:"bytes,1,opt,name=kvs,proto3" json:"kvs,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{55}
}

func (x *SubscriptionResponse) GetKvs() *pb.KVList {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type Num struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val       uint64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	ReadOnly  bool   `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	Forwarded bool   `protobuf:"varint,3,opt,name=forwarded,proto3" json:"forwarded,omitempty"` // True if this request was forwarded by a peer.
	// If bump is set to true then we bump the lease to val. If false, we assign new ids with count
	// equal to val.
	Bump bool         `protobuf:"varint,5,opt,name=bump,proto3" json:"bump,omitempty"`
	Type NumLeaseType `protobuf:"varint,4,opt,name=type,proto3,enum=pb.NumLeaseType" json:"type,omitempty"`
}

func (x *Num) Reset() {
	*x = Num{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Num) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Num) ProtoMessage() {}

func (x *Num) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Num.ProtoReflect.Descriptor instead.
func (*Num) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{56}
}

func (x *Num) GetVal() uint64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *Num) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Num) GetForwarded() bool {
	if x != nil {
		return x.Forwarded
	}
	return false
}

func (x *Num) GetBump() bool {
	if x != nil {
		return x.Bump
	}
	return false
}

func (x *Num) GetType() NumLeaseType {
	if x != nil {
		return x.Type
	}
	return Num_NS_ID
}

type AssignedIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartId uint64 `protobuf:"varint,1,opt,name=startId,proto3" json:"startId,omitempty"`
	EndId   uint64 `protobuf:"varint,2,opt,name=endId,proto3" json:"endId,omitempty"`
	// The following is used for read only transactions.
	ReadOnly uint64 `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *AssignedIds) Reset() {
	*x = AssignedIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedIds) ProtoMessage() {}

func (x *AssignedIds) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedIds.ProtoReflect.Descriptor instead.
func (*AssignedIds) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{57}
}

func (x *AssignedIds) GetStartId() uint64 {
	if x != nil {
		return x.StartId
	}
	return 0
}

func (x *AssignedIds) GetEndId() uint64 {
	if x != nil {
		return x.EndId
	}
	return 0
}

func (x *AssignedIds) GetReadOnly() uint64 {
	if x != nil {
		return x.ReadOnly
	}
	return 0
}

type RemoveNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	GroupId uint32 `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *RemoveNodeRequest) Reset() {
	*x = RemoveNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeRequest) ProtoMessage() {}

func (x *RemoveNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeRequest.ProtoReflect.Descriptor instead.
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveNodeRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RemoveNodeRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type MoveTabletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace uint64 `protobuf:"varint,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Tablet    string `protobuf:"bytes,2,opt,name=tablet,proto3" json:"tablet,omitempty"`
	DstGroup  uint32 `protobuf:"varint,3,opt,name=dstGroup,proto3" json:"dstGroup,omitempty"`
}

func (x *MoveTabletRequest) Reset() {
	*x = MoveTabletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveTabletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTabletRequest) ProtoMessage() {}

func (x *MoveTabletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTabletRequest.ProtoReflect.Descriptor instead.
func (*MoveTabletRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{59}
}

func (x *MoveTabletRequest) GetNamespace() uint64 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

func (x *MoveTabletRequest) GetTablet() string {
	if x != nil {
		return x.Tablet
	}
	return ""
}

func (x *MoveTabletRequest) GetDstGroup() uint32 {
	if x != nil {
		return x.DstGroup
	}
	return 0
}

type ApplyLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []byte `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *ApplyLicenseRequest) Reset() {
	*x = ApplyLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyLicenseRequest) ProtoMessage() {}

func (x *ApplyLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyLicenseRequest.ProtoReflect.Descriptor instead.
func (*ApplyLicenseRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{60}
}

func (x *ApplyLicenseRequest) GetLicense() []byte {
	if x != nil {
		return x.License
	}
	return nil
}

type SnapshotMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTs uint64 `protobuf:"varint,1,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"`
	GroupId  uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SnapshotMeta) Reset() {
	*x = SnapshotMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotMeta) ProtoMessage() {}

func (x *SnapshotMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotMeta.ProtoReflect.Descriptor instead.
func (*SnapshotMeta) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{61}
}

func (x *SnapshotMeta) GetClientTs() uint64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *SnapshotMeta) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// Status describes a general status response.
// code: 0 = success, 0 != failure.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{62}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// Backups record all data from since_ts to read_ts.
// With incremental backups, the read_ts of the first backup becomes
// the since_ts of the second backup.
// Incremental backups can be disabled using the force_full field.
type BackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadTs       uint64 `protobuf:"varint,1,opt,name=read_ts,json=readTs,proto3" json:"read_ts,omitempty"`
	SinceTs      uint64 `protobuf:"varint,2,opt,name=since_ts,json=sinceTs,proto3" json:"since_ts,omitempty"`
	GroupId      uint32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UnixTs       string `protobuf:"bytes,4,opt,name=unix_ts,json=unixTs,proto3" json:"unix_ts,omitempty"`
	Destination  string `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	AccessKey    string `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey    string `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SessionToken string `protobuf:"bytes,8,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// True if no credentials should be used to access the S3 or minio bucket.
	// For example, when using a bucket with a public policy.
	Anonymous bool `protobuf:"varint,9,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	// The predicates to backup. All other predicates present in the group (e.g
	// stale data from a predicate move) will be ignored.
	Predicates []string `protobuf:"bytes,10,rep,name=predicates,proto3" json:"predicates,omitempty"`
	ForceFull  bool     `protobuf:"varint,11,opt,name=force_full,json=forceFull,proto3" json:"force_full,omitempty"`
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{63}
}

func (x *BackupRequest) GetReadTs() uint64 {
	if x != nil {
		return x.ReadTs
	}
	return 0
}

func (x *BackupRequest) GetSinceTs() uint64 {
	if x != nil {
		return x.SinceTs
	}
	return 0
}

func (x *BackupRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BackupRequest) GetUnixTs() string {
	if x != nil {
		return x.UnixTs
	}
	return ""
}

func (x *BackupRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *BackupRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *BackupRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *BackupRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *BackupRequest) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *BackupRequest) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *BackupRequest) GetForceFull() bool {
	if x != nil {
		return x.ForceFull
	}
	return false
}

type BackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropOperations []*DropOperation `protobuf:"bytes,1,rep,name=drop_operations,json=dropOperations,proto3" json:"drop_operations,omitempty"`
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{64}
}

func (x *BackupResponse) GetDropOperations() []*DropOperation {
	if x != nil {
		return x.DropOperations
	}
	return nil
}

type DropOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropOp DropOperation_DropOp `protobuf:"varint,1,opt,name=drop_op,json=dropOp,proto3,enum=pb.DropOperation_DropOp" json:"drop_op,omitempty"`
	// When drop_op is ATTR, drop_value will be the name of the ATTR; empty
	// otherwise.
	DropValue string `protobuf:"bytes,2,opt,name=drop_value,json=dropValue,proto3" json:"drop_value,omitempty"`
}

func (x *DropOperation) Reset() {
	*x = DropOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropOperation) ProtoMessage() {}

func (x *DropOperation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropOperation.ProtoReflect.Descriptor instead.
func (*DropOperation) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{65}
}

func (x *DropOperation) GetDropOp() DropOperation_DropOp {
	if x != nil {
		return x.DropOp
	}
	return DropOperation_ALL
}

func (x *DropOperation) GetDropValue() string {
	if x != nil {
		return x.DropValue
	}
	return ""
}

type ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // Group id to back up.
	ReadTs      uint64 `protobuf:"varint,2,opt,name=read_ts,json=readTs,proto3" json:"read_ts,omitempty"`
	UnixTs      int64  `protobuf:"varint,3,opt,name=unix_ts,json=unixTs,proto3" json:"unix_ts,omitempty"`
	Format      string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	Destination string `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	// These credentials are used to access the S3 or minio bucket.
	AccessKey    string `protobuf:"bytes,6,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey    string `protobuf:"bytes,7,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SessionToken string `protobuf:"bytes,8,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Anonymous    bool   `protobuf:"varint,9,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	Namespace    uint64 `protobuf:"varint,10,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{66}
}

func (x *ExportRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ExportRequest) GetReadTs() uint64 {
	if x != nil {
		return x.ReadTs
	}
	return 0
}

func (x *ExportRequest) GetUnixTs() int64 {
	if x != nil {
		return x.UnixTs
	}
	return 0
}

func (x *ExportRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ExportRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ExportRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ExportRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ExportRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *ExportRequest) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *ExportRequest) GetNamespace() uint64 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

type ExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 indicates a success, and a non-zero code indicates failure
	Code  int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Files []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ExportResponse) Reset() {
	*x = ExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResponse) ProtoMessage() {}

func (x *ExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResponse.ProtoReflect.Descriptor instead.
func (*ExportResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{67}
}

func (x *ExportResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ExportResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ExportResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

// A key stored in the format used for writing backups.
type BackupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      BackupKey_KeyType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.BackupKey_KeyType" json:"type,omitempty"`
	Attr      string            `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	Uid       uint64            `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	StartUid  uint64            `protobuf:"varint,4,opt,name=start_uid,json=startUid,proto3" json:"start_uid,omitempty"`
	Term      []byte            `protobuf:"bytes,5,opt,name=term,proto3" json:"term,omitempty"`
	Count     uint32            `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	Namespace uint64            `protobuf:"varint,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *BackupKey) Reset() {
	*x = BackupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupKey) ProtoMessage() {}

func (x *BackupKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupKey.ProtoReflect.Descriptor instead.
func (*BackupKey) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{68}
}

func (x *BackupKey) GetType() BackupKey_KeyType {
	if x != nil {
		return x.Type
	}
	return BackupKey_UNKNOWN
}

func (x *BackupKey) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *BackupKey) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BackupKey) GetStartUid() uint64 {
	if x != nil {
		return x.StartUid
	}
	return 0
}

func (x *BackupKey) GetTerm() []byte {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *BackupKey) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BackupKey) GetNamespace() uint64 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

// A posting list stored in the format used for writing backups.
type BackupPostingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids     []uint64   `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	Postings []*Posting `protobuf:"bytes,2,rep,name=postings,proto3" json:"postings,omitempty"`
	CommitTs uint64     `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Splits   []uint64   `protobuf:"varint,4,rep,packed,name=splits,proto3" json:"splits,omitempty"`
	UidBytes []byte     `protobuf:"bytes,5,opt,name=uid_bytes,json=uidBytes,proto3" json:"uid_bytes,omitempty"`
}

func (x *BackupPostingList) Reset() {
	*x = BackupPostingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupPostingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPostingList) ProtoMessage() {}

func (x *BackupPostingList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPostingList.ProtoReflect.Descriptor instead.
func (*BackupPostingList) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{69}
}

func (x *BackupPostingList) GetUids() []uint64 {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *BackupPostingList) GetPostings() []*Posting {
	if x != nil {
		return x.Postings
	}
	return nil
}

func (x *BackupPostingList) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *BackupPostingList) GetSplits() []uint64 {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *BackupPostingList) GetUidBytes() []byte {
	if x != nil {
		return x.UidBytes
	}
	return nil
}

type UpdateGraphQLSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs       uint64          `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	GraphqlSchema string          `protobuf:"bytes,2,opt,name=graphql_schema,json=graphqlSchema,proto3" json:"graphql_schema,omitempty"`
	DgraphPreds   []*SchemaUpdate `protobuf:"bytes,3,rep,name=dgraph_preds,json=dgraphPreds,proto3" json:"dgraph_preds,omitempty"`
	DgraphTypes   []*TypeUpdate   `protobuf:"bytes,4,rep,name=dgraph_types,json=dgraphTypes,proto3" json:"dgraph_types,omitempty"`
}

func (x *UpdateGraphQLSchemaRequest) Reset() {
	*x = UpdateGraphQLSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGraphQLSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGraphQLSchemaRequest) ProtoMessage() {}

func (x *UpdateGraphQLSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGraphQLSchemaRequest.ProtoReflect.Descriptor instead.
func (*UpdateGraphQLSchemaRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateGraphQLSchemaRequest) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *UpdateGraphQLSchemaRequest) GetGraphqlSchema() string {
	if x != nil {
		return x.GraphqlSchema
	}
	return ""
}

func (x *UpdateGraphQLSchemaRequest) GetDgraphPreds() []*SchemaUpdate {
	if x != nil {
		return x.DgraphPreds
	}
	return nil
}

func (x *UpdateGraphQLSchemaRequest) GetDgraphTypes() []*TypeUpdate {
	if x != nil {
		return x.DgraphTypes
	}
	return nil
}

type UpdateGraphQLSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UpdateGraphQLSchemaResponse) Reset() {
	*x = UpdateGraphQLSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGraphQLSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGraphQLSchemaResponse) ProtoMessage() {}

func (x *UpdateGraphQLSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGraphQLSchemaResponse.ProtoReflect.Descriptor instead.
func (*UpdateGraphQLSchemaResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateGraphQLSchemaResponse) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.DirectedEdge_Op", DirectedEdge_Op_name, DirectedEdge_Op_value)
	proto.RegisterEnum("pb.Mutations_DropOp", Mutations_DropOp_name, Mutations_DropOp_value)
	proto.RegisterEnum("pb.Metadata_HintType", Metadata_HintType_name, Metadata_HintType_value)
	proto.RegisterEnum("pb.Posting_ValType", Posting_ValType_name, Posting_ValType_value)
	proto.RegisterEnum("pb.Posting_PostingType", Posting_PostingType_name, Posting_PostingType_value)
	proto.RegisterEnum("pb.SchemaUpdate_Directive", SchemaUpdate_Directive_name, SchemaUpdate_Directive_value)
	proto.RegisterEnum("pb.NumLeaseType", NumLeaseType_name, NumLeaseType_value)
	proto.RegisterEnum("pb.DropOperation_DropOp", DropOperation_DropOp_name, DropOperation_DropOp_value)
	proto.RegisterEnum("pb.BackupKey_KeyType", BackupKey_KeyType_name, BackupKey_KeyType_value)
	proto.RegisterType((*List)(nil), "pb.List")
	proto.RegisterType((*TaskValue)(nil), "pb.TaskValue")
	proto.RegisterType((*SrcFunction)(nil), "pb.SrcFunction")
	proto.RegisterType((*Query)(nil), "pb.Query")
	proto.RegisterType((*ValueList)(nil), "pb.ValueList")
	proto.RegisterType((*LangList)(nil), "pb.LangList")
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterMapType((map[string]uint64)(nil), "pb.Result.VectorMetricsEntry")
	proto.RegisterType((*Order)(nil), "pb.Order")
	proto.RegisterType((*SortMessage)(nil), "pb.SortMessage")
	proto.RegisterType((*SortResult)(nil), "pb.SortResult")
	proto.RegisterType((*RaftContext)(nil), "pb.RaftContext")
	proto.RegisterType((*Member)(nil), "pb.Member")
	proto.RegisterType((*Group)(nil), "pb.Group")
	proto.RegisterMapType((map[uint64]*Member)(nil), "pb.Group.MembersEntry")
	proto.RegisterMapType((map[string]*Tablet)(nil), "pb.Group.TabletsEntry")
	proto.RegisterType((*License)(nil), "pb.License")
	proto.RegisterType((*ZeroProposal)(nil), "pb.ZeroProposal")
	proto.RegisterMapType((map[uint32]uint64)(nil), "pb.ZeroProposal.SnapshotTsEntry")
	proto.RegisterType((*MembershipState)(nil), "pb.MembershipState")
	proto.RegisterMapType((map[uint32]*Group)(nil), "pb.MembershipState.GroupsEntry")
	proto.RegisterMapType((map[uint64]*Member)(nil), "pb.MembershipState.ZerosEntry")
	proto.RegisterType((*ConnectionState)(nil), "pb.ConnectionState")
	proto.RegisterType((*HealthInfo)(nil), "pb.HealthInfo")
	proto.RegisterType((*Tablet)(nil), "pb.Tablet")
	proto.RegisterType((*DirectedEdge)(nil), "pb.DirectedEdge")
	proto.RegisterType((*Mutations)(nil), "pb.Mutations")
	proto.RegisterType((*Metadata)(nil), "pb.Metadata")
	proto.RegisterMapType((map[string]Metadata_HintType)(nil), "pb.Metadata.PredHintsEntry")
	proto.RegisterType((*Snapshot)(nil), "pb.Snapshot")
	proto.RegisterType((*ZeroSnapshot)(nil), "pb.ZeroSnapshot")
	proto.RegisterType((*RestoreRequest)(nil), "pb.RestoreRequest")
	proto.RegisterType((*Proposal)(nil), "pb.Proposal")
	proto.RegisterType((*CDCState)(nil), "pb.CDCState")
	proto.RegisterType((*KVS)(nil), "pb.KVS")
	proto.RegisterType((*Posting)(nil), "pb.Posting")
	proto.RegisterType((*UidBlock)(nil), "pb.UidBlock")
	proto.RegisterType((*UidPack)(nil), "pb.UidPack")
	proto.RegisterType((*PostingList)(nil), "pb.PostingList")
	proto.RegisterType((*FacetParam)(nil), "pb.FacetParam")
	proto.RegisterType((*FacetParams)(nil), "pb.FacetParams")
	proto.RegisterType((*Facets)(nil), "pb.Facets")
	proto.RegisterType((*FacetsList)(nil), "pb.FacetsList")
	proto.RegisterType((*Function)(nil), "pb.Function")
	proto.RegisterType((*FilterTree)(nil), "pb.FilterTree")
	proto.RegisterType((*SchemaRequest)(nil), "pb.SchemaRequest")
	proto.RegisterType((*SchemaNode)(nil), "pb.SchemaNode")
	proto.RegisterType((*SchemaResult)(nil), "pb.SchemaResult")
	proto.RegisterType((*SchemaUpdate)(nil), "pb.SchemaUpdate")
	proto.RegisterType((*VectorIndexSpec)(nil), "pb.VectorIndexSpec")
	proto.RegisterType((*OptionPair)(nil), "pb.OptionPair")
	proto.RegisterType((*TypeUpdate)(nil), "pb.TypeUpdate")
	proto.RegisterType((*MapHeader)(nil), "pb.MapHeader")
	proto.RegisterType((*MovePredicatePayload)(nil), "pb.MovePredicatePayload")
	proto.RegisterType((*TxnStatus)(nil), "pb.TxnStatus")
	proto.RegisterType((*OracleDelta)(nil), "pb.OracleDelta")
	proto.RegisterMapType((map[uint32]uint64)(nil), "pb.OracleDelta.GroupChecksumsEntry")
	proto.RegisterType((*TxnTimestamps)(nil), "pb.TxnTimestamps")
	proto.RegisterType((*PeerResponse)(nil), "pb.PeerResponse")
	proto.RegisterType((*RaftBatch)(nil), "pb.RaftBatch")
	proto.RegisterType((*TabletResponse)(nil), "pb.TabletResponse")
	proto.RegisterType((*TabletRequest)(nil), "pb.TabletRequest")
	proto.RegisterType((*SubscriptionRequest)(nil), "pb.SubscriptionRequest")
	proto.RegisterType((*SubscriptionResponse)(nil), "pb.SubscriptionResponse")
	proto.RegisterType((*Num)(nil), "pb.Num")
	proto.RegisterType((*AssignedIds)(nil), "pb.AssignedIds")
	proto.RegisterType((*RemoveNodeRequest)(nil), "pb.RemoveNodeRequest")
	proto.RegisterType((*MoveTabletRequest)(nil), "pb.MoveTabletRequest")
	proto.RegisterType((*ApplyLicenseRequest)(nil), "pb.ApplyLicenseRequest")
	proto.RegisterType((*SnapshotMeta)(nil), "pb.SnapshotMeta")
	proto.RegisterType((*Status)(nil), "pb.Status")
	proto.RegisterType((*BackupRequest)(nil), "pb.BackupRequest")
	proto.RegisterType((*BackupResponse)(nil), "pb.BackupResponse")
	proto.RegisterType((*DropOperation)(nil), "pb.DropOperation")
	proto.RegisterType((*ExportRequest)(nil), "pb.ExportRequest")
	proto.RegisterType((*ExportResponse)(nil), "pb.ExportResponse")
	proto.RegisterType((*BackupKey)(nil), "pb.BackupKey")
	proto.RegisterType((*BackupPostingList)(nil), "pb.BackupPostingList")
	proto.RegisterType((*UpdateGraphQLSchemaRequest)(nil), "pb.UpdateGraphQLSchemaRequest")
	proto.RegisterType((*UpdateGraphQLSchemaResponse)(nil), "pb.UpdateGraphQLSchemaResponse")
	proto.RegisterType((*BulkMeta)(nil), "pb.BulkMeta")
	proto.RegisterMapType((map[string]*SchemaUpdate)(nil), "pb.BulkMeta.SchemaMapEntry")
	proto.RegisterType((*DeleteNsRequest)(nil), "pb.DeleteNsRequest")
	proto.RegisterType((*TaskStatusRequest)(nil), "pb.TaskStatusRequest")
	proto.RegisterType((*TaskStatusResponse)(nil), "pb.TaskStatusResponse")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 5668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7b, 0x4b, 0x6f, 0x1c, 0x57,
	0x76, 0x30, 0xfb, 0xdd, 0x75, 0xfa, 0xc1, 0xe6, 0x95, 0x2c, 0xb7, 0x29, 0x4b, 0x94, 0xcb, 0x96,
	0x4d, 0x4b, 0x16, 0x25, 0xd1, 0x9e, 0xf9, 0xc6, 0x1e, 0x0c, 0x30, 0xa4, 0x48, 0xca, 0xb4, 0x28,
	0x92, 0x53, 0xdd, 0xd2, 0x3c, 0x80, 0xef, 0x6b, 0x14, 0xab, 0x2e, 0xc9, 0x1a, 0x56, 0x57, 0xd5,
	0x54, 0x55, 0x73, 0x48, 0xaf, 0xbe, 0x59, 0xcd, 0x26, 0x8b, 0x01, 0xb2, 0x0f, 0x06, 0xd9, 0x26,
	0xab, 0x20, 0x40, 0x82, 0x00, 0x59, 0x04, 0x08, 0x82, 0x41, 0x56, 0x93, 0x5d, 0x90, 0x49, 0x84,
	0xc0, 0x93, 0x95, 0x16, 0x01, 0xf2, 0x0b, 0x12, 0x9c, 0x73, 0x6e, 0xbd, 0x9a, 0xad, 0x87, 0x1d,
	0x64, 0x93, 0x55, 0xdf, 0x73, 0xee, 0xfb, 0xdc, 0xf3, 0x3e, 0xd5, 0xd0, 0x0c, 0x0e, 0x56, 0x82,
	0xd0, 0x8f, 0x7d, 0x51, 0x0e, 0x0e, 0x16, 0x35, 0x33, 0x70, 0x18, 0x5c, 0xbc, 0x75, 0xe4, 0xc4,
	0xc7, 0x93, 0x83, 0x15, 0xcb, 0x1f, 0xdf, 0xb5, 0x8f, 0x42, 0x33, 0x38, 0xbe, 0xe3, 0xf8, 0x77,
	0x0f, 0x4c, 0xfb, 0x48, 0x86, 0x77, 0x4f, 0x3f, 0xb9, 0x1b, 0x1c, 0xdc, 0x4d, 0xa6, 0x2e, 0xde,
	0xc9, 0x8d, 0x3d, 0xf2, 0x8f, 0xfc, 0xbb, 0x84, 0x3e, 0x98, 0x1c, 0x12, 0x44, 0x00, 0xb5, 0x78,
	0xb8, 0xbe, 0x08, 0xd5, 0x1d, 0x27, 0x8a, 0x85, 0x80, 0xea, 0xc4, 0xb1, 0xa3, 0x7e, 0xe9, 0x46,
	0x65, 0xb9, 0x6e, 0x50, 0x5b, 0x7f, 0x0c, 0xda, 0xd0, 0x8c, 0x4e, 0x9e, 0x9a, 0xee, 0x44, 0x8a,
	0x1e, 0x54, 0x4e, 0x4d, 0xb7, 0x5f, 0xba, 0x51, 0x5a, 0x6e, 0x1b, 0xd8, 0x14, 0x2b, 0xd0, 0x3c,
	0x35, 0xdd, 0x51, 0x7c, 0x1e, 0xc8, 0x7e, 0xf9, 0x46, 0x69, 0xb9, 0xbb, 0x7a, 0x69, 0x25, 0x38,
	0x58, 0xd9, 0xf7, 0xa3, 0xd8, 0xf1, 0x8e, 0x56, 0x9e, 0x9a, 0xee, 0xf0, 0x3c, 0x90, 0x46, 0xe3,
	0x94, 0x1b, 0xfa, 0x1e, 0xb4, 0x06, 0xa1, 0xb5, 0x35, 0xf1, 0xac, 0xd8, 0xf1, 0x3d, 0xdc, 0xd1,
	0x33, 0xc7, 0x92, 0x56, 0xd4, 0x0c, 0x6a, 0x23, 0xce, 0x0c, 0x8f, 0xa2, 0x7e, 0xe5, 0x46, 0x05,
	0x71, 0xd8, 0x16, 0x7d, 0x68, 0x38, 0xd1, 0x03, 0x7f, 0xe2, 0xc5, 0xfd, 0xea, 0x8d, 0xd2, 0x72,
	0xd3, 0x48, 0x40, 0xfd, 0x2f, 0x2a, 0x50, 0xfb, 0xc1, 0x44, 0x86, 0xe7, 0x34, 0x2f, 0x8e, 0xc3,
	0x64, 0x2d, 0x6c, 0x8b, 0xcb, 0x50, 0x73, 0x4d, 0xef, 0x28, 0xea, 0x97, 0x69, 0x31, 0x06, 0xc4,
	0x55, 0xd0, 0xcc, 0xc3, 0x58, 0x86, 0xa3, 0x89, 0x63, 0xf7, 0x2b, 0x37, 0x4a, 0xcb, 0x75, 0xa3,
	0x49, 0x88, 0x27, 0x8e, 0x2d, 0xde, 0x82, 0xa6, 0xed, 0x8f, 0xac, 0xfc, 0x5e, 0xb6, 0x4f, 0x7b,
	0x89, 0x77, 0xa1, 0x39, 0x71, 0xec, 0x91, 0xeb, 0x44, 0x71, 0xbf, 0x76, 0xa3, 0xb4, 0xdc, 0x5a,
	0x6d, 0xe2, 0x65, 0x91, 0x76, 0x46, 0x63, 0xe2, 0xd8, 0x44, 0xc4, 0x5b, 0xd0, 0x8c, 0x42, 0x6b,
	0x74, 0x38, 0xf1, 0xac, 0x7e, 0x9d, 0x06, 0xcd, 0xe3, 0xa0, 0xdc, 0xad, 0x8d, 0x46, 0xc4, 0x00,
	0x5e, 0x2b, 0x94, 0xa7, 0x32, 0x8c, 0x64, 0xbf, 0xc1, 0x5b, 0x29, 0x50, 0xdc, 0x83, 0xd6, 0xa1,
	0x69, 0xc9, 0x78, 0x14, 0x98, 0xa1, 0x39, 0xee, 0x37, 0xb3, 0x85, 0xb6, 0x10, 0xbd, 0x8f, 0xd8,
	0xc8, 0x80, 0xc3, 0x14, 0x10, 0x1f, 0x43, 0x87, 0xa0, 0x68, 0x74, 0xe8, 0xb8, 0xb1, 0x0c, 0xfb,
	0x1a, 0xcd, 0xe9, 0xd2, 0x1c, 0xc2, 0x0c, 0x43, 0x29, 0x8d, 0x36, 0x0f, 0x62, 0x8c, 0xb8, 0x06,
	0x20, 0xcf, 0x02, 0xd3, 0xb3, 0x47, 0xa6, 0xeb, 0xf6, 0x81, 0xce, 0xa0, 0x31, 0x66, 0xcd, 0x75,
	0xc5, 0x9b, 0x78, 0x3e, 0xd3, 0x1e, 0xc5, 0x51, 0xbf, 0x73, 0xa3, 0xb4, 0x5c, 0x35, 0xea, 0x08,
	0x0e, 0x23, 0xa4, 0xab, 0x65, 0x5a, 0xc7, 0xb2, 0xdf, 0xbd, 0x51, 0x5a, 0xae, 0x19, 0x0c, 0x20,
	0xf6, 0xd0, 0x09, 0xa3, 0xb8, 0x3f, 0xcf, 0x58, 0x02, 0xc4, 0x15, 0xa8, 0xfb, 0x87, 0x87, 0x91,
	0x8c, 0xfb, 0x3d, 0x42, 0x2b, 0x48, 0x5f, 0x05, 0x8d, 0xb8, 0x8a, 0xa8, 0x76, 0x13, 0xea, 0xa7,
	0x08, 0x30, 0xf3, 0xb5, 0x56, 0x3b, 0x78, 0xec, 0x94, 0xf1, 0x0c, 0xd5, 0xa9, 0x5f, 0x87, 0xe6,
	0x8e, 0xe9, 0x1d, 0x25, 0xdc, 0x8a, 0xcf, 0x49, 0x13, 0x34, 0x83, 0xda, 0xfa, 0xaf, 0x2b, 0x50,
	0x37, 0x64, 0x34, 0x71, 0x63, 0xf1, 0x01, 0x00, 0x3e, 0xd6, 0xd8, 0x8c, 0x43, 0xe7, 0x4c, 0xad,
	0x9a, 0x3d, 0x97, 0x36, 0x71, 0xec, 0xc7, 0xd4, 0x25, 0xee, 0x41, 0x9b, 0x56, 0x4f, 0x86, 0x96,
	0xb3, 0x03, 0xa4, 0xe7, 0x33, 0x5a, 0x34, 0x44, 0xcd, 0xb8, 0x02, 0x75, 0xe2, 0x0f, 0xe6, 0xd1,
	0x8e, 0xa1, 0x20, 0x71, 0x13, 0xba, 0x8e, 0x17, 0xe3, 0xfb, 0x59, 0xf1, 0xc8, 0x96, 0x51, 0xc2,
	0x40, 0x9d, 0x14, 0xbb, 0x21, 0xa3, 0x58, 0xdc, 0x07, 0x7e, 0x84, 0x64, 0xc3, 0x1a, 0x6d, 0xd8,
	0x4d, 0x1f, 0x37, 0xe2, 0x1d, 0x69, 0x8c, 0xda, 0xf1, 0x0e, 0xb4, 0xf0, 0x7e, 0xc9, 0x8c, 0x3a,
	0xcd, 0x68, 0xd3, 0x6d, 0x14, 0x39, 0x0c, 0xc0, 0x01, 0x6a, 0x38, 0x92, 0x06, 0x99, 0x94, 0x99,
	0x8a, 0xda, 0x62, 0x03, 0xba, 0xa7, 0xd2, 0x8a, 0xfd, 0x70, 0x34, 0x96, 0x71, 0xe8, 0x58, 0x51,
	0xbf, 0x49, 0xab, 0x5c, 0xc3, 0x55, 0x98, 0x66, 0x2b, 0x4f, 0x69, 0xc0, 0x63, 0xee, 0xdf, 0xf4,
	0xe2, 0xf0, 0xdc, 0xe8, 0x9c, 0xe6, 0x71, 0x8b, 0xdf, 0x07, 0x71, 0x71, 0x10, 0xea, 0x85, 0x13,
	0x79, 0xae, 0x24, 0x0f, 0x9b, 0xc8, 0x0a, 0x44, 0x31, 0x52, 0x0a, 0x55, 0x83, 0x81, 0xcf, 0xca,
	0xdf, 0x29, 0xe9, 0x9b, 0x50, 0xdb, 0x0b, 0x6d, 0x19, 0xce, 0x94, 0x57, 0x01, 0x55, 0x5b, 0x46,
	0x16, 0xcd, 0x6a, 0x1a, 0xd4, 0xce, 0x64, 0xb8, 0x92, 0x93, 0x61, 0xfd, 0x8f, 0x4a, 0xd0, 0x1a,
	0xf8, 0x61, 0xfc, 0x58, 0x46, 0x91, 0x79, 0x24, 0xc5, 0x12, 0xd4, 0x7c, 0x5c, 0x56, 0xbd, 0xb4,
	0x86, 0xb7, 0xa2, 0x7d, 0x0c, 0xc6, 0x4f, 0xf1, 0x43, 0xf9, 0xc5, 0xfc, 0x80, 0xbc, 0x4d, 0xd2,
	0x5f, 0x51, 0xbc, 0x4d, 0xb2, 0x9f, 0x71, 0x71, 0x35, 0xcf, 0xc5, 0x2f, 0x14, 0x11, 0xfd, 0x5b,
	0x00, 0x78, 0xbe, 0xaf, 0xc9, 0x8d, 0xfa, 0x2f, 0x4b, 0xd0, 0x32, 0xcc, 0xc3, 0xf8, 0x81, 0xef,
	0xc5, 0xf2, 0x2c, 0x16, 0x5d, 0x28, 0x3b, 0x36, 0xd1, 0xa8, 0x6e, 0x94, 0x1d, 0x1b, 0x4f, 0x77,
	0x14, 0xfa, 0x93, 0x80, 0x48, 0xd4, 0x31, 0x18, 0x20, 0x5a, 0xda, 0x76, 0x48, 0x47, 0x46, 0x5a,
	0xda, 0x76, 0x28, 0x96, 0xa0, 0x15, 0x79, 0x66, 0x10, 0x1d, 0xfb, 0x31, 0x9e, 0xae, 0x4a, 0xa7,
	0x83, 0x04, 0x35, 0x8c, 0x50, 0xf8, 0x9d, 0x68, 0xe4, 0x4a, 0x33, 0xf4, 0x64, 0x48, 0x0a, 0xad,
	0x69, 0x68, 0x4e, 0xb4, 0xc3, 0x08, 0xfd, 0x97, 0x15, 0xa8, 0x3f, 0x96, 0xe3, 0x03, 0x19, 0x5e,
	0x38, 0xc4, 0x3d, 0x68, 0xd2, 0xbe, 0x23, 0xc7, 0xe6, 0x73, 0xac, 0xbf, 0xf1, 0xfc, 0xd9, 0xd2,
	0x02, 0xe1, 0xb6, 0xed, 0x8f, 0xfc, 0xb1, 0x13, 0xcb, 0x71, 0x10, 0x9f, 0x1b, 0x0d, 0x85, 0x9a,
	0x79, 0xc0, 0x2b, 0x50, 0x77, 0xa5, 0x89, 0x6f, 0xc6, 0x62, 0xa2, 0x20, 0x71, 0x07, 0x1a, 0xe6,
	0x78, 0x64, 0x4b, 0xd3, 0xe6, 0x43, 0xad, 0x5f, 0x7e, 0xfe, 0x6c, 0xa9, 0x67, 0x8e, 0x37, 0xa4,
	0x99, 0x5f, 0xbb, 0xce, 0x18, 0xf1, 0x29, 0xca, 0x46, 0x14, 0x8f, 0x26, 0x81, 0x6d, 0xc6, 0x92,
	0x74, 0x6e, 0x75, 0xbd, 0xff, 0xfc, 0xd9, 0xd2, 0x65, 0x44, 0x3f, 0x21, 0x6c, 0x6e, 0x1a, 0x64,
	0x58, 0xd4, 0xbf, 0xc9, 0xf5, 0x95, 0xfe, 0x55, 0xa0, 0xd8, 0x86, 0x05, 0xcb, 0x9d, 0x44, 0x68,
	0x24, 0x1c, 0xef, 0xd0, 0x1f, 0xf9, 0x9e, 0x7b, 0x4e, 0x0f, 0xdc, 0x5c, 0xbf, 0xf6, 0xfc, 0xd9,
	0xd2, 0x5b, 0xaa, 0x73, 0xdb, 0x3b, 0xf4, 0xf7, 0x3c, 0xf7, 0x3c, 0xb7, 0xfe, 0xfc, 0x54, 0x97,
	0xf8, 0x3e, 0x74, 0x0f, 0xfd, 0xd0, 0x92, 0xa3, 0x94, 0x64, 0x5d, 0x5a, 0x67, 0xf1, 0xf9, 0xb3,
	0xa5, 0x2b, 0xd4, 0xf3, 0xf0, 0x02, 0xdd, 0xda, 0x79, 0xbc, 0xfe, 0x2f, 0x65, 0xa8, 0x51, 0x5b,
	0xdc, 0x83, 0xc6, 0x98, 0x9e, 0x24, 0xd1, 0x93, 0x57, 0x90, 0x87, 0xa8, 0x6f, 0x85, 0xdf, 0x4a,
	0x89, 0x6d, 0x32, 0x0c, 0x67, 0xc4, 0xe6, 0x81, 0x2b, 0xe3, 0x48, 0xf1, 0x7c, 0x6e, 0xc6, 0x90,
	0x3b, 0xd4, 0x0c, 0x35, 0x6c, 0x9a, 0x6f, 0x2a, 0x17, 0xf8, 0x66, 0x11, 0x9a, 0xd6, 0xb1, 0xb4,
	0x4e, 0xa2, 0xc9, 0x58, 0x71, 0x55, 0x0a, 0x8b, 0x77, 0xa1, 0x43, 0xed, 0xc0, 0x77, 0x3c, 0x9a,
	0x5e, 0xa3, 0x01, 0xed, 0x0c, 0x39, 0x8c, 0x16, 0xb7, 0xa0, 0x9d, 0x3f, 0x6c, 0x5e, 0x7d, 0x54,
	0x59, 0x7d, 0xdc, 0xc8, 0xab, 0x8f, 0xd6, 0x2a, 0xe0, 0x99, 0x79, 0x4a, 0x4e, 0x95, 0xe0, 0x3a,
	0xf9, 0x2b, 0xcc, 0x50, 0x43, 0xb3, 0xd6, 0xe1, 0x29, 0x79, 0x95, 0xe4, 0x43, 0x63, 0xc7, 0xb1,
	0xa4, 0x17, 0x91, 0xf3, 0x31, 0x89, 0x64, 0xaa, 0x94, 0xb0, 0x8d, 0xf7, 0x1d, 0x9b, 0x67, 0xbb,
	0xbe, 0x2d, 0x23, 0xa5, 0xce, 0x52, 0x18, 0xfb, 0xe4, 0x59, 0xe0, 0x84, 0xe7, 0x43, 0xa6, 0x54,
	0xc5, 0x48, 0x61, 0xe4, 0x2e, 0xe9, 0xe1, 0x66, 0x76, 0xe2, 0x48, 0x28, 0x50, 0xff, 0xd3, 0x2a,
	0xb4, 0x7f, 0x22, 0x43, 0x7f, 0x3f, 0xf4, 0x03, 0x3f, 0x32, 0x5d, 0xb1, 0x56, 0xa4, 0x39, 0xbf,
	0xed, 0x0d, 0x3c, 0x6d, 0x7e, 0xd8, 0xca, 0x20, 0x7d, 0x04, 0x7e, 0xb3, 0xfc, 0xab, 0xe8, 0x50,
	0xe7, 0x37, 0x9f, 0x41, 0x33, 0xd5, 0x83, 0x63, 0xf8, 0x95, 0xe9, 0xac, 0x45, 0x7a, 0xa8, 0x1e,
	0x94, 0xca, 0xb1, 0x79, 0xf6, 0x64, 0x7b, 0x43, 0xbd, 0xad, 0x82, 0x14, 0x15, 0x86, 0x67, 0xde,
	0x30, 0x79, 0xd4, 0x14, 0xc6, 0x9b, 0x22, 0x45, 0xa2, 0xed, 0x8d, 0x7e, 0x9b, 0xba, 0x12, 0x50,
	0xbc, 0x0d, 0xda, 0xd8, 0x3c, 0x43, 0x85, 0xb6, 0x6d, 0xb3, 0x68, 0x1a, 0x19, 0x42, 0xbc, 0x03,
	0x95, 0xf8, 0xcc, 0x23, 0xd9, 0x43, 0xef, 0x06, 0x9d, 0xdd, 0xe1, 0x99, 0xa7, 0x54, 0x9f, 0x81,
	0x7d, 0xf8, 0xa6, 0x96, 0x63, 0x93, 0x33, 0xa3, 0x19, 0xd8, 0x14, 0x37, 0xa1, 0xe1, 0xf2, 0x6b,
	0x91, 0xc3, 0xd2, 0x5a, 0x6d, 0xb1, 0x1e, 0x25, 0x94, 0x91, 0xf4, 0x89, 0x8f, 0xa0, 0x99, 0x50,
	0xa7, 0xdf, 0xa2, 0x71, 0xbd, 0x84, 0x9e, 0x09, 0x19, 0x8d, 0x74, 0x84, 0xb8, 0x07, 0x9a, 0x2d,
	0x5d, 0x19, 0xcb, 0x91, 0xc7, 0x8a, 0xbc, 0xc5, 0x8e, 0xec, 0x06, 0x21, 0x77, 0x23, 0x43, 0xfe,
	0x6c, 0x22, 0xa3, 0xd8, 0x68, 0xda, 0x0a, 0x21, 0xde, 0xcb, 0x04, 0xab, 0x4b, 0xcf, 0x95, 0x27,
	0x66, 0xd2, 0xb5, 0xf8, 0x3d, 0x98, 0x9f, 0x7a, 0xb4, 0x3c, 0x97, 0x76, 0x5e, 0x61, 0x2c, 0xbf,
	0xa8, 0x36, 0x9b, 0x3d, 0x4d, 0xff, 0x8f, 0x0a, 0xcc, 0x2b, 0x81, 0x39, 0x76, 0x82, 0x41, 0xac,
	0x54, 0x17, 0x19, 0x26, 0xc5, 0xab, 0x55, 0x23, 0x01, 0xc5, 0xff, 0x81, 0x3a, 0x69, 0x9a, 0x44,
	0xe0, 0x97, 0x32, 0x46, 0x48, 0xa7, 0xb3, 0x02, 0x50, 0x5c, 0xa4, 0x86, 0x8b, 0x4f, 0xa0, 0xf6,
	0xa5, 0x0c, 0x7d, 0x36, 0xb4, 0xad, 0xd5, 0xeb, 0xb3, 0xe6, 0x21, 0xf9, 0xd4, 0x34, 0x1e, 0xfc,
	0xdf, 0xe5, 0x17, 0xf8, 0x3a, 0xfc, 0xf2, 0x1e, 0x1a, 0xdb, 0xb1, 0x7f, 0x2a, 0xed, 0x7e, 0x23,
	0xa3, 0xb9, 0x62, 0xf2, 0xa4, 0x2b, 0x61, 0x99, 0xe6, 0x4c, 0x96, 0xd1, 0x5e, 0xcc, 0x32, 0x8b,
	0x1b, 0xd0, 0xca, 0xd1, 0x65, 0xc6, 0x43, 0x2d, 0x15, 0xd5, 0x89, 0x96, 0xaa, 0xd2, 0xbc, 0x56,
	0xda, 0x00, 0xc8, 0xa8, 0xf4, 0x4d, 0x75, 0x9b, 0xfe, 0x8b, 0x12, 0xcc, 0x3f, 0xf0, 0x3d, 0x4f,
	0x52, 0xc8, 0xc0, 0x6f, 0x9e, 0x89, 0x78, 0xe9, 0x85, 0x22, 0xfe, 0x21, 0xd4, 0x22, 0x1c, 0xac,
	0x56, 0xbf, 0x34, 0xe3, 0x11, 0x0d, 0x1e, 0x81, 0x8a, 0x7e, 0x6c, 0x9e, 0x8d, 0x02, 0xe9, 0xd9,
	0x8e, 0x77, 0x94, 0x28, 0xfa, 0xb1, 0x79, 0xb6, 0xcf, 0x18, 0xfd, 0x2f, 0xcb, 0x00, 0x9f, 0x4b,
	0xd3, 0x8d, 0x8f, 0xd1, 0x98, 0xe1, 0x8b, 0x3a, 0x5e, 0x14, 0x9b, 0x9e, 0x95, 0x04, 0x6c, 0x29,
	0x8c, 0x2f, 0x8a, 0x36, 0x5d, 0x46, 0xac, 0x22, 0x35, 0x23, 0x01, 0x91, 0x3f, 0x70, 0xbb, 0x49,
	0xa4, 0x6c, 0xbf, 0x82, 0x32, 0x47, 0xa6, 0x4a, 0x68, 0xe5, 0xc8, 0xf4, 0xa1, 0x81, 0x01, 0x90,
	0xe3, 0x7b, 0xc4, 0x34, 0x9a, 0x91, 0x80, 0xb8, 0xce, 0x24, 0x88, 0x9d, 0x31, 0x5b, 0xf8, 0x8a,
	0xa1, 0x20, 0x3c, 0x15, 0x5a, 0xf4, 0x4d, 0xeb, 0xd8, 0x27, 0x45, 0x52, 0x31, 0x52, 0x18, 0x57,
	0xf3, 0xbd, 0x23, 0x1f, 0x6f, 0xd7, 0x24, 0xe7, 0x31, 0x01, 0xf9, 0x2e, 0xb6, 0x3c, 0xc3, 0x2e,
	0x8d, 0xba, 0x52, 0x18, 0xe9, 0x22, 0xe5, 0xe8, 0x50, 0x9a, 0xf1, 0x24, 0x94, 0x51, 0x1f, 0xa8,
	0x1b, 0xa4, 0xdc, 0x52, 0x18, 0xf1, 0x0e, 0xb4, 0x91, 0x70, 0x66, 0x14, 0x39, 0x47, 0x9e, 0xb4,
	0x49, 0xbd, 0x54, 0x0d, 0x24, 0xe6, 0x9a, 0x42, 0xe9, 0x7f, 0x5d, 0x86, 0x3a, 0xeb, 0x82, 0x82,
	0xb3, 0x54, 0x7a, 0x2d, 0x67, 0xe9, 0x6d, 0xd0, 0x82, 0x50, 0xda, 0x8e, 0x95, 0xbc, 0xa3, 0x66,
	0x64, 0x08, 0x8a, 0xb2, 0xd0, 0x3b, 0x20, 0x7a, 0x36, 0x0d, 0x06, 0x84, 0x0e, 0x1d, 0xdf, 0x1b,
	0xd9, 0x4e, 0x74, 0x32, 0x3a, 0x38, 0x8f, 0x65, 0xa4, 0x68, 0xd1, 0xf2, 0xbd, 0x0d, 0x27, 0x3a,
	0x59, 0x47, 0x14, 0x92, 0x90, 0x65, 0x84, 0x64, 0xa3, 0x69, 0x28, 0x48, 0x7c, 0x0c, 0x1a, 0xf9,
	0xb0, 0xe4, 0xe4, 0x68, 0xe4, 0x9c, 0x5c, 0x79, 0xfe, 0x6c, 0x49, 0x20, 0x72, 0xca, 0xbb, 0x69,
	0x26, 0x38, 0xf4, 0xd2, 0x70, 0x32, 0x9a, 0x2b, 0x92, 0x61, 0xf6, 0xd2, 0x10, 0x35, 0x8c, 0xf2,
	0x5e, 0x1a, 0x63, 0xc4, 0x1d, 0x10, 0x13, 0xcf, 0xf2, 0xc7, 0x01, 0x32, 0x85, 0xb4, 0xd5, 0x21,
	0x5b, 0x74, 0xc8, 0x85, 0x7c, 0x0f, 0x1d, 0x55, 0xff, 0xe7, 0x32, 0xb4, 0x37, 0x9c, 0x50, 0x5a,
	0xb1, 0xb4, 0x37, 0xed, 0x23, 0x89, 0x67, 0x97, 0x5e, 0xec, 0xc4, 0xe7, 0xca, 0x0d, 0x55, 0x50,
	0x1a, 0x45, 0x94, 0x8b, 0x51, 0x3f, 0x4b, 0x58, 0x85, 0x12, 0x15, 0x0c, 0x88, 0x55, 0x00, 0x8e,
	0xf3, 0x28, 0x59, 0x51, 0x7d, 0x71, 0xb2, 0x42, 0xa3, 0x61, 0xd8, 0x14, 0x6f, 0x51, 0x7a, 0x63,
	0x22, 0xf1, 0xed, 0x6a, 0xb4, 0x6f, 0x83, 0x60, 0xf6, 0x68, 0x29, 0xfc, 0x6c, 0xf0, 0xc6, 0xd8,
	0x16, 0xef, 0x42, 0xd9, 0x0f, 0x88, 0xb8, 0x6a, 0xe9, 0xfc, 0x15, 0x56, 0xf6, 0x02, 0xa3, 0xec,
	0x07, 0x28, 0xc5, 0x1c, 0x83, 0x13, 0xe3, 0xa1, 0x14, 0xa3, 0xdd, 0xa3, 0xc8, 0xcf, 0x50, 0x3d,
	0x42, 0x87, 0xb6, 0xe9, 0xba, 0xfe, 0xcf, 0xa5, 0xbd, 0x1f, 0x4a, 0x3b, 0xe1, 0xc1, 0x02, 0x0e,
	0xb9, 0xc4, 0x33, 0xc7, 0x32, 0x0a, 0x4c, 0x4b, 0x2a, 0x16, 0xcc, 0x10, 0xfa, 0x15, 0x28, 0xef,
	0x05, 0xa2, 0x01, 0x95, 0xc1, 0xe6, 0xb0, 0x37, 0x87, 0x8d, 0x8d, 0xcd, 0x9d, 0x1e, 0x5a, 0x94,
	0x7a, 0xaf, 0xa1, 0x7f, 0x55, 0x06, 0xed, 0xf1, 0x24, 0x36, 0x51, 0xb7, 0x44, 0x78, 0xcb, 0x22,
	0x87, 0x66, 0xac, 0xf8, 0x16, 0x34, 0xa3, 0xd8, 0x0c, 0xc9, 0x2b, 0x61, 0xeb, 0xd4, 0x20, 0x78,
	0x18, 0x89, 0xf7, 0xa1, 0x26, 0xed, 0x23, 0x99, 0x98, 0x8b, 0xde, 0xf4, 0x7d, 0x0d, 0xee, 0x16,
	0xcb, 0x50, 0x8f, 0xac, 0x63, 0x39, 0x36, 0xfb, 0xd5, 0x6c, 0xe0, 0x80, 0x30, 0xec, 0x86, 0x1b,
	0xaa, 0x5f, 0xbc, 0x07, 0x35, 0x7c, 0x9b, 0x48, 0xc5, 0xb7, 0x14, 0x11, 0xe3, 0x33, 0xa8, 0x61,
	0xdc, 0x89, 0x8c, 0x67, 0x87, 0x7e, 0x30, 0xf2, 0x03, 0xa2, 0x7d, 0x77, 0xf5, 0x32, 0xe9, 0xb8,
	0xe4, 0x36, 0x2b, 0x1b, 0xa1, 0x1f, 0xec, 0x05, 0x46, 0xdd, 0xa6, 0x5f, 0x8c, 0x72, 0x68, 0x38,
	0x73, 0x04, 0x1b, 0x05, 0x0d, 0x31, 0x9c, 0xd2, 0x5a, 0x86, 0xe6, 0x58, 0xc6, 0xa6, 0x6d, 0xc6,
	0xa6, 0xb2, 0x0d, 0x6d, 0x56, 0x99, 0x8c, 0x33, 0xd2, 0x5e, 0xfd, 0x2e, 0xd4, 0x79, 0x69, 0xd1,
	0x84, 0xea, 0xee, 0xde, 0xee, 0x26, 0x93, 0x75, 0x6d, 0x67, 0xa7, 0x57, 0x42, 0xd4, 0xc6, 0xda,
	0x70, 0xad, 0x57, 0xc6, 0xd6, 0xf0, 0xc7, 0xfb, 0x9b, 0xbd, 0x8a, 0xfe, 0xf7, 0x25, 0x68, 0x26,
	0xeb, 0x88, 0xcf, 0x00, 0x50, 0x84, 0x47, 0xc7, 0x8e, 0x97, 0x3a, 0x78, 0x57, 0xf3, 0x3b, 0xad,
	0xe0, 0xab, 0x7e, 0x8e, 0xbd, 0x6c, 0x5e, 0x49, 0xe2, 0x09, 0x5e, 0x1c, 0x40, 0xb7, 0xd8, 0x39,
	0xc3, 0xd3, 0xbd, 0x9d, 0xb7, 0x2a, 0xdd, 0xd5, 0x37, 0x0a, 0x4b, 0xe3, 0x4c, 0x62, 0xed, 0x9c,
	0x81, 0xb9, 0x03, 0xcd, 0x04, 0x2d, 0x5a, 0xd0, 0xd8, 0xd8, 0xdc, 0x5a, 0x7b, 0xb2, 0x83, 0xac,
	0x02, 0x50, 0x1f, 0x6c, 0xef, 0x3e, 0xdc, 0xd9, 0xe4, 0x6b, 0xed, 0x6c, 0x0f, 0x86, 0xbd, 0xb2,
	0xfe, 0x87, 0x25, 0x68, 0x26, 0x9e, 0x8c, 0xf8, 0x10, 0x9d, 0x0f, 0x72, 0xd2, 0x94, 0x25, 0xa2,
	0xcc, 0x54, 0x2e, 0x6c, 0x35, 0x92, 0x7e, 0x94, 0x45, 0x52, 0xac, 0x89, 0x6f, 0x43, 0x40, 0x3e,
	0x6a, 0xae, 0x14, 0x12, 0x4b, 0x02, 0xaa, 0xb6, 0xef, 0x49, 0xe5, 0x30, 0x53, 0x9b, 0x78, 0xd0,
	0xf1, 0x2c, 0x99, 0x85, 0x13, 0x0d, 0x82, 0x87, 0x91, 0x1e, 0xb3, 0x1f, 0x9d, 0x1e, 0x2c, 0xdd,
	0xad, 0x94, 0xdf, 0xed, 0x42, 0x50, 0x52, 0xbe, 0x18, 0x94, 0x64, 0x86, 0xb3, 0xf6, 0x2a, 0xc3,
	0xa9, 0xff, 0xa2, 0x0e, 0x5d, 0x43, 0x46, 0xb1, 0x1f, 0x4a, 0xe5, 0x17, 0xbe, 0x4c, 0x84, 0xae,
	0x01, 0x84, 0x3c, 0x38, 0xdb, 0x5a, 0x53, 0x18, 0x8e, 0xa6, 0x5c, 0xdf, 0x22, 0xde, 0x55, 0x16,
	0x32, 0x85, 0xc5, 0x55, 0xd0, 0x0e, 0x4c, 0xeb, 0x84, 0x97, 0x65, 0x3b, 0xd9, 0x64, 0x04, 0xaf,
	0x6b, 0x5a, 0x96, 0x8c, 0xa2, 0x11, 0xb2, 0x02, 0x5b, 0x4b, 0x8d, 0x31, 0x8f, 0xe4, 0xb9, 0xb8,
	0x07, 0x10, 0x49, 0x2b, 0x94, 0x31, 0x75, 0xa3, 0xcd, 0xd4, 0xd6, 0x17, 0x7e, 0xf3, 0x6c, 0x69,
	0xee, 0x9f, 0x9e, 0x2d, 0x69, 0x03, 0xe9, 0x45, 0x4e, 0xec, 0x9c, 0x4a, 0x43, 0xe3, 0x41, 0x38,
	0xe3, 0xdb, 0xd0, 0x89, 0x64, 0x84, 0xc6, 0x76, 0x14, 0xfb, 0x27, 0x92, 0xfd, 0xf2, 0x99, 0x93,
	0xda, 0x6a, 0xdc, 0x10, 0x87, 0xa1, 0x22, 0x32, 0x3d, 0xdf, 0x3b, 0x1f, 0xfb, 0x93, 0x48, 0x59,
	0x96, 0x0c, 0x21, 0x56, 0xe0, 0x92, 0xf4, 0xac, 0xf0, 0x3c, 0xc0, 0x1b, 0xe1, 0x59, 0x46, 0x87,
	0x8e, 0x2b, 0x95, 0x43, 0xbf, 0x90, 0x75, 0x3d, 0x92, 0xe7, 0x5b, 0x8e, 0x2b, 0xf1, 0x5a, 0xa7,
	0xe6, 0xc4, 0x8d, 0x47, 0x94, 0x2f, 0x00, 0xbe, 0x16, 0x61, 0xd6, 0x6c, 0x3b, 0x14, 0xb7, 0x60,
	0x81, 0xbb, 0x43, 0xdf, 0x95, 0x8e, 0xcd, 0x8b, 0xb5, 0x68, 0xd4, 0x3c, 0x75, 0x18, 0x84, 0xa7,
	0xa5, 0x56, 0xe0, 0x12, 0x8f, 0xe5, 0x3b, 0x26, 0xa3, 0xdb, 0xbc, 0x35, 0x75, 0x0d, 0x54, 0x4f,
	0x71, 0xeb, 0xc0, 0x8c, 0x8f, 0x29, 0x0a, 0x48, 0xb6, 0xde, 0x37, 0xe3, 0x63, 0xf4, 0x0b, 0xb8,
	0xfb, 0xd0, 0x91, 0x2e, 0x47, 0xf1, 0x9a, 0xc1, 0x33, 0xb6, 0x10, 0x83, 0x7e, 0x81, 0x1a, 0xe0,
	0x87, 0x63, 0x93, 0xd3, 0xa0, 0x9a, 0xc1, 0x93, 0xb6, 0x08, 0x85, 0x5b, 0xa8, 0x17, 0xf5, 0x26,
	0x63, 0x4a, 0x88, 0x56, 0x0d, 0xf5, 0xc6, 0xbb, 0x93, 0xb1, 0xf8, 0x10, 0x7a, 0x8e, 0x67, 0x85,
	0x72, 0x2c, 0xbd, 0xd8, 0x74, 0x47, 0x87, 0xa1, 0x3f, 0xee, 0x2f, 0xd0, 0xa0, 0xf9, 0x1c, 0x7e,
	0x2b, 0xf4, 0xc7, 0x2a, 0x7b, 0x13, 0x98, 0x61, 0xec, 0x98, 0x6e, 0x5f, 0x24, 0xd9, 0x9b, 0x7d,
	0x46, 0x88, 0xf7, 0xa0, 0x83, 0xb3, 0x77, 0x53, 0x0b, 0x71, 0x89, 0x96, 0x29, 0x22, 0xc5, 0x77,
	0xe0, 0x4d, 0x27, 0x4a, 0xc1, 0xb5, 0x9f, 0x9b, 0xc8, 0xd1, 0xc4, 0x99, 0xfd, 0xcb, 0xb4, 0xe2,
	0x8b, 0xba, 0xf5, 0xe7, 0x15, 0x68, 0xa6, 0xe1, 0xeb, 0x6d, 0xd0, 0xc6, 0x89, 0xfe, 0x55, 0x8e,
	0x67, 0xa7, 0xa0, 0x94, 0x8d, 0xac, 0x5f, 0x5c, 0x83, 0xf2, 0xc9, 0xa9, 0xb2, 0x05, 0x9d, 0x15,
	0x2e, 0x60, 0x04, 0x07, 0x9f, 0xac, 0x3c, 0x7a, 0x6a, 0x94, 0x4f, 0x4e, 0xbf, 0x86, 0x1c, 0x8a,
	0x0f, 0x60, 0xde, 0x72, 0xa5, 0xe9, 0x8d, 0x32, 0x6f, 0x89, 0xf8, 0xdc, 0xe8, 0x12, 0x7a, 0x3f,
	0x75, 0x99, 0x6e, 0x42, 0xcd, 0x96, 0x6e, 0x6c, 0xe6, 0xf3, 0xe8, 0x7b, 0xa1, 0x69, 0xb9, 0x72,
	0x03, 0xd1, 0x06, 0xf7, 0xa2, 0x2d, 0x48, 0x43, 0xc6, 0x9c, 0x2d, 0x98, 0x11, 0x2e, 0xa6, 0x7a,
	0x06, 0xf2, 0x7a, 0xe6, 0x36, 0x2c, 0xc8, 0xb3, 0x80, 0x0c, 0xe0, 0x28, 0xcd, 0x90, 0xb0, 0x65,
	0xee, 0x25, 0x1d, 0x0f, 0x92, 0x4c, 0xc9, 0x47, 0xa8, 0x02, 0x99, 0xd4, 0x6d, 0xda, 0x4b, 0xa8,
	0x44, 0x6c, 0x4e, 0xad, 0x18, 0xc9, 0x10, 0xf1, 0x21, 0x68, 0x96, 0x6d, 0x8d, 0x98, 0x32, 0x9d,
	0xec, 0x6c, 0x0f, 0x36, 0x1e, 0x30, 0x49, 0x9a, 0x96, 0x6d, 0x71, 0x94, 0x50, 0x08, 0x65, 0xbb,
	0xaf, 0x13, 0xca, 0xe6, 0x8d, 0x7c, 0xaf, 0x60, 0xe4, 0xbf, 0xa8, 0x36, 0x1b, 0xbd, 0xa6, 0xfe,
	0x2e, 0x34, 0x93, 0x8d, 0x50, 0x75, 0x47, 0xd2, 0x53, 0x69, 0x0a, 0x52, 0xdd, 0x08, 0x0e, 0x23,
	0xdd, 0x82, 0xca, 0xa3, 0xa7, 0x03, 0xd2, 0xe0, 0x68, 0x4c, 0x6b, 0xe4, 0x7b, 0x51, 0x3b, 0xd5,
	0xea, 0xe5, 0x9c, 0x56, 0xbf, 0xce, 0x06, 0x91, 0x1e, 0x28, 0xc9, 0xed, 0xe6, 0x30, 0x48, 0x62,
	0x76, 0x06, 0xaa, 0x9c, 0xf6, 0x25, 0x40, 0xff, 0xff, 0x55, 0x68, 0x28, 0x7f, 0x0d, 0x8d, 0xe0,
	0x24, 0x4d, 0x4b, 0x62, 0xb3, 0x18, 0x48, 0xa7, 0x8e, 0x5f, 0xbe, 0x46, 0x55, 0x79, 0x75, 0x8d,
	0x4a, 0x7c, 0x06, 0xed, 0x80, 0xfb, 0xf2, 0xae, 0xe2, 0x9b, 0xf9, 0x39, 0xea, 0x97, 0xe6, 0xb5,
	0x82, 0x0c, 0x40, 0x52, 0x52, 0xa2, 0x3e, 0x36, 0x8f, 0x14, 0x05, 0x1a, 0x08, 0x0f, 0xcd, 0xa3,
	0xd7, 0xf2, 0xfb, 0xba, 0xe4, 0x40, 0xb6, 0xc9, 0x80, 0xa0, 0xaf, 0x98, 0x7f, 0x99, 0x4e, 0xd1,
	0xfd, 0xba, 0x0a, 0x9a, 0xe5, 0x8f, 0xc7, 0x0e, 0xf5, 0x75, 0x55, 0x1a, 0x8e, 0x10, 0xc3, 0x48,
	0xff, 0x75, 0x09, 0x1a, 0xea, 0x5e, 0x17, 0x8c, 0xfb, 0xfa, 0xf6, 0xee, 0x9a, 0xf1, 0xe3, 0x5e,
	0x09, 0x9d, 0x97, 0xed, 0xdd, 0x61, 0xaf, 0x2c, 0x34, 0xa8, 0x6d, 0xed, 0xec, 0xad, 0x0d, 0x7b,
	0x15, 0x34, 0xf8, 0xeb, 0x7b, 0x7b, 0x3b, 0xbd, 0xaa, 0x68, 0x43, 0x73, 0x63, 0x6d, 0xb8, 0x39,
	0xdc, 0x7e, 0xbc, 0xd9, 0xab, 0xe1, 0xd8, 0x87, 0x9b, 0x7b, 0xbd, 0x3a, 0x36, 0x9e, 0x6c, 0x6f,
	0xf4, 0x1a, 0xd8, 0xbf, 0xbf, 0x36, 0x18, 0xfc, 0x70, 0xcf, 0xd8, 0xe8, 0x35, 0xc9, 0x69, 0x18,
	0x1a, 0xdb, 0xbb, 0x0f, 0x7b, 0x1a, 0xb6, 0xf7, 0xd6, 0xbf, 0xd8, 0x7c, 0x30, 0xec, 0x01, 0x8e,
	0x5a, 0xdf, 0x7e, 0xc8, 0xab, 0xb7, 0xb0, 0xe7, 0x29, 0xb7, 0xdb, 0xfa, 0x7d, 0x68, 0xe5, 0xa8,
	0x88, 0xeb, 0x1a, 0x9b, 0x5b, 0xbd, 0x39, 0x3c, 0xcc, 0xd3, 0xb5, 0x9d, 0x27, 0xe8, 0x7d, 0x74,
	0x01, 0xa8, 0x39, 0xda, 0x59, 0xdb, 0x7d, 0xd8, 0x2b, 0x2b, 0xdf, 0xf5, 0x07, 0xd0, 0x7c, 0xe2,
	0xd8, 0xeb, 0xae, 0x6f, 0x9d, 0x20, 0x63, 0x1d, 0x98, 0x91, 0x54, 0x9c, 0x48, 0x6d, 0x8c, 0x14,
	0x48, 0x9c, 0x23, 0xc5, 0x05, 0x0a, 0x42, 0x5a, 0x7a, 0x93, 0xf1, 0x88, 0x2a, 0x9c, 0x15, 0x36,
	0xd1, 0xde, 0x64, 0xfc, 0xc4, 0xb1, 0x23, 0xfd, 0x04, 0x1a, 0x4f, 0x1c, 0x7b, 0xdf, 0xb4, 0x4e,
	0x48, 0x41, 0xe3, 0xd2, 0xa3, 0xc8, 0xf9, 0x52, 0x2a, 0x53, 0xae, 0x11, 0x66, 0xe0, 0x7c, 0x29,
	0xc5, 0x7b, 0x50, 0x27, 0x20, 0x49, 0xae, 0x90, 0x10, 0x26, 0xc7, 0x31, 0x54, 0x1f, 0x15, 0x18,
	0x5d, 0xd7, 0xb7, 0x46, 0xa1, 0x3c, 0xec, 0xbf, 0xc9, 0x6f, 0x43, 0x08, 0x43, 0x1e, 0xea, 0x7f,
	0x50, 0x4a, 0x6f, 0x4e, 0x75, 0xac, 0x25, 0xa8, 0x06, 0xa6, 0x75, 0xa2, 0x3c, 0xa9, 0x96, 0x5a,
	0x10, 0x0f, 0x63, 0x50, 0x87, 0xf8, 0x00, 0x9a, 0x8a, 0xc5, 0x92, 0x5d, 0x5b, 0x39, 0x5e, 0x34,
	0xd2, 0xce, 0x22, 0x4b, 0x54, 0x8a, 0x2c, 0x41, 0x71, 0x78, 0xe0, 0x3a, 0x31, 0x0b, 0x14, 0x8a,
	0x2d, 0x41, 0xfa, 0x27, 0x00, 0x59, 0x49, 0x71, 0x76, 0x25, 0xc7, 0x74, 0x1d, 0x33, 0x89, 0xeb,
	0x19, 0xd0, 0x77, 0xa1, 0x95, 0x2b, 0x44, 0x22, 0x6d, 0x4d, 0xd7, 0x45, 0xeb, 0xce, 0x5a, 0xa1,
	0x69, 0x34, 0x4c, 0xd7, 0x7d, 0x24, 0xcf, 0x23, 0x74, 0xea, 0xb9, 0x86, 0x59, 0x9e, 0x2a, 0x73,
	0xd1, 0x54, 0x83, 0x3b, 0xf5, 0x8f, 0xa0, 0xbe, 0x95, 0x84, 0x3e, 0x89, 0x98, 0x94, 0x5e, 0x24,
	0x26, 0xfa, 0xa7, 0xea, 0xcc, 0x54, 0x29, 0x13, 0xb7, 0x55, 0xad, 0x34, 0xe2, 0xca, 0x6c, 0x29,
	0xcb, 0x0c, 0xf1, 0x20, 0x55, 0x26, 0xa5, 0xc1, 0xfa, 0x06, 0x34, 0x5f, 0x5a, 0x7d, 0x56, 0x04,
	0x28, 0x67, 0x04, 0x98, 0x51, 0x8f, 0xd6, 0x7f, 0x0a, 0x90, 0xd5, 0x54, 0x95, 0xd4, 0xf2, 0x2a,
	0x28, 0xb5, 0xb7, 0xa0, 0x69, 0x1d, 0x3b, 0xae, 0x1d, 0x4a, 0xaf, 0x70, 0xeb, 0xac, 0x0a, 0x9b,
	0xf6, 0x8b, 0x1b, 0x50, 0xa5, 0x52, 0x71, 0x25, 0xd3, 0xe9, 0x69, 0x9d, 0x98, 0x7a, 0xf4, 0x33,
	0xe8, 0x70, 0xb4, 0xf4, 0x1a, 0xbe, 0x66, 0x51, 0xa9, 0x96, 0x2f, 0x28, 0xd5, 0x2b, 0x50, 0x27,
	0xe7, 0x25, 0xb9, 0x8d, 0x82, 0x5e, 0xa0, 0x6c, 0xff, 0xa1, 0x0c, 0xc0, 0x5b, 0xef, 0xfa, 0xb6,
	0x2c, 0xa6, 0x25, 0x4a, 0xd3, 0x69, 0x09, 0x01, 0xd5, 0xf4, 0x2b, 0x00, 0xcd, 0xa0, 0x76, 0x66,
	0x26, 0x55, 0xaa, 0x82, 0xcd, 0xe4, 0xdb, 0xa0, 0x91, 0x7f, 0xe9, 0x7c, 0x49, 0xa5, 0x1f, 0xdc,
	0x30, 0x43, 0xe4, 0x6b, 0xe2, 0xb5, 0x62, 0x4d, 0x3c, 0x2d, 0xcc, 0xd5, 0x79, 0x35, 0x2e, 0xcc,
	0xcd, 0xaa, 0x75, 0x52, 0xae, 0x28, 0x92, 0x61, 0x9c, 0x24, 0x3a, 0x18, 0x4a, 0x63, 0x76, 0x4d,
	0x8d, 0x35, 0x39, 0xdb, 0xe3, 0xf9, 0x23, 0xcb, 0xf7, 0x0e, 0x5d, 0xc7, 0x8a, 0x55, 0x0d, 0x1c,
	0x3c, 0xff, 0x81, 0xc2, 0xd0, 0x62, 0x9e, 0xf3, 0xb3, 0x09, 0xbb, 0x99, 0xb8, 0x18, 0x41, 0xe2,
	0x13, 0x68, 0xd1, 0x7d, 0x46, 0x51, 0x20, 0xad, 0xa8, 0xdf, 0xa6, 0x87, 0x26, 0xcb, 0xc2, 0x15,
	0xd2, 0x6d, 0xec, 0x1c, 0x04, 0xd2, 0x32, 0xc0, 0x49, 0x9a, 0x91, 0xfe, 0x19, 0xb4, 0x93, 0xd7,
	0xa4, 0xc2, 0xe0, 0xad, 0x34, 0x3a, 0x2e, 0x65, 0x9c, 0x92, 0x11, 0x7d, 0xbd, 0xdc, 0x2f, 0x25,
	0xf1, 0xb1, 0xfe, 0x37, 0xd5, 0x64, 0xb2, 0xaa, 0x5f, 0xbd, 0xfc, 0x45, 0x8a, 0x09, 0x8f, 0xf2,
	0x6b, 0x25, 0x3c, 0xbe, 0x03, 0x9a, 0x4d, 0x31, 0xbc, 0x73, 0x9a, 0x18, 0xcb, 0xc5, 0xe9, 0x78,
	0x5d, 0x45, 0xf9, 0x14, 0x3d, 0xa4, 0x83, 0x5f, 0xf1, 0xaa, 0xe9, 0xdb, 0xd5, 0x66, 0xbd, 0x5d,
	0xfd, 0x1b, 0xbe, 0x5d, 0xf6, 0x34, 0xdd, 0xc2, 0xd3, 0xbc, 0x03, 0x6d, 0xcf, 0xf7, 0x46, 0xde,
	0xc4, 0x75, 0xcd, 0x03, 0x57, 0xaa, 0x47, 0x6d, 0x79, 0xbe, 0xb7, 0xab, 0x50, 0x18, 0x47, 0xe4,
	0x87, 0xb0, 0xea, 0xe0, 0x07, 0x9e, 0xcf, 0x8d, 0x23, 0x05, 0xb3, 0x0c, 0x3d, 0xff, 0xe0, 0xa7,
	0xd2, 0x8a, 0x89, 0x92, 0x23, 0xd2, 0x19, 0x1c, 0x44, 0x74, 0x19, 0x8f, 0xa4, 0x43, 0x37, 0x79,
	0x9a, 0x99, 0x3a, 0x17, 0x98, 0x69, 0x8a, 0x69, 0xe6, 0x5f, 0x8f, 0x69, 0x3e, 0x05, 0x2d, 0xa5,
	0x79, 0x2e, 0xfb, 0xa0, 0x41, 0x6d, 0x7b, 0x77, 0x63, 0xf3, 0x47, 0xbd, 0x12, 0x1a, 0x79, 0x63,
	0xf3, 0xe9, 0xa6, 0x31, 0xd8, 0xec, 0x95, 0xd1, 0xcc, 0x6e, 0x6c, 0xee, 0x6c, 0x0e, 0x37, 0x7b,
	0x15, 0x76, 0xe0, 0xa8, 0x28, 0xe5, 0x3a, 0x96, 0x13, 0xeb, 0x7b, 0x30, 0x3f, 0xb5, 0xd3, 0x4c,
	0x35, 0xb8, 0x0c, 0x0d, 0x3f, 0x48, 0xfc, 0xf9, 0x94, 0x2f, 0xf7, 0x08, 0xb5, 0x6f, 0x3a, 0xa1,
	0x91, 0x74, 0xa3, 0xfd, 0xc8, 0xd0, 0xaf, 0xfa, 0x12, 0x40, 0x53, 0x3e, 0x99, 0x3e, 0x00, 0xc8,
	0x32, 0x3b, 0x68, 0xb8, 0x32, 0xca, 0xaa, 0xd4, 0x72, 0x9c, 0xd0, 0x74, 0x39, 0xd5, 0x59, 0xe5,
	0x17, 0xe5, 0x8f, 0xb8, 0x5f, 0x5f, 0x05, 0xed, 0xb1, 0x19, 0x7c, 0xce, 0x55, 0xe4, 0x9b, 0xd0,
	0xa5, 0xe0, 0x28, 0x09, 0x3b, 0xd9, 0x9e, 0xb4, 0x8d, 0x4e, 0x8a, 0x45, 0xf3, 0xa4, 0xff, 0x59,
	0x09, 0x2e, 0x3f, 0xf6, 0x4f, 0x65, 0x1a, 0x2c, 0xec, 0x9b, 0xe7, 0xae, 0x6f, 0xda, 0xaf, 0x90,
	0xad, 0x6b, 0x00, 0x91, 0x3f, 0xa1, 0xaa, 0x6e, 0x52, 0x03, 0x37, 0x34, 0xc6, 0x3c, 0x54, 0x1f,
	0x11, 0xc9, 0x28, 0xa6, 0x4e, 0xe5, 0x6b, 0x20, 0x8c, 0x5d, 0x6f, 0x40, 0x3d, 0x3e, 0xf3, 0xb2,
	0x8a, 0x7c, 0x2d, 0xa6, 0x92, 0xc8, 0xcc, 0xd8, 0xa1, 0x36, 0x3b, 0x76, 0xd0, 0x1f, 0x80, 0x36,
	0x3c, 0xa3, 0xa2, 0xc0, 0xa4, 0xe8, 0xbd, 0x97, 0x5e, 0xe2, 0x23, 0x96, 0xa7, 0x7c, 0xc4, 0x7f,
	0x2b, 0x41, 0x2b, 0x17, 0x04, 0x89, 0x77, 0xa0, 0x1a, 0x9f, 0x79, 0xc5, 0x0f, 0x70, 0x92, 0x4d,
	0x0c, 0xea, 0xba, 0x90, 0xf8, 0x2e, 0x5f, 0x48, 0x7c, 0x8b, 0x1d, 0x98, 0x67, 0xe3, 0x94, 0x5c,
	0x22, 0xc9, 0x0f, 0xbe, 0x3b, 0x15, 0x74, 0x71, 0xe1, 0x24, 0xb9, 0x92, 0x4a, 0x7a, 0x75, 0x8f,
	0x0a, 0xc8, 0xc5, 0x35, 0xb8, 0x34, 0x63, 0xd8, 0xd7, 0x29, 0xa1, 0xe9, 0x4b, 0xd0, 0x19, 0x9e,
	0x79, 0x43, 0x67, 0x2c, 0xa3, 0xd8, 0x1c, 0x07, 0xe4, 0x63, 0x2b, 0xe7, 0xa2, 0x6a, 0x94, 0xe3,
	0x48, 0x7f, 0x1f, 0xda, 0xfb, 0x52, 0x86, 0x86, 0x8c, 0x02, 0xdf, 0x63, 0xff, 0x51, 0x15, 0x2c,
	0xd8, 0x93, 0x51, 0x90, 0xfe, 0xff, 0x40, 0x33, 0xcc, 0xc3, 0x78, 0xdd, 0x8c, 0xad, 0xe3, 0xaf,
	0x93, 0x01, 0x7b, 0x1f, 0x1a, 0x01, 0xf3, 0x94, 0x0a, 0x8d, 0xdb, 0xe4, 0xd1, 0x28, 0x3e, 0x33,
	0x92, 0x4e, 0xfd, 0xdb, 0xd0, 0x55, 0xd5, 0xc3, 0xe4, 0x24, 0xb9, 0x12, 0x63, 0xe9, 0x85, 0x25,
	0x46, 0xfd, 0x08, 0x3a, 0xc9, 0x3c, 0xf6, 0x0f, 0x5e, 0x6b, 0xda, 0xd7, 0xff, 0x86, 0x43, 0xff,
	0xbf, 0x70, 0x69, 0x30, 0x39, 0x88, 0xac, 0xd0, 0x21, 0x79, 0x4f, 0xb6, 0x5b, 0x84, 0x66, 0x10,
	0xca, 0x43, 0xe7, 0x4c, 0x26, 0x22, 0x96, 0xc2, 0xe2, 0x16, 0x34, 0xc6, 0x48, 0x2f, 0x99, 0x09,
	0x6f, 0x16, 0xf0, 0x3f, 0xc6, 0x1e, 0x23, 0x19, 0xa0, 0x7f, 0x17, 0x2e, 0x17, 0x97, 0x57, 0x54,
	0x78, 0x17, 0x2a, 0x27, 0xa7, 0x91, 0x22, 0xf3, 0x42, 0x21, 0x61, 0x40, 0x1f, 0xcf, 0x60, 0xaf,
	0xfe, 0x57, 0x25, 0xa8, 0xec, 0x4e, 0xc6, 0xf9, 0x2f, 0x14, 0xab, 0xfc, 0x85, 0xe2, 0xd5, 0x7c,
	0x71, 0x83, 0x03, 0xd0, 0xac, 0x88, 0xf1, 0x36, 0x68, 0x87, 0x7e, 0xf8, 0x73, 0x33, 0xb4, 0xa5,
	0xad, 0x9c, 0x94, 0x0c, 0x41, 0xd1, 0xc5, 0x64, 0x1c, 0x28, 0x9b, 0x45, 0x6d, 0x71, 0x53, 0xb9,
	0x39, 0x1c, 0x14, 0x2e, 0x20, 0x65, 0x77, 0x27, 0xe3, 0x15, 0x57, 0x9a, 0x11, 0x59, 0x50, 0xf6,
	0x7c, 0xf4, 0xdb, 0xa0, 0xa5, 0x28, 0xd4, 0xd3, 0xbb, 0x83, 0xd1, 0xf6, 0x06, 0x27, 0x8c, 0x31,
	0x7c, 0x2a, 0xa1, 0x8e, 0x1e, 0xfe, 0x68, 0x77, 0x34, 0x1c, 0xf4, 0xca, 0xfa, 0x4f, 0xa0, 0x95,
	0xc8, 0xcf, 0xb6, 0x4d, 0xd5, 0x51, 0x12, 0xe0, 0x6d, 0xbb, 0x20, 0xcf, 0xdb, 0x14, 0xdf, 0x4a,
	0xcf, 0xde, 0x4e, 0x04, 0x8f, 0x81, 0xe2, 0x0d, 0x55, 0xa9, 0x35, 0xb9, 0xa1, 0xbe, 0x09, 0x0b,
	0x06, 0x55, 0x79, 0xd0, 0x9b, 0x48, 0x9e, 0xec, 0x0a, 0xd4, 0x3d, 0xdf, 0x96, 0xe9, 0x06, 0x0a,
	0xc2, 0x9d, 0xd5, 0x63, 0x2b, 0x95, 0x96, 0xbe, 0xbd, 0x84, 0x05, 0xd4, 0x92, 0x45, 0x46, 0x2b,
	0x54, 0x20, 0x4a, 0x53, 0x15, 0x08, 0xdc, 0x44, 0x7d, 0x6c, 0xc0, 0x9a, 0x3f, 0xf9, 0xc0, 0x60,
	0x11, 0x9a, 0x76, 0x14, 0x93, 0x58, 0x2b, 0xdd, 0x98, 0xc2, 0xfa, 0x5d, 0xb8, 0xb4, 0x16, 0x04,
	0xee, 0x79, 0x52, 0x9a, 0x55, 0x1b, 0xf5, 0xb3, 0xfa, 0x6d, 0x49, 0x05, 0xd5, 0x0c, 0xea, 0x5b,
	0xd0, 0x4e, 0xd2, 0x33, 0x8f, 0x65, 0x6c, 0x92, 0xc6, 0x73, 0x9d, 0x42, 0x7e, 0xa2, 0xc9, 0x88,
	0x61, 0xb1, 0xce, 0x31, 0x75, 0xbf, 0x15, 0xa8, 0x2b, 0x75, 0x2a, 0xa0, 0x6a, 0xf9, 0x36, 0x6f,
	0x54, 0x33, 0xa8, 0x8d, 0x5c, 0x35, 0x8e, 0x8e, 0x92, 0xa0, 0x60, 0x1c, 0x1d, 0xe9, 0xff, 0x59,
	0x86, 0xce, 0x3a, 0xa5, 0xed, 0x92, 0x33, 0xe6, 0x52, 0xda, 0xa5, 0x42, 0x4a, 0x3b, 0x9f, 0xbe,
	0x2e, 0x17, 0xd2, 0xd7, 0x85, 0x03, 0x55, 0x8a, 0x9e, 0xfc, 0x9b, 0xd0, 0x98, 0x78, 0xce, 0x59,
	0x62, 0x27, 0x34, 0xf2, 0x6d, 0xce, 0x86, 0x91, 0xb8, 0x01, 0x2d, 0x34, 0x25, 0x8e, 0xc7, 0x29,
	0x63, 0xce, 0xfb, 0xe6, 0x51, 0x53, 0x89, 0xe1, 0xfa, 0xcb, 0x13, 0xc3, 0x8d, 0x6f, 0x92, 0x18,
	0x6e, 0x7e, 0x83, 0xc4, 0xb0, 0x36, 0x9d, 0x18, 0x2e, 0xc6, 0x2a, 0x70, 0x21, 0x56, 0xb9, 0x06,
	0xc0, 0xdf, 0x4d, 0x1d, 0x4e, 0x5c, 0x57, 0xb9, 0x66, 0x1a, 0x61, 0xb6, 0x26, 0xae, 0xab, 0xef,
	0x40, 0x37, 0x79, 0x00, 0xa5, 0x28, 0x3e, 0x83, 0x79, 0x55, 0x18, 0x92, 0xa1, 0xca, 0x45, 0xb2,
	0xfe, 0x23, 0x29, 0xe5, 0xda, 0x8d, 0xea, 0x31, 0xba, 0x76, 0x1e, 0x8c, 0xf4, 0x5f, 0x95, 0xa0,
	0x53, 0x18, 0x21, 0xee, 0x67, 0x65, 0xa6, 0x12, 0xc9, 0x7a, 0xff, 0xc2, 0x2a, 0x2f, 0x2f, 0x35,
	0x95, 0xa7, 0x4a, 0x4d, 0xfa, 0x9d, 0xb4, 0x80, 0xa4, 0xca, 0x46, 0x73, 0x69, 0xd9, 0x88, 0x2a,
	0x2d, 0x6b, 0xc3, 0xa1, 0xd1, 0x2b, 0x8b, 0x3a, 0x94, 0x77, 0x07, 0xbd, 0x8a, 0xfe, 0xbb, 0x32,
	0x74, 0x36, 0xcf, 0x02, 0xfa, 0x86, 0xf0, 0x95, 0x81, 0x5f, 0x8e, 0xfb, 0xca, 0x05, 0xee, 0xcb,
	0xf1, 0x51, 0x45, 0xd5, 0xcd, 0x99, 0x8f, 0x30, 0x14, 0xe4, 0x34, 0xb5, 0xe2, 0x2f, 0x86, 0xfe,
	0xf7, 0xf0, 0x57, 0x41, 0x3b, 0xc1, 0x74, 0x7d, 0x74, 0x07, 0xba, 0x09, 0x71, 0x15, 0xfb, 0xbc,
	0x96, 0xe0, 0xf3, 0x37, 0xce, 0x6e, 0x9a, 0xb1, 0x64, 0x40, 0xff, 0x93, 0x32, 0x68, 0xcc, 0x8d,
	0x78, 0x9f, 0x0f, 0x95, 0x8d, 0x28, 0x65, 0xa5, 0xb8, 0xb4, 0x73, 0xe5, 0x91, 0x3c, 0xcf, 0xec,
	0xc4, 0xcc, 0xf2, 0xb5, 0xca, 0x6b, 0x72, 0x02, 0x87, 0xf2, 0x9a, 0x57, 0x41, 0x63, 0x17, 0x6f,
	0xa2, 0xea, 0x40, 0x55, 0x83, 0x7d, 0xbe, 0x27, 0x0e, 0x59, 0xa9, 0x58, 0x86, 0x63, 0xf5, 0x52,
	0xd4, 0x2e, 0x86, 0xca, 0x9d, 0x24, 0xdc, 0x2a, 0x50, 0xa4, 0x31, 0x4d, 0x91, 0x63, 0x68, 0xa8,
	0xb3, 0x61, 0x34, 0xf1, 0x64, 0xf7, 0xd1, 0xee, 0xde, 0x0f, 0x77, 0x0b, 0x3c, 0x9a, 0xc6, 0x1b,
	0xe5, 0x7c, 0xbc, 0x51, 0x41, 0xfc, 0x83, 0xbd, 0x27, 0xbb, 0xc3, 0x5e, 0x55, 0x74, 0x40, 0xa3,
	0xe6, 0xc8, 0xd8, 0x7c, 0xda, 0xab, 0x51, 0x5a, 0xf0, 0xc1, 0xe7, 0x9b, 0x8f, 0xd7, 0x7a, 0xf5,
	0xb4, 0x30, 0xda, 0xd0, 0xff, 0xb8, 0x04, 0x0b, 0x4c, 0x90, 0x7c, 0x1e, 0x2c, 0xff, 0xef, 0x83,
	0x2a, 0xff, 0xfb, 0xe0, 0x7f, 0x36, 0xf5, 0x85, 0x93, 0x26, 0x4e, 0xf2, 0x29, 0x02, 0x67, 0x6b,
	0x9b, 0x13, 0x47, 0x7d, 0x81, 0xf0, 0x77, 0x25, 0x58, 0xe4, 0xf8, 0xe2, 0x61, 0x68, 0x06, 0xc7,
	0x3f, 0xd8, 0xb9, 0x90, 0x84, 0x79, 0x91, 0xd7, 0x7d, 0x13, 0xba, 0xf4, 0xff, 0x8c, 0x9f, 0xb9,
	0x23, 0x15, 0xda, 0xf3, 0xeb, 0x76, 0x14, 0x96, 0x17, 0x12, 0x1f, 0x43, 0x9b, 0xff, 0xc7, 0x41,
	0xe5, 0x8b, 0x42, 0x19, 0xbd, 0x10, 0xdd, 0xb4, 0x78, 0x14, 0x17, 0xfd, 0xef, 0xa7, 0x93, 0xb2,
	0x7c, 0xcd, 0xc5, 0x4a, 0xb9, 0x9a, 0x32, 0xa4, 0x2c, 0xce, 0x5d, 0xb8, 0x3a, 0xf3, 0x1e, 0x8a,
	0xed, 0x73, 0x59, 0x74, 0xe6, 0x36, 0xfd, 0x77, 0x25, 0x68, 0xae, 0x4f, 0xdc, 0x13, 0x32, 0xa8,
	0xd7, 0x00, 0xa4, 0x7d, 0x24, 0xd5, 0x1f, 0x22, 0x4a, 0xa4, 0x42, 0x34, 0xc4, 0xf0, 0x5f, 0x22,
	0x3e, 0x03, 0xe0, 0x3b, 0x8e, 0xc6, 0x66, 0xa0, 0x9e, 0x88, 0xca, 0xda, 0xc9, 0x02, 0xea, 0x2e,
	0x8f, 0xcd, 0x40, 0x95, 0xb5, 0xa3, 0x04, 0xce, 0xca, 0xfd, 0x95, 0x97, 0x94, 0xfb, 0x17, 0x77,
	0xa1, 0x5b, 0x5c, 0x62, 0x46, 0x8c, 0xf9, 0x7e, 0xf1, 0x93, 0xaa, 0x8b, 0x34, 0xcc, 0xc5, 0x03,
	0x5f, 0xc0, 0xfc, 0x54, 0x25, 0xe4, 0x65, 0x7a, 0xb5, 0x20, 0x32, 0xe5, 0x69, 0x91, 0xf9, 0x08,
	0x16, 0x86, 0x66, 0x74, 0xa2, 0x62, 0xa4, 0xcc, 0x11, 0x88, 0xcd, 0xe8, 0x64, 0x94, 0x12, 0xb5,
	0x8e, 0xe0, 0xb6, 0xad, 0xdf, 0x07, 0x91, 0x1f, 0xad, 0xe8, 0x8f, 0xb1, 0x2f, 0x0e, 0x1f, 0xcb,
	0xd8, 0x4c, 0x3c, 0x16, 0x44, 0x20, 0xf1, 0x56, 0xff, 0xb6, 0x04, 0x55, 0x0c, 0x2a, 0xc4, 0x1d,
	0xd0, 0x3e, 0x97, 0x66, 0x18, 0x1f, 0x48, 0x33, 0x16, 0x85, 0x00, 0x62, 0x91, 0xe8, 0x96, 0x7d,
	0xa6, 0xa5, 0xcf, 0xdd, 0x2b, 0x89, 0x15, 0xfe, 0x88, 0x3c, 0xf9, 0x38, 0xbe, 0x93, 0x04, 0x27,
	0x14, 0xbc, 0x2c, 0x16, 0xe6, 0xeb, 0x73, 0xcb, 0x34, 0xfe, 0x0b, 0xdf, 0xf1, 0x1e, 0xf0, 0xa7,
	0xcb, 0x62, 0x3a, 0x98, 0x99, 0x9e, 0x21, 0xee, 0x40, 0x7d, 0x3b, 0xc2, 0xa8, 0xe9, 0xe2, 0x50,
	0x22, 0x7e, 0x3e, 0xa0, 0xd2, 0xe7, 0x56, 0xff, 0xbc, 0x06, 0xd5, 0x9f, 0xc8, 0xd0, 0x17, 0x1f,
	0x41, 0x43, 0x7d, 0xd4, 0x26, 0x72, 0x1f, 0xaf, 0x2d, 0x52, 0x02, 0x64, 0xea, 0x6b, 0x37, 0xda,
	0xa5, 0xc7, 0xef, 0x97, 0xd5, 0xff, 0x44, 0xf6, 0xcd, 0xdd, 0x85, 0x43, 0x7d, 0x0a, 0xbd, 0x41,
	0x1c, 0x4a, 0x73, 0x9c, 0x1b, 0x5e, 0x24, 0xd5, 0xac, 0x62, 0x22, 0xd1, 0xeb, 0x36, 0xd4, 0x39,
	0x34, 0x9d, 0x9a, 0x30, 0x5d, 0x29, 0xa4, 0xc1, 0x1f, 0x40, 0x6b, 0x70, 0xec, 0x4f, 0x5c, 0x7b,
	0x20, 0xc3, 0x53, 0x29, 0x72, 0xd1, 0xd5, 0x62, 0xae, 0xad, 0xcf, 0x89, 0xfb, 0x50, 0xc7, 0x17,
	0x09, 0xc7, 0x62, 0x21, 0x17, 0x81, 0x31, 0x9b, 0x2c, 0x8a, 0x3c, 0x2a, 0xa1, 0x94, 0xf8, 0x00,
	0x34, 0x0e, 0x05, 0x30, 0x10, 0x68, 0xa8, 0xe8, 0x82, 0x8f, 0x91, 0x0b, 0x11, 0xf4, 0x39, 0xb1,
	0x0c, 0x90, 0x8b, 0x69, 0x5f, 0x36, 0xf2, 0x63, 0xe8, 0x3c, 0x20, 0x4d, 0xb8, 0x17, 0xae, 0x1d,
	0xf8, 0x61, 0x2c, 0xa6, 0x3f, 0xb4, 0x5d, 0x9c, 0x46, 0xe8, 0x73, 0x18, 0x1d, 0x0e, 0xc3, 0x73,
	0x1e, 0xbf, 0xa0, 0x52, 0x01, 0xd9, 0x7e, 0x33, 0xe8, 0x22, 0x3e, 0x49, 0xe5, 0x2a, 0x8d, 0x00,
	0x66, 0x95, 0x1d, 0x99, 0x44, 0x2c, 0x03, 0x44, 0x22, 0xc8, 0xc2, 0x13, 0xf1, 0x06, 0x97, 0x40,
	0xa7, 0xc2, 0x95, 0x8b, 0x53, 0xb2, 0x50, 0x84, 0xa7, 0x5c, 0x08, 0x4d, 0xa6, 0xa6, 0x7c, 0x0b,
	0xda, 0xf9, 0xb0, 0x42, 0x50, 0x2d, 0x6f, 0x46, 0xa0, 0x51, 0x9c, 0xb6, 0xfa, 0xef, 0x35, 0xa8,
	0xff, 0xd0, 0x0f, 0x4f, 0x64, 0x28, 0x6e, 0x41, 0x9d, 0x8a, 0xd9, 0x4a, 0x96, 0xd2, 0xc2, 0xf6,
	0x2c, 0xda, 0xbd, 0x07, 0x1a, 0x71, 0x06, 0x0a, 0x3b, 0xf3, 0x2b, 0xfd, 0x41, 0x8d, 0x17, 0xe7,
	0xb4, 0x2f, 0x31, 0x77, 0x97, 0xb9, 0x35, 0xfd, 0x78, 0xa5, 0x50, 0x6c, 0x5e, 0xa4, 0x27, 0x7d,
	0xf4, 0x74, 0x80, 0xf2, 0x79, 0xaf, 0x84, 0x3e, 0xc5, 0x80, 0x1f, 0x0f, 0x07, 0x65, 0x7f, 0x7c,
	0x61, 0xf1, 0xcf, 0xfe, 0x69, 0xa2, 0xcf, 0x89, 0xbb, 0x50, 0x57, 0x26, 0x66, 0x21, 0x53, 0x84,
	0xc9, 0x0d, 0x7b, 0x79, 0x94, 0x9a, 0x70, 0x1f, 0xea, 0x6c, 0x8e, 0x79, 0x42, 0x21, 0xae, 0x61,
	0x3e, 0x2d, 0x7a, 0xda, 0xfa, 0x9c, 0xb8, 0x0d, 0x0d, 0x55, 0xaa, 0x16, 0x33, 0xea, 0xd6, 0x17,
	0x5e, 0xac, 0xce, 0xbe, 0x16, 0xaf, 0x5f, 0x70, 0x6a, 0x79, 0xfd, 0xa2, 0x2b, 0xc6, 0xa2, 0x6f,
	0x48, 0x4b, 0x3a, 0xb9, 0xc4, 0x9c, 0x48, 0x28, 0x32, 0x43, 0x7f, 0x7d, 0x0a, 0x9d, 0x42, 0x12,
	0x4f, 0xf4, 0x13, 0xb6, 0x98, 0xce, 0xeb, 0x5d, 0xd0, 0x1a, 0xdf, 0x05, 0x4d, 0xa5, 0x1d, 0x0e,
	0x14, 0x63, 0xcc, 0x48, 0x72, 0x2c, 0x5e, 0xcc, 0x3b, 0x90, 0x2a, 0xf8, 0x11, 0x5c, 0x9a, 0x61,
	0x5b, 0x05, 0x7d, 0x3a, 0xfd, 0x62, 0xe7, 0x61, 0x71, 0xe9, 0x85, 0xfd, 0x29, 0x01, 0xbe, 0x99,
	0x38, 0x7d, 0x0f, 0x20, 0x33, 0x31, 0x2c, 0x1b, 0x17, 0x0c, 0xd4, 0xe2, 0x95, 0x69, 0x74, 0xb2,
	0xe9, 0x7a, 0xff, 0x37, 0x5f, 0x5d, 0x2f, 0xfd, 0xf6, 0xab, 0xeb, 0xa5, 0x7f, 0xfd, 0xea, 0x7a,
	0xe9, 0x57, 0xbf, 0xbf, 0x3e, 0xf7, 0xdb, 0xdf, 0x5f, 0x9f, 0xfb, 0xc7, 0xdf, 0x5f, 0x9f, 0x3b,
	0xa8, 0xd3, 0x3f, 0x45, 0x3f, 0xfe, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x06, 0x7d, 0x1c,
	0x9f, 0x3a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	Heartbeat(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Raft_HeartbeatClient, error)
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (Raft_RaftMessageClient, error)
	JoinCluster(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*api.Payload, error)
	IsPeer(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*PeerResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Heartbeat(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Raft_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Raft_serviceDesc.Streams[0], "/pb.Raft/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftHeartbeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raft_HeartbeatClient interface {
	Recv() (*HealthInfo, error)
	grpc.ClientStream
}

type raftHeartbeatClient struct {
	grpc.ClientStream
}

func (x *raftHeartbeatClient) Recv() (*HealthInfo, error) {
	m := new(HealthInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (Raft_RaftMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Raft_serviceDesc.Streams[1], "/pb.Raft/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftRaftMessageClient{stream}
	return x, nil
}

type Raft_RaftMessageClient interface {
	Send(*RaftBatch) error
	CloseAndRecv() (*api.Payload, error)
	grpc.ClientStream
}

type raftRaftMessageClient struct {
	grpc.ClientStream
}

func (x *raftRaftMessageClient) Send(m *RaftBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftRaftMessageClient) CloseAndRecv() (*api.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) JoinCluster(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*api.Payload, error) {
	out := new(api.Payload)
	err := c.cc.Invoke(ctx, "/pb.Raft/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) IsPeer(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*PeerResponse, error) {
	out := new(PeerResponse)
	err := c.cc.Invoke(ctx, "/pb.Raft/IsPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	Heartbeat(*api.Payload, Raft_HeartbeatServer) error
	RaftMessage(Raft_RaftMessageServer) error
	JoinCluster(context.Context, *RaftContext) (*api.Payload, error)
	IsPeer(context.Context, *RaftContext) (*PeerResponse, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) Heartbeat(req *api.Payload, srv Raft_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedRaftServer) RaftMessage(srv Raft_RaftMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RaftMessage not implemented")
}
func (*UnimplementedRaftServer) JoinCluster(ctx context.Context, req *RaftContext) (*api.Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (*UnimplementedRaftServer) IsPeer(ctx context.Context, req *RaftContext) (*PeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPeer not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaftServer).Heartbeat(m, &raftHeartbeatServer{stream})
}

type Raft_HeartbeatServer interface {
	Send(*HealthInfo) error
	grpc.ServerStream
}

type raftHeartbeatServer struct {
	grpc.ServerStream
}

func (x *raftHeartbeatServer) Send(m *HealthInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Raft_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).RaftMessage(&raftRaftMessageServer{stream})
}

type Raft_RaftMessageServer interface {
	SendAndClose(*api.Payload) error
	Recv() (*RaftBatch, error)
	grpc.ServerStream
}

type raftRaftMessageServer struct {
	grpc.ServerStream
}

func (x *raftRaftMessageServer) SendAndClose(m *api.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftRaftMessageServer) Recv() (*RaftBatch, error) {
	m := new(RaftBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Raft_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).JoinCluster(ctx, req.(*RaftContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_IsPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).IsPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/IsPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).IsPeer(ctx, req.(*RaftContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCluster",
			Handler:    _Raft_JoinCluster_Handler,
		},
		{
			MethodName: "IsPeer",
			Handler:    _Raft_IsPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _Raft_Heartbeat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RaftMessage",
			Handler:       _Raft_RaftMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb.proto",
}

// ZeroClient is the client API for Zero service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZeroClient interface {
	// These 3 endpoints are for handling membership.
	Connect(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ConnectionState, error)
	UpdateMembership(ctx context.Context, in *Group, opts ...grpc.CallOption) (*api.Payload, error)
	StreamMembership(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Zero_StreamMembershipClient, error)
	Oracle(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Zero_OracleClient, error)
	ShouldServe(ctx context.Context, in *Tablet, opts ...grpc.CallOption) (*Tablet, error)
	Inform(ctx context.Context, in *TabletRequest, opts ...grpc.CallOption) (*TabletResponse, error)
	AssignIds(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error)
	Timestamps(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error)
	CommitOrAbort(ctx context.Context, in *api.TxnContext, opts ...grpc.CallOption) (*api.TxnContext, error)
	TryAbort(ctx context.Context, in *TxnTimestamps, opts ...grpc.CallOption) (*OracleDelta, error)
	DeleteNamespace(ctx context.Context, in *DeleteNsRequest, opts ...grpc.CallOption) (*Status, error)
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*Status, error)
	MoveTablet(ctx context.Context, in *MoveTabletRequest, opts ...grpc.CallOption) (*Status, error)
	ApplyLicense(ctx context.Context, in *ApplyLicenseRequest, opts ...grpc.CallOption) (*Status, error)
}

type zeroClient struct {
	cc *grpc.ClientConn
}

func NewZeroClient(cc *grpc.ClientConn) ZeroClient {
	return &zeroClient{cc}
}

func (c *zeroClient) Connect(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ConnectionState, error) {
	out := new(ConnectionState)
	err := c.cc.Invoke(ctx, "/pb.Zero/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) UpdateMembership(ctx context.Context, in *Group, opts ...grpc.CallOption) (*api.Payload, error) {
	out := new(api.Payload)
	err := c.cc.Invoke(ctx, "/pb.Zero/UpdateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) StreamMembership(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Zero_StreamMembershipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zero_serviceDesc.Streams[0], "/pb.Zero/StreamMembership", opts...)
	if err != nil {
		return nil, err
	}
	x := &zeroStreamMembershipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zero_StreamMembershipClient interface {
	Recv() (*MembershipState, error)
	grpc.ClientStream
}

type zeroStreamMembershipClient struct {
	grpc.ClientStream
}

func (x *zeroStreamMembershipClient) Recv() (*MembershipState, error) {
	m := new(MembershipState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zeroClient) Oracle(ctx context.Context, in *api.Payload, opts ...grpc.CallOption) (Zero_OracleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Zero_serviceDesc.Streams[1], "/pb.Zero/Oracle", opts...)
	if err != nil {
		return nil, err
	}
	x := &zeroOracleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zero_OracleClient interface {
	Recv() (*OracleDelta, error)
	grpc.ClientStream
}

type zeroOracleClient struct {
	grpc.ClientStream
}

func (x *zeroOracleClient) Recv() (*OracleDelta, error) {
	m := new(OracleDelta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zeroClient) ShouldServe(ctx context.Context, in *Tablet, opts ...grpc.CallOption) (*Tablet, error) {
	out := new(Tablet)
	err := c.cc.Invoke(ctx, "/pb.Zero/ShouldServe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) Inform(ctx context.Context, in *TabletRequest, opts ...grpc.CallOption) (*TabletResponse, error) {
	out := new(TabletResponse)
	err := c.cc.Invoke(ctx, "/pb.Zero/Inform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) AssignIds(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error) {
	out := new(AssignedIds)
	err := c.cc.Invoke(ctx, "/pb.Zero/AssignIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) Timestamps(ctx context.Context, in *Num, opts ...grpc.CallOption) (*AssignedIds, error) {
	out := new(AssignedIds)
	err := c.cc.Invoke(ctx, "/pb.Zero/Timestamps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) CommitOrAbort(ctx context.Context, in *api.TxnContext, opts ...grpc.CallOption) (*api.TxnContext, error) {
	out := new(api.TxnContext)
	err := c.cc.Invoke(ctx, "/pb.Zero/CommitOrAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) TryAbort(ctx context.Context, in *TxnTimestamps, opts ...grpc.CallOption) (*OracleDelta, error) {
	out := new(OracleDelta)
	err := c.cc.Invoke(ctx, "/pb.Zero/TryAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) DeleteNamespace(ctx context.Context, in *DeleteNsRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Zero/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Zero/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) MoveTablet(ctx context.Context, in *MoveTabletRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Zero/MoveTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) ApplyLicense(ctx context.Context, in *ApplyLicenseRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Zero/ApplyLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeroServer is the server API for Zero service.
type ZeroServer interface {
	// These 3 endpoints are for handling membership.
	Connect(context.Context, *Member) (*ConnectionState, error)
	UpdateMembership(context.Context, *Group) (*api.Payload, error)
	StreamMembership(*api.Payload, Zero_StreamMembershipServer) error
	Oracle(*api.Payload, Zero_OracleServer) error
	ShouldServe(context.Context, *Tablet) (*Tablet, error)
	Inform(context.Context, *TabletRequest) (*TabletResponse, error)
	AssignIds(context.Context, *Num) (*AssignedIds, error)
	Timestamps(context.Context, *Num) (*AssignedIds, error)
	CommitOrAbort(context.Context, *api.TxnContext) (*api.TxnContext, error)
	TryAbort(context.Context, *TxnTimestamps) (*OracleDelta, error)
	DeleteNamespace(context.Context, *DeleteNsRequest) (*Status, error)
	RemoveNode(context.Context, *RemoveNodeRequest) (*Status, error)
	MoveTablet(context.Context, *MoveTabletRequest) (*Status, error)
	ApplyLicense(context.Context, *ApplyLicenseRequest) (*Status, error)
}

// UnimplementedZeroServer can be embedded to have forward compatible implementations.
type UnimplementedZeroServer struct {
}

func (*UnimplementedZeroServer) Connect(ctx context.Context, req *Member) (*ConnectionState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedZeroServer) UpdateMembership(ctx context.Context, req *Group) (*api.Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (*UnimplementedZeroServer) StreamMembership(req *api.Payload, srv Zero_StreamMembershipServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMembership not implemented")
}
func (*UnimplementedZeroServer) Oracle(req *api.Payload, srv Zero_OracleServer) error {
	return status.Errorf(codes.Unimplemented, "method Oracle not implemented")
}
func (*UnimplementedZeroServer) ShouldServe(ctx context.Context, req *Tablet) (*Tablet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldServe not implemented")
}
func (*UnimplementedZeroServer) Inform(ctx context.Context, req *TabletRequest) (*TabletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inform not implemented")
}
func (*UnimplementedZeroServer) AssignIds(ctx context.Context, req *Num) (*AssignedIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignIds not implemented")
}
func (*UnimplementedZeroServer) Timestamps(ctx context.Context, req *Num) (*AssignedIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timestamps not implemented")
}
func (*UnimplementedZeroServer) CommitOrAbort(ctx context.Context, req *api.TxnContext) (*api.TxnContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOrAbort not implemented")
}
func (*UnimplementedZeroServer) TryAbort(ctx context.Context, req *TxnTimestamps) (*OracleDelta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryAbort not implemented")
}
func (*UnimplementedZeroServer) DeleteNamespace(ctx context.Context, req *DeleteNsRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedZeroServer) RemoveNode(ctx context.Context, req *RemoveNodeRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (*UnimplementedZeroServer) MoveTablet(ctx context.Context, req *MoveTabletRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTablet not implemented")
}
func (*UnimplementedZeroServer) ApplyLicense(ctx context.Context, req *ApplyLicenseRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLicense not implemented")
}

func RegisterZeroServer(s *grpc.Server, srv ZeroServer) {
	s.RegisterService(&_Zero_serviceDesc, srv)
}

func _Zero_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).Connect(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/UpdateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).UpdateMembership(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_StreamMembership_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZeroServer).StreamMembership(m, &zeroStreamMembershipServer{stream})
}

type Zero_StreamMembershipServer interface {
	Send(*MembershipState) error
	grpc.ServerStream
}

type zeroStreamMembershipServer struct {
	grpc.ServerStream
}

func (x *zeroStreamMembershipServer) Send(m *MembershipState) error {
	return x.ServerStream.SendMsg(m)
}

func _Zero_Oracle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZeroServer).Oracle(m, &zeroOracleServer{stream})
}

type Zero_OracleServer interface {
	Send(*OracleDelta) error
	grpc.ServerStream
}

type zeroOracleServer struct {
	grpc.ServerStream
}

func (x *zeroOracleServer) Send(m *OracleDelta) error {
	return x.ServerStream.SendMsg(m)
}

func _Zero_ShouldServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tablet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).ShouldServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/ShouldServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).ShouldServe(ctx, req.(*Tablet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_Inform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).Inform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/Inform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).Inform(ctx, req.(*TabletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_AssignIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).AssignIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/AssignIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).AssignIds(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_Timestamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).Timestamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/Timestamps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).Timestamps(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_CommitOrAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.TxnContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).CommitOrAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/CommitOrAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).CommitOrAbort(ctx, req.(*api.TxnContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_TryAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnTimestamps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).TryAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/TryAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).TryAbort(ctx, req.(*TxnTimestamps))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).DeleteNamespace(ctx, req.(*DeleteNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_MoveTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTabletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).MoveTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/MoveTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).MoveTablet(ctx, req.(*MoveTabletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_ApplyLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).ApplyLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Zero/ApplyLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).ApplyLicense(ctx, req.(*ApplyLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zero_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Zero",
	HandlerType: (*ZeroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Zero_Connect_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _Zero_UpdateMembership_Handler,
		},
		{
			MethodName: "ShouldServe",
			Handler:    _Zero_ShouldServe_Handler,
		},
		{
			MethodName: "Inform",
			Handler:    _Zero_Inform_Handler,
		},
		{
			MethodName: "AssignIds",
			Handler:    _Zero_AssignIds_Handler,
		},
		{
			MethodName: "Timestamps",
			Handler:    _Zero_Timestamps_Handler,
		},
		{
			MethodName: "CommitOrAbort",
			Handler:    _Zero_CommitOrAbort_Handler,
		},
		{
			MethodName: "TryAbort",
			Handler:    _Zero_TryAbort_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Zero_DeleteNamespace_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Zero_RemoveNode_Handler,
		},
		{
			MethodName: "MoveTablet",
			Handler:    _Zero_MoveTablet_Handler,
		},
		{
			MethodName: "ApplyLicense",
			Handler:    _Zero_ApplyLicense_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMembership",
			Handler:       _Zero_StreamMembership_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Oracle",
			Handler:       _Zero_Oracle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	// Data serving RPCs.
	Mutate(ctx context.Context, in *Mutations, opts ...grpc.CallOption) (*api.TxnContext, error)
	ServeTask(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	StreamSnapshot(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamSnapshotClient, error)
	Sort(ctx context.Context, in *SortMessage, opts ...grpc.CallOption) (*SortResult, error)
	Schema(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResult, error)
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Status, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	ReceivePredicate(ctx context.Context, opts ...grpc.CallOption) (Worker_ReceivePredicateClient, error)
	MovePredicate(ctx context.Context, in *MovePredicatePayload, opts ...grpc.CallOption) (*api.Payload, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Worker_SubscribeClient, error)
	UpdateGraphQLSchema(ctx context.Context, in *UpdateGraphQLSchemaRequest, opts ...grpc.CallOption) (*UpdateGraphQLSchemaResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNsRequest, opts ...grpc.CallOption) (*Status, error)
	TaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Mutate(ctx context.Context, in *Mutations, opts ...grpc.CallOption) (*api.TxnContext, error) {
	out := new(api.TxnContext)
	err := c.cc.Invoke(ctx, "/pb.Worker/Mutate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ServeTask(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.Worker/ServeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StreamSnapshot(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/pb.Worker/StreamSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamSnapshotClient{stream}
	return x, nil
}

type Worker_StreamSnapshotClient interface {
	Send(*Snapshot) error
	Recv() (*KVS, error)
	grpc.ClientStream
}

type workerStreamSnapshotClient struct {
	grpc.ClientStream
}

func (x *workerStreamSnapshotClient) Send(m *Snapshot) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerStreamSnapshotClient) Recv() (*KVS, error) {
	m := new(KVS)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Sort(ctx context.Context, in *SortMessage, opts ...grpc.CallOption) (*SortResult, error) {
	out := new(SortResult)
	err := c.cc.Invoke(ctx, "/pb.Worker/Sort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Schema(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResult, error) {
	out := new(SchemaResult)
	err := c.cc.Invoke(ctx, "/pb.Worker/Schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/pb.Worker/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Worker/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/pb.Worker/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ReceivePredicate(ctx context.Context, opts ...grpc.CallOption) (Worker_ReceivePredicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[1], "/pb.Worker/ReceivePredicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerReceivePredicateClient{stream}
	return x, nil
}

type Worker_ReceivePredicateClient interface {
	Send(*KVS) error
	CloseAndRecv() (*api.Payload, error)
	grpc.ClientStream
}

type workerReceivePredicateClient struct {
	grpc.ClientStream
}

func (x *workerReceivePredicateClient) Send(m *KVS) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerReceivePredicateClient) CloseAndRecv() (*api.Payload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) MovePredicate(ctx context.Context, in *MovePredicatePayload, opts ...grpc.CallOption) (*api.Payload, error) {
	out := new(api.Payload)
	err := c.cc.Invoke(ctx, "/pb.Worker/MovePredicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Worker_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[2], "/pb.Worker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_SubscribeClient interface {
	Recv() (*pb.KVList, error)
	grpc.ClientStream
}

type workerSubscribeClient struct {
	grpc.ClientStream
}

func (x *workerSubscribeClient) Recv() (*pb.KVList, error) {
	m := new(pb.KVList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) UpdateGraphQLSchema(ctx context.Context, in *UpdateGraphQLSchemaRequest, opts ...grpc.CallOption) (*UpdateGraphQLSchemaResponse, error) {
	out := new(UpdateGraphQLSchemaResponse)
	err := c.cc.Invoke(ctx, "/pb.Worker/UpdateGraphQLSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteNamespace(ctx context.Context, in *DeleteNsRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/pb.Worker/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error) {
	out := new(TaskStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Worker/TaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	// Data serving RPCs.
	Mutate(context.Context, *Mutations) (*api.TxnContext, error)
	ServeTask(context.Context, *Query) (*Result, error)
	StreamSnapshot(Worker_StreamSnapshotServer) error
	Sort(context.Context, *SortMessage) (*SortResult, error)
	Schema(context.Context, *SchemaRequest) (*SchemaResult, error)
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	Restore(context.Context, *RestoreRequest) (*Status, error)
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
	ReceivePredicate(Worker_ReceivePredicateServer) error
	MovePredicate(context.Context, *MovePredicatePayload) (*api.Payload, error)
	Subscribe(*SubscriptionRequest, Worker_SubscribeServer) error
	UpdateGraphQLSchema(context.Context, *UpdateGraphQLSchemaRequest) (*UpdateGraphQLSchemaResponse, error)
	DeleteNamespace(context.Context, *DeleteNsRequest) (*Status, error)
	TaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error)
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) Mutate(ctx context.Context, req *Mutations) (*api.TxnContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (*UnimplementedWorkerServer) ServeTask(ctx context.Context, req *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServeTask not implemented")
}
func (*UnimplementedWorkerServer) StreamSnapshot(srv Worker_StreamSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshot not implemented")
}
func (*UnimplementedWorkerServer) Sort(ctx context.Context, req *SortMessage) (*SortResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sort not implemented")
}
func (*UnimplementedWorkerServer) Schema(ctx context.Context, req *SchemaRequest) (*SchemaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (*UnimplementedWorkerServer) Backup(ctx context.Context, req *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedWorkerServer) Restore(ctx context.Context, req *RestoreRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedWorkerServer) Export(ctx context.Context, req *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (*UnimplementedWorkerServer) ReceivePredicate(srv Worker_ReceivePredicateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePredicate not implemented")
}
func (*UnimplementedWorkerServer) MovePredicate(ctx context.Context, req *MovePredicatePayload) (*api.Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePredicate not implemented")
}
func (*UnimplementedWorkerServer) Subscribe(req *SubscriptionRequest, srv Worker_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedWorkerServer) UpdateGraphQLSchema(ctx context.Context, req *UpdateGraphQLSchemaRequest) (*UpdateGraphQLSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGraphQLSchema not implemented")
}
func (*UnimplementedWorkerServer) DeleteNamespace(ctx context.Context, req *DeleteNsRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedWorkerServer) TaskStatus(ctx context.Context, req *TaskStatusRequest) (*TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStatus not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mutations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Mutate(ctx, req.(*Mutations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ServeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ServeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/ServeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ServeTask(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StreamSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).StreamSnapshot(&workerStreamSnapshotServer{stream})
}

type Worker_StreamSnapshotServer interface {
	Send(*KVS) error
	Recv() (*Snapshot, error)
	grpc.ServerStream
}

type workerStreamSnapshotServer struct {
	grpc.ServerStream
}

func (x *workerStreamSnapshotServer) Send(m *KVS) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerStreamSnapshotServer) Recv() (*Snapshot, error) {
	m := new(Snapshot)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_Sort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Sort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Sort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Sort(ctx, req.(*SortMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Schema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Schema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Schema(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ReceivePredicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).ReceivePredicate(&workerReceivePredicateServer{stream})
}

type Worker_ReceivePredicateServer interface {
	SendAndClose(*api.Payload) error
	Recv() (*KVS, error)
	grpc.ServerStream
}

type workerReceivePredicateServer struct {
	grpc.ServerStream
}

func (x *workerReceivePredicateServer) SendAndClose(m *api.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerReceivePredicateServer) Recv() (*KVS, error) {
	m := new(KVS)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_MovePredicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePredicatePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).MovePredicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/MovePredicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).MovePredicate(ctx, req.(*MovePredicatePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).Subscribe(m, &workerSubscribeServer{stream})
}

type Worker_SubscribeServer interface {
	Send(*pb.KVList) error
	grpc.ServerStream
}

type workerSubscribeServer struct {
	grpc.ServerStream
}

func (x *workerSubscribeServer) Send(m *pb.KVList) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_UpdateGraphQLSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGraphQLSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateGraphQLSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/UpdateGraphQLSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateGraphQLSchema(ctx, req.(*UpdateGraphQLSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteNamespace(ctx, req.(*DeleteNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Worker/TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mutate",
			Handler:    _Worker_Mutate_Handler,
		},
		{
			MethodName: "ServeTask",
			Handler:    _Worker_ServeTask_Handler,
		},
		{
			MethodName: "Sort",
			Handler:    _Worker_Sort_Handler,
		},
		{
			MethodName: "Schema",
			Handler:    _Worker_Schema_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _Worker_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Worker_Restore_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _Worker_Export_Handler,
		},
		{
			MethodName: "MovePredicate",
			Handler:    _Worker_MovePredicate_Handler,
		},
		{
			MethodName: "UpdateGraphQLSchema",
			Handler:    _Worker_UpdateGraphQLSchema_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Worker_DeleteNamespace_Handler,
		},
		{
			MethodName: "TaskStatus",
			Handler:    _Worker_TaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshot",
			Handler:       _Worker_StreamSnapshot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePredicate",
			Handler:       _Worker_ReceivePredicate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Worker_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb.proto",
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		for iNdEx := len(m.Uids) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uids[iNdEx]))
		}
		i = encodeVarintPb(dAtA, i, uint64(len(m.Uids)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ValType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SrcFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrcFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrcFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCount {
		i--
		if m.IsCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.First != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x78
	}
	if m.Cache != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Cache))
		i--
		dAtA[i] = 0x70
	}
	if m.ReadTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReadTs))
		i--
		dAtA[i] = 0x68
	}
	if m.ExpandAll {
		i--
		if m.ExpandAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.FacetsFilter != nil {
		{
			size, err := m.FacetsFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FacetParam != nil {
		{
			size, err := m.FacetParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SrcFunc != nil {
		{
			size, err := m.SrcFunc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UidList != nil {
		{
			size, err := m.UidList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DoCount {
		i--
		if m.DoCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AfterUid != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AfterUid))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Langs) > 0 {
		for iNdEx := len(m.Langs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Langs[iNdEx])
			copy(dAtA[i:], m.Langs[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Langs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Attr) > 0 {
		i -= len(m.Attr)
		copy(dAtA[i:], m.Attr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Attr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LangList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LangList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LangList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lang) > 0 {
		for iNdEx := len(m.Lang) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Lang[iNdEx])
			copy(dAtA[i:], m.Lang[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Lang[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VectorMetrics) > 0 {
		for k := range m.VectorMetrics {
			v := m.VectorMetrics[k]
			baseI := i
			i = encodeVarintPb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.List {
		i--
		if m.List {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.LangMatrix) > 0 {
		for iNdEx := len(m.LangMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LangMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FacetMatrix) > 0 {
		for iNdEx := len(m.FacetMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FacetMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IntersectDest {
		i--
		if m.IntersectDest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Counts) > 0 {
		dAtA6 := make([]byte, len(m.Counts)*10)
		var j5 int
		for _, num := range m.Counts {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPb(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValueMatrix) > 0 {
		for iNdEx := len(m.ValueMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValueMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UidMatrix) > 0 {
		for iNdEx := len(m.UidMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UidMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Langs) > 0 {
		for iNdEx := len(m.Langs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Langs[iNdEx])
			copy(dAtA[i:], m.Langs[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Langs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Desc {
		i--
		if m.Desc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attr) > 0 {
		i -= len(m.Attr)
		copy(dAtA[i:], m.Attr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Attr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SortMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReadTs))
		i--
		dAtA[i] = 0x68
	}
	if m.Offset != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UidMatrix) > 0 {
		for iNdEx := len(m.UidMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UidMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Order[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SortResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UidMatrix) > 0 {
		for iNdEx := len(m.UidMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UidMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RaftContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLearner {
		i--
		if m.IsLearner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SnapshotTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.SnapshotTs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Group != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceGroupId {
		i--
		if m.ForceGroupId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.ClusterInfoOnly {
		i--
		if m.ClusterInfoOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Learner {
		i--
		if m.Learner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.LastUpdate != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x30
	}
	if m.AmDead {
		i--
		if m.AmDead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Leader {
		i--
		if m.Leader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x28
	}
	if m.Checksum != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Checksum))
		i--
		dAtA[i] = 0x20
	}
	if m.SnapshotTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.SnapshotTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tablets) > 0 {
		for k := range m.Tablets {
			v := m.Tablets[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Members) > 0 {
		for k := range m.Members {
			v := m.Members[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *License) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiryTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpiryTs))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxNodes != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxNodes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintPb(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tablets) > 0 {
		for iNdEx := len(m.Tablets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tablets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.DeleteNs != nil {
		{
			size, err := m.DeleteNs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.MaxNsID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxNsID))
		i--
		dAtA[i] = 0x60
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.License != nil {
		{
			size, err := m.License.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Txn != nil {
		{
			size, err := m.Txn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxRaftId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxRaftId))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxTxnTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxTxnTs))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxUID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxUID))
		i--
		dAtA[i] = 0x20
	}
	if m.Tablet != nil {
		{
			size, err := m.Tablet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SnapshotTs) > 0 {
		for k := range m.SnapshotTs {
			v := m.SnapshotTs[k]
			baseI := i
			i = encodeVarintPb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MembershipState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MembershipState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNsID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxNsID))
		i--
		dAtA[i] = 0x50
	}
	if m.License != nil {
		{
			size, err := m.License.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Removed) > 0 {
		for iNdEx := len(m.Removed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MaxRaftId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxRaftId))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxTxnTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxTxnTs))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxUID != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxUID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Zeros) > 0 {
		for k := range m.Zeros {
			v := m.Zeros[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Groups) > 0 {
		for k := range m.Groups {
			v := m.Groups[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Counter != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPending != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxPending))
		i--
		dAtA[i] = 0x18
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxAssigned != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxAssigned))
		i--
		dAtA[i] = 0x58
	}
	if len(m.EeFeatures) > 0 {
		for iNdEx := len(m.EeFeatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EeFeatures[iNdEx])
			copy(dAtA[i:], m.EeFeatures[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.EeFeatures[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Indexing) > 0 {
		for iNdEx := len(m.Indexing) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexing[iNdEx])
			copy(dAtA[i:], m.Indexing[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Indexing[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Ongoing) > 0 {
		for iNdEx := len(m.Ongoing) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ongoing[iNdEx])
			copy(dAtA[i:], m.Ongoing[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Ongoing[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.LastEcho != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.LastEcho))
		i--
		dAtA[i] = 0x38
	}
	if m.Uptime != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tablet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tablet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tablet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UncompressedBytes != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.UncompressedBytes))
		i--
		dAtA[i] = 0x58
	}
	if m.MoveTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MoveTs))
		i--
		dAtA[i] = 0x50
	}
	if m.ReadOnly {
		i--
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Remove {
		i--
		if m.Remove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.OnDiskBytes != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.OnDiskBytes))
		i--
		dAtA[i] = 0x38
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DirectedEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectedEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectedEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Namespace != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Namespace))
		i--
		dAtA[i] = 0x58
	}
	if len(m.AllowedPreds) > 0 {
		for iNdEx := len(m.AllowedPreds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPreds[iNdEx])
			copy(dAtA[i:], m.AllowedPreds[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.AllowedPreds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Facets) > 0 {
		for iNdEx := len(m.Facets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Facets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Op != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ValueId != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ValueId))
		i--
		dAtA[i] = 0x29
	}
	if m.ValueType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Attr) > 0 {
		i -= len(m.Attr)
		copy(dAtA[i:], m.Attr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Attr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Entity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Entity))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Mutations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mutations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mutations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DropValue) > 0 {
		i -= len(m.DropValue)
		copy(dAtA[i:], m.DropValue)
		i = encodeVarintPb(dAtA, i, uint64(len(m.DropValue)))
		i--
		dAtA[i] = 0x42
	}
	if m.DropOp != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DropOp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Schema) > 0 {
		for iNdEx := len(m.Schema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PredHints) > 0 {
		for k := range m.PredHints {
			v := m.PredHints[k]
			baseI := i
			i = encodeVarintPb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SinceTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.SinceTs))
		i--
		dAtA[i] = 0x28
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ReadTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ReadTs))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNamespaceAwareRestore {
		i--
		if m.IsNamespaceAwareRestore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.FromNamespace != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.FromNamespace))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.IsPartial {
		i--
		if m.IsPartial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IncrementalFrom != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.IncrementalFrom))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BackupNum != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BackupNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.VaultFormat) > 0 {
		i -= len(m.VaultFormat)
		copy(dAtA[i:], m.VaultFormat)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultFormat)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.VaultField) > 0 {
		i -= len(m.VaultField)
		copy(dAtA[i:], m.VaultField)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultField)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.VaultPath) > 0 {
		i -= len(m.VaultPath)
		copy(dAtA[i:], m.VaultPath)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultPath)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VaultSecretidFile) > 0 {
		i -= len(m.VaultSecretidFile)
		copy(dAtA[i:], m.VaultSecretidFile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultSecretidFile)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VaultRoleidFile) > 0 {
		i -= len(m.VaultRoleidFile)
		copy(dAtA[i:], m.VaultRoleidFile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultRoleidFile)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VaultAddr) > 0 {
		i -= len(m.VaultAddr)
		copy(dAtA[i:], m.VaultAddr)
		i = encodeVarintPb(dAtA, i, uint64(len(m.VaultAddr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EncryptionKeyFile) > 0 {
		i -= len(m.EncryptionKeyFile)
		copy(dAtA[i:], m.EncryptionKeyFile)
		i = encodeVarintPb(dAtA, i, uint64(len(m.EncryptionKeyFile)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Anonymous {
		i--
		if m.Anonymous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.SessionToken) > 0 {
		i -= len(m.SessionToken)
		copy(dAtA[i:], m.SessionToken)
		i = encodeVarintPb(dAtA, i, uint64(len(m.SessionToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecretKey) > 0 {
		i -= len(m.SecretKey)
		copy(dAtA[i:], m.SecretKey)
		i = encodeVarintPb(dAtA, i, uint64(len(m.SecretKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintPb(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackupId) > 0 {
		i -= len(m.BackupId)
		copy(dAtA[i:], m.BackupId)
		i = encodeVarintPb(dAtA, i, uint64(len(m.BackupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RestoreTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.RestoreTs))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DeleteNs != nil {
		{
			size, err := m.DeleteNs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.CdcState != nil {
		{
			size, err := m.CdcState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Restore != nil {
		{
			size, err := m.Restore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ExpectedChecksum != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpectedChecksum))
		i--
		dAtA[i] = 0x58
	}
	if m.Index != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x50
	}
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Delta != nil {
		{
			size, err := m.Delta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.CleanPredicate) > 0 {
		i -= len(m.CleanPredicate)
		copy(dAtA[i:], m.CleanPredicate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.CleanPredicate)))
		i--
		dAtA[i] = 0x32
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Kv) > 0 {
		for iNdEx := len(m.Kv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Mutations != nil {
		{
			size, err := m.Mutations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CDCState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDCState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDCState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SentTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.SentTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Predicates[iNdEx])
			copy(dAtA[i:], m.Predicates[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Predicates[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Posting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Posting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Posting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommitTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x70
	}
	if m.StartTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x68
	}
	if m.Op != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Facets) > 0 {
		for iNdEx := len(m.Facets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Facets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.LangTag) > 0 {
		i -= len(m.LangTag)
		copy(dAtA[i:], m.LangTag)
		i = encodeVarintPb(dAtA, i, uint64(len(m.LangTag)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PostingType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.PostingType))
		i--
		dAtA[i] = 0x20
	}
	if m.ValType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ValType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *UidBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UidBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UidBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumUids != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.NumUids))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Deltas) > 0 {
		i -= len(m.Deltas)
		copy(dAtA[i:], m.Deltas)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Deltas)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Base))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UidPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UidPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UidPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllocRef != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.AllocRef))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockSize != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostingList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostingList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Splits) > 0 {
		dAtA31 := make([]byte, len(m.Splits)*10)
		var j30 int
		for _, num := range m.Splits {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintPb(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0x22
	}
	if m.CommitTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Postings) > 0 {
		for iNdEx := len(m.Postings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Postings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pack != nil {
		{
			size, err := m.Pack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FacetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FacetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FacetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FacetParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FacetParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FacetParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		for iNdEx := len(m.Param) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Param[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AllKeys {
		i--
		if m.AllKeys {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Facets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Facets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Facets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Facets) > 0 {
		for iNdEx := len(m.Facets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Facets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FacetsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FacetsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FacetsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FacetsList) > 0 {
		for iNdEx := len(m.FacetsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FacetsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Function) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Function) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Func != nil {
		{
			size, err := m.Func.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Predicates[iNdEx])
			copy(dAtA[i:], m.Predicates[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Predicates[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchemaNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexSpecs) > 0 {
		for iNdEx := len(m.IndexSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.NoConflict {
		i--
		if m.NoConflict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Lang {
		i--
		if m.Lang {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Upsert {
		i--
		if m.Upsert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.List {
		i--
		if m.List {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Count {
		i--
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Reverse {
		i--
		if m.Reverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Tokenizer) > 0 {
		for iNdEx := len(m.Tokenizer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokenizer[iNdEx])
			copy(dAtA[i:], m.Tokenizer[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Tokenizer[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Index {
		i--
		if m.Index {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		for iNdEx := len(m.Schema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexSpecs) > 0 {
		for iNdEx := len(m.IndexSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.NoConflict {
		i--
		if m.NoConflict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ObjectTypeName) > 0 {
		i -= len(m.ObjectTypeName)
		copy(dAtA[i:], m.ObjectTypeName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ObjectTypeName)))
		i--
		dAtA[i] = 0x62
	}
	if m.NonNullableList {
		i--
		if m.NonNullableList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.NonNullable {
		i--
		if m.NonNullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Lang {
		i--
		if m.Lang {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Upsert {
		i--
		if m.Upsert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.List {
		i--
		if m.List {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Count {
		i--
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Tokenizer) > 0 {
		for iNdEx := len(m.Tokenizer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokenizer[iNdEx])
			copy(dAtA[i:], m.Tokenizer[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.Tokenizer[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Directive != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Directive))
		i--
		dAtA[i] = 0x18
	}
	if m.ValueType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VectorIndexSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorIndexSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorIndexSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptionPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TypeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintPb(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartitionKeys) > 0 {
		for iNdEx := len(m.PartitionKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartitionKeys[iNdEx])
			copy(dAtA[i:], m.PartitionKeys[iNdEx])
			i = encodeVarintPb(dAtA, i, uint64(len(m.PartitionKeys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MovePredicatePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MovePredicatePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MovePredicatePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectedChecksum != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.ExpectedChecksum))
		i--
		dAtA[i] = 0x28
	}
	if m.TxnTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.TxnTs))
		i--
		dAtA[i] = 0x20
	}
	if m.DestGid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.DestGid))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGid != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.SourceGid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxnStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxnStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxnStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommitTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTs != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OracleDelta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleDelta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleDelta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupChecksums) > 0 {
		for k := range m.GroupChecksums {
			v := m.GroupChecksums[k]
			baseI := i
			i = encodeVarintPb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxAssigned != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MaxAssigned))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Txns) > 0 {
		for iNdEx := len(m.Txns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TxnTimestamps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxnTimestamps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxnTimestamps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ts) > 0 {
		dAtA35 := make([]byte, len(m.Ts)*10)
		var j34 int
		for _, num := range m.Ts {
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		i -= j34
		copy(dAtA[i:], dAtA35[:j34])
		i = encodeVarintPb(dAtA, i, uint64(j34))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TabletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TabletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tablets) > 0 {
		for iNdEx := len(m.Tablets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tablets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TabletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TabletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tablets) > 0 {
		for iNdEx := len(m.Tablets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tablets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMeta.ProtoReflect.Descriptor instead.
func (*BulkMeta) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{72}
}

func (x *BulkMeta) GetEdgeCount() int64 {
	if x != nil {
		return x.EdgeCount
	}
	return 0
}

func (x *BulkMeta) GetSchemaMap() map[string]*SchemaUpdate {
	if x != nil {
		return x.SchemaMap
	}
	return nil
}

func (x *BulkMeta) GetTypes() []*TypeUpdate {
	if x != nil {
		return x.Types
	}
	return nil
}

type DeleteNsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Namespace uint64 `protobuf:"varint,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteNsRequest) Reset() {
	*x = DeleteNsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNsRequest) ProtoMessage() {}

func (x *DeleteNsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNsRequest.ProtoReflect.Descriptor instead.
func (*DeleteNsRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteNsRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteNsRequest) GetNamespace() uint64 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

type TaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TaskStatusRequest) Reset() {
	*x = TaskStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusRequest) ProtoMessage() {}

func (x *TaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusRequest.ProtoReflect.Descriptor instead.
func (*TaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{74}
}

func (x *TaskStatusRequest) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type TaskStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskMeta uint64 `protobuf:"varint,1,opt,name=task_meta,json=taskMeta,proto3" json:"task_meta,omitempty"`
}

func (x *TaskStatusResponse) Reset() {
	*x = TaskStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusResponse) ProtoMessage() {}

func (x *TaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusResponse.ProtoReflect.Descriptor instead.
func (*TaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{75}
}

func (x *TaskStatusResponse) GetTaskMeta() uint64 {
	if x != nil {
		return x.TaskMeta
	}
	return 0
}

var File_pb_proto protoreflect.FileDescriptor

var file_pb_proto_rawDesc = []byte{
	0x0a, 0x08, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2d, 0x69, 0x6f, 0x2f, 0x64, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x34, 0x30, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2d, 0x69, 0x6f, 0x2f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x34, 0x2f, 0x70,
	0x62, 0x2f, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06,
	0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x76, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x72, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x72, 0x63, 0x46,
	0x75, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x66, 0x61, 0x63, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x33, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x32, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x22, 0xa0, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x27, 0x0a, 0x0a, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x75,
	0x69, 0x64, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0b, 0x66, 0x61, 0x63, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x0b,
	0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0a, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x75,
	0x69, 0x64, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x54, 0x73, 0x22,
	0x35, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x75, 0x69, 0x64,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x22, 0x85, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x6d, 0x44, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x73, 0x1a, 0x46, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x46, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xac, 0x04, 0x0a, 0x0c, 0x5a, 0x65,
	0x72, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x73, 0x12, 0x22, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x4e, 0x73, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4e,
	0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x66, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x74, 0x78, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73, 0x12, 0x24, 0x0a,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xf1, 0x03, 0x0a, 0x0f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x7a, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x4e, 0x73, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4e,
	0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x66, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x1a, 0x44, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0xb8, 0x02, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x63, 0x68,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x63, 0x68,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x65, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x06,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xe2, 0x02, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x06, 0x44, 0x72, 0x6f,
	0x70, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x1a, 0x53, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x08, 0x48, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x54, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x73, 0x22, 0x74, 0x0a,
	0x0c, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xdb, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x69,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x69,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0xea, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x6b,
	0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x34, 0x2e, 0x4b, 0x56, 0x52, 0x02, 0x6b, 0x76, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x23,
	0x0a, 0x08, 0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x73, 0x22, 0x63, 0x0a, 0x03, 0x4b, 0x56, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x80, 0x04, 0x0a, 0x07, 0x50, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67,
	0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22,
	0xa0, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x4f, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x49, 0x44,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x47, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x46, 0x4c, 0x4f, 0x41, 0x54,
	0x10, 0x0c, 0x22, 0x31, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x46, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c,
	0x41, 0x4e, 0x47, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x08, 0x55,
	0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x22, 0x6b,
	0x0a, 0x07, 0x55, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x69,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x66, 0x22, 0x8c, 0x01, 0x0a, 0x0b,
	0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x22, 0x4e, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x2c, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x22, 0x39,
	0x0a, 0x0a, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x6a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2a, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x75, 0x6e,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x22, 0x78, 0x0a, 0x0d, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xc1, 0x04, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x39,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x53, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x4d, 0x6f,
	0x76, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x47, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x6e, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x54,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x43,
	0x0a, 0x09, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x04, 0x74, 0x78, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x0d, 0x54, 0x78,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x09, 0x52, 0x61, 0x66, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x36, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x0d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x70, 0x62, 0x34, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x70, 0x62, 0x34, 0x2e, 0x4b, 0x56,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x03, 0x4e, 0x75,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x75,
	0x6d, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x2e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x53, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x58,
	0x4e, 0x5f, 0x54, 0x53, 0x10, 0x02, 0x22, 0x5a, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x45, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x11, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x2f, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x78, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x46, 0x75, 0x6c, 0x6c, 0x22, 0x4c, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x70,
	0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72,
	0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x4f,
	0x70, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x54, 0x52, 0x10, 0x02, 0x12, 0x06,
	0x0a, 0x02, 0x4e, 0x53, 0x10, 0x03, 0x22, 0xb5, 0x02, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x54, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x78, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xab, 0x02, 0x0a,
	0x09, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x68, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x56, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x69, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x33, 0x0a, 0x0c, 0x64, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x50, 0x72, 0x65, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x64, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x42, 0x75,
	0x6c, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61,
	0x70, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x32, 0xc4, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x66, 0x74, 0x12, 0x2d, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x0b,
	0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2e, 0x0a, 0x0b,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x06,
	0x49, 0x73, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb4, 0x05, 0x0a, 0x04,
	0x5a, 0x65, 0x72, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x06,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x1a, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x28,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x78, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x08, 0x54, 0x72, 0x79, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x78, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x1a, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x32, 0xee, 0x05, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x06, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x09, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a,
	0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x53, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x29,
	0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x56, 0x53, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x0d,
	0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x72, 0x70, 0x62, 0x34, 0x2e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pb_proto_rawDescOnce sync.Once
	file_pb_proto_rawDescData = file_pb_proto_rawDesc
)

func file_pb_proto_rawDescGZIP() []byte {
	file_pb_proto_rawDescOnce.Do(func() {
		file_pb_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_proto_rawDescData)
	})
	return file_pb_proto_rawDescData
}

var file_pb_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_pb_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_pb_proto_goTypes = []interface{}{
	(DirectedEdge_Op)(0),                // 0: pb.DirectedEdge.Op
	(Mutations_DropOp)(0),               // 1: pb.Mutations.DropOp
	(Metadata_HintType)(0),              // 2: pb.Metadata.HintType
	(Posting_ValType)(0),                // 3: pb.Posting.ValType
	(Posting_PostingType)(0),            // 4: pb.Posting.PostingType
	(SchemaUpdate_Directive)(0),         // 5: pb.SchemaUpdate.Directive
	(NumLeaseType)(0),                   // 6: pb.Num.leaseType
	(DropOperation_DropOp)(0),           // 7: pb.DropOperation.DropOp
	(BackupKey_KeyType)(0),              // 8: pb.BackupKey.KeyType
	(*List)(nil),                        // 9: pb.List
	(*TaskValue)(nil),                   // 10: pb.TaskValue
	(*SrcFunction)(nil),                 // 11: pb.SrcFunction
	(*Query)(nil),                       // 12: pb.Query
	(*ValueList)(nil),                   // 13: pb.ValueList
	(*LangList)(nil),                    // 14: pb.LangList
	(*Result)(nil),                      // 15: pb.Result
	(*Order)(nil),                       // 16: pb.Order
	(*SortMessage)(nil),                 // 17: pb.SortMessage
	(*SortResult)(nil),                  // 18: pb.SortResult
	(*RaftContext)(nil),                 // 19: pb.RaftContext
	(*Member)(nil),                      // 20: pb.Member
	(*Group)(nil),                       // 21: pb.Group
	(*License)(nil),                     // 22: pb.License
	(*ZeroProposal)(nil),                // 23: pb.ZeroProposal
	(*MembershipState)(nil),             // 24: pb.MembershipState
	(*ConnectionState)(nil),             // 25: pb.ConnectionState
	(*HealthInfo)(nil),                  // 26: pb.HealthInfo
	(*Tablet)(nil),                      // 27: pb.Tablet
	(*DirectedEdge)(nil),                // 28: pb.DirectedEdge
	(*Mutations)(nil),                   // 29: pb.Mutations
	(*Metadata)(nil),                    // 30: pb.Metadata
	(*Snapshot)(nil),                    // 31: pb.Snapshot
	(*ZeroSnapshot)(nil),                // 32: pb.ZeroSnapshot
	(*RestoreRequest)(nil),              // 33: pb.RestoreRequest
	(*Proposal)(nil),                    // 34: pb.Proposal
	(*CDCState)(nil),                    // 35: pb.CDCState
	(*KVS)(nil),                         // 36: pb.KVS
	(*Posting)(nil),                     // 37: pb.Posting
	(*UidBlock)(nil),                    // 38: pb.UidBlock
	(*UidPack)(nil),                     // 39: pb.UidPack
	(*PostingList)(nil),                 // 40: pb.PostingList
	(*FacetParam)(nil),                  // 41: pb.FacetParam
	(*FacetParams)(nil),                 // 42: pb.FacetParams
	(*Facets)(nil),                      // 43: pb.Facets
	(*FacetsList)(nil),                  // 44: pb.FacetsList
	(*Function)(nil),                    // 45: pb.Function
	(*FilterTree)(nil),                  // 46: pb.FilterTree
	(*SchemaRequest)(nil),               // 47: pb.SchemaRequest
	(*SchemaNode)(nil),                  // 48: pb.SchemaNode
	(*SchemaResult)(nil),                // 49: pb.SchemaResult
	(*SchemaUpdate)(nil),                // 50: pb.SchemaUpdate
	(*VectorIndexSpec)(nil),             // 51: pb.VectorIndexSpec
	(*OptionPair)(nil),                  // 52: pb.OptionPair
	(*TypeUpdate)(nil),                  // 53: pb.TypeUpdate
	(*MapHeader)(nil),                   // 54: pb.MapHeader
	(*MovePredicatePayload)(nil),        // 55: pb.MovePredicatePayload
	(*TxnStatus)(nil),                   // 56: pb.TxnStatus
	(*OracleDelta)(nil),                 // 57: pb.OracleDelta
	(*TxnTimestamps)(nil),               // 58: pb.TxnTimestamps
	(*PeerResponse)(nil),                // 59: pb.PeerResponse
	(*RaftBatch)(nil),                   // 60: pb.RaftBatch
	(*TabletResponse)(nil),              // 61: pb.TabletResponse
	(*TabletRequest)(nil),               // 62: pb.TabletRequest
	(*SubscriptionRequest)(nil),         // 63: pb.SubscriptionRequest
	(*SubscriptionResponse)(nil),        // 64: pb.SubscriptionResponse
	(*Num)(nil),                         // 65: pb.Num
	(*AssignedIds)(nil),                 // 66: pb.AssignedIds
	(*RemoveNodeRequest)(nil),           // 67: pb.RemoveNodeRequest
	(*MoveTabletRequest)(nil),           // 68: pb.MoveTabletRequest
	(*ApplyLicenseRequest)(nil),         // 69: pb.ApplyLicenseRequest
	(*SnapshotMeta)(nil),                // 70: pb.SnapshotMeta
	(*Status)(nil),                      // 71: pb.Status
	(*BackupRequest)(nil),               // 72: pb.BackupRequest
	(*BackupResponse)(nil),              // 73: pb.BackupResponse
	(*DropOperation)(nil),               // 74: pb.DropOperation
	(*ExportRequest)(nil),               // 75: pb.ExportRequest
	(*ExportResponse)(nil),              // 76: pb.ExportResponse
	(*BackupKey)(nil),                   // 77: pb.BackupKey
	(*BackupPostingList)(nil),           // 78: pb.BackupPostingList
	(*UpdateGraphQLSchemaRequest)(nil),  // 79: pb.UpdateGraphQLSchemaRequest
	(*UpdateGraphQLSchemaResponse)(nil), // 80: pb.UpdateGraphQLSchemaResponse
	(*BulkMeta)(nil),                    // 81: pb.BulkMeta
	(*DeleteNsRequest)(nil),             // 82: pb.DeleteNsRequest
	(*TaskStatusRequest)(nil),           // 83: pb.TaskStatusRequest
	(*TaskStatusResponse)(nil),          // 84: pb.TaskStatusResponse
	nil,                                 // 85: pb.Result.VectorMetricsEntry
	nil,                                 // 86: pb.Group.MembersEntry
	nil,                                 // 87: pb.Group.TabletsEntry
	nil,                                 // 88: pb.ZeroProposal.SnapshotTsEntry
	nil,                                 // 89: pb.MembershipState.GroupsEntry
	nil,                                 // 90: pb.MembershipState.ZerosEntry
	nil,                                 // 91: pb.Metadata.PredHintsEntry
	nil,                                 // 92: pb.OracleDelta.GroupChecksumsEntry
	nil,                                 // 93: pb.BulkMeta.SchemaMapEntry
	(*api.TxnContext)(nil),              // 94: api.TxnContext
	(*api.Facet)(nil),                   // 95: api.Facet
	(*pb.KV)(nil),                       // 96: badgerpb4.KV
	(*api.Payload)(nil),                 // 97: api.Payload
	(*pb.Match)(nil),                    // 98: badgerpb4.Match
	(*pb.KVList)(nil),                   // 99: badgerpb4.KVList
}
var file_pb_proto_depIdxs = []int32{
	3,   // 0: pb.TaskValue.val_type:type_name -> pb.Posting.ValType
	9,   // 1: pb.Query.uid_list:type_name -> pb.List
	11,  // 2: pb.Query.src_func:type_name -> pb.SrcFunction
	42,  // 3: pb.Query.facet_param:type_name -> pb.FacetParams
	46,  // 4: pb.Query.facets_filter:type_name -> pb.FilterTree
	10,  // 5: pb.ValueList.values:type_name -> pb.TaskValue
	9,   // 6: pb.Result.uid_matrix:type_name -> pb.List
	13,  // 7: pb.Result.value_matrix:type_name -> pb.ValueList
	44,  // 8: pb.Result.facet_matrix:type_name -> pb.FacetsList
	14,  // 9: pb.Result.lang_matrix:type_name -> pb.LangList
	85,  // 10: pb.Result.vector_metrics:type_name -> pb.Result.VectorMetricsEntry
	16,  // 11: pb.SortMessage.order:type_name -> pb.Order
	9,   // 12: pb.SortMessage.uid_matrix:type_name -> pb.List
	9,   // 13: pb.SortResult.uid_matrix:type_name -> pb.List
	86,  // 14: pb.Group.members:type_name -> pb.Group.MembersEntry
	87,  // 15: pb.Group.tablets:type_name -> pb.Group.TabletsEntry
	88,  // 16: pb.ZeroProposal.snapshot_ts:type_name -> pb.ZeroProposal.SnapshotTsEntry
	20,  // 17: pb.ZeroProposal.member:type_name -> pb.Member
	27,  // 18: pb.ZeroProposal.tablet:type_name -> pb.Tablet
	94,  // 19: pb.ZeroProposal.txn:type_name -> api.TxnContext
	22,  // 20: pb.ZeroProposal.license:type_name -> pb.License
	32,  // 21: pb.ZeroProposal.snapshot:type_name -> pb.ZeroSnapshot
	82,  // 22: pb.ZeroProposal.delete_ns:type_name -> pb.DeleteNsRequest
	27,  // 23: pb.ZeroProposal.tablets:type_name -> pb.Tablet
	89,  // 24: pb.MembershipState.groups:type_name -> pb.MembershipState.GroupsEntry
	90,  // 25: pb.MembershipState.zeros:type_name -> pb.MembershipState.ZerosEntry
	20,  // 26: pb.MembershipState.removed:type_name -> pb.Member
	22,  // 27: pb.MembershipState.license:type_name -> pb.License
	20,  // 28: pb.ConnectionState.member:type_name -> pb.Member
	24,  // 29: pb.ConnectionState.state:type_name -> pb.MembershipState
	3,   // 30: pb.DirectedEdge.value_type:type_name -> pb.Posting.ValType
	0,   // 31: pb.DirectedEdge.op:type_name -> pb.DirectedEdge.Op
	95,  // 32: pb.DirectedEdge.facets:type_name -> api.Facet
	28,  // 33: pb.Mutations.edges:type_name -> pb.DirectedEdge
	50,  // 34: pb.Mutations.schema:type_name -> pb.SchemaUpdate
	53,  // 35: pb.Mutations.types:type_name -> pb.TypeUpdate
	1,   // 36: pb.Mutations.drop_op:type_name -> pb.Mutations.DropOp
	30,  // 37: pb.Mutations.metadata:type_name -> pb.Metadata
	91,  // 38: pb.Metadata.pred_hints:type_name -> pb.Metadata.PredHintsEntry
	19,  // 39: pb.Snapshot.context:type_name -> pb.RaftContext
	24,  // 40: pb.ZeroSnapshot.state:type_name -> pb.MembershipState
	29,  // 41: pb.Proposal.mutations:type_name -> pb.Mutations
	96,  // 42: pb.Proposal.kv:type_name -> badgerpb4.KV
	24,  // 43: pb.Proposal.state:type_name -> pb.MembershipState
	57,  // 44: pb.Proposal.delta:type_name -> pb.OracleDelta
	31,  // 45: pb.Proposal.snapshot:type_name -> pb.Snapshot
	33,  // 46: pb.Proposal.restore:type_name -> pb.RestoreRequest
	35,  // 47: pb.Proposal.cdc_state:type_name -> pb.CDCState
	82,  // 48: pb.Proposal.delete_ns:type_name -> pb.DeleteNsRequest
	3,   // 49: pb.Posting.val_type:type_name -> pb.Posting.ValType
	4,   // 50: pb.Posting.posting_type:type_name -> pb.Posting.PostingType
	95,  // 51: pb.Posting.facets:type_name -> api.Facet
	38,  // 52: pb.UidPack.blocks:type_name -> pb.UidBlock
	39,  // 53: pb.PostingList.pack:type_name -> pb.UidPack
	37,  // 54: pb.PostingList.postings:type_name -> pb.Posting
	41,  // 55: pb.FacetParams.param:type_name -> pb.FacetParam
	95,  // 56: pb.Facets.facets:type_name -> api.Facet
	43,  // 57: pb.FacetsList.facets_list:type_name -> pb.Facets
	46,  // 58: pb.FilterTree.children:type_name -> pb.FilterTree
	45,  // 59: pb.FilterTree.func:type_name -> pb.Function
	51,  // 60: pb.SchemaNode.index_specs:type_name -> pb.VectorIndexSpec
	48,  // 61: pb.SchemaResult.schema:type_name -> pb.SchemaNode
	3,   // 62: pb.SchemaUpdate.value_type:type_name -> pb.Posting.ValType
	5,   // 63: pb.SchemaUpdate.directive:type_name -> pb.SchemaUpdate.Directive
	51,  // 64: pb.SchemaUpdate.index_specs:type_name -> pb.VectorIndexSpec
	52,  // 65: pb.VectorIndexSpec.options:type_name -> pb.OptionPair
	50,  // 66: pb.TypeUpdate.fields:type_name -> pb.SchemaUpdate
	56,  // 67: pb.OracleDelta.txns:type_name -> pb.TxnStatus
	92,  // 68: pb.OracleDelta.group_checksums:type_name -> pb.OracleDelta.GroupChecksumsEntry
	19,  // 69: pb.RaftBatch.context:type_name -> pb.RaftContext
	97,  // 70: pb.RaftBatch.payload:type_name -> api.Payload
	27,  // 71: pb.TabletResponse.tablets:type_name -> pb.Tablet
	27,  // 72: pb.TabletRequest.tablets:type_name -> pb.Tablet
	98,  // 73: pb.SubscriptionRequest.matches:type_name -> badgerpb4.Match
	99,  // 74: pb.SubscriptionResponse.kvs:type_name -> badgerpb4.KVList
	6,   // 75: pb.Num.type:type_name -> pb.Num.leaseType
	74,  // 76: pb.BackupResponse.drop_operations:type_name -> pb.DropOperation
	7,   // 77: pb.DropOperation.drop_op:type_name -> pb.DropOperation.DropOp
	8,   // 78: pb.BackupKey.type:type_name -> pb.BackupKey.KeyType
	37,  // 79: pb.BackupPostingList.postings:type_name -> pb.Posting
	50,  // 80: pb.UpdateGraphQLSchemaRequest.dgraph_preds:type_name -> pb.SchemaUpdate
	53,  // 81: pb.UpdateGraphQLSchemaRequest.dgraph_types:type_name -> pb.TypeUpdate
	93,  // 82: pb.BulkMeta.schema_map:type_name -> pb.BulkMeta.SchemaMapEntry
	53,  // 83: pb.BulkMeta.types:type_name -> pb.TypeUpdate
	20,  // 84: pb.Group.MembersEntry.value:type_name -> pb.Member
	27,  // 85: pb.Group.TabletsEntry.value:type_name -> pb.Tablet
	21,  // 86: pb.MembershipState.GroupsEntry.value:type_name -> pb.Group
	20,  // 87: pb.MembershipState.ZerosEntry.value:type_name -> pb.Member
	2,   // 88: pb.Metadata.PredHintsEntry.value:type_name -> pb.Metadata.HintType
	50,  // 89: pb.BulkMeta.SchemaMapEntry.value:type_name -> pb.SchemaUpdate
	97,  // 90: pb.Raft.Heartbeat:input_type -> api.Payload
	60,  // 91: pb.Raft.RaftMessage:input_type -> pb.RaftBatch
	19,  // 92: pb.Raft.JoinCluster:input_type -> pb.RaftContext
	19,  // 93: pb.Raft.IsPeer:input_type -> pb.RaftContext
	20,  // 94: pb.Zero.Connect:input_type -> pb.Member
	21,  // 95: pb.Zero.UpdateMembership:input_type -> pb.Group
	97,  // 96: pb.Zero.StreamMembership:input_type -> api.Payload
	97,  // 97: pb.Zero.Oracle:input_type -> api.Payload
	27,  // 98: pb.Zero.ShouldServe:input_type -> pb.Tablet
	62,  // 99: pb.Zero.Inform:input_type -> pb.TabletRequest
	65,  // 100: pb.Zero.AssignIds:input_type -> pb.Num
	65,  // 101: pb.Zero.Timestamps:input_type -> pb.Num
	94,  // 102: pb.Zero.CommitOrAbort:input_type -> api.TxnContext
	58,  // 103: pb.Zero.TryAbort:input_type -> pb.TxnTimestamps
	82,  // 104: pb.Zero.DeleteNamespace:input_type -> pb.DeleteNsRequest
	67,  // 105: pb.Zero.RemoveNode:input_type -> pb.RemoveNodeRequest
	68,  // 106: pb.Zero.MoveTablet:input_type -> pb.MoveTabletRequest
	69,  // 107: pb.Zero.ApplyLicense:input_type -> pb.ApplyLicenseRequest
	29,  // 108: pb.Worker.Mutate:input_type -> pb.Mutations
	12,  // 109: pb.Worker.ServeTask:input_type -> pb.Query
	31,  // 110: pb.Worker.StreamSnapshot:input_type -> pb.Snapshot
	17,  // 111: pb.Worker.Sort:input_type -> pb.SortMessage
	47,  // 112: pb.Worker.Schema:input_type -> pb.SchemaRequest
	72,  // 113: pb.Worker.Backup:input_type -> pb.BackupRequest
	33,  // 114: pb.Worker.Restore:input_type -> pb.RestoreRequest
	75,  // 115: pb.Worker.Export:input_type -> pb.ExportRequest
	36,  // 116: pb.Worker.ReceivePredicate:input_type -> pb.KVS
	55,  // 117: pb.Worker.MovePredicate:input_type -> pb.MovePredicatePayload
	63,  // 118: pb.Worker.Subscribe:input_type -> pb.SubscriptionRequest
	79,  // 119: pb.Worker.UpdateGraphQLSchema:input_type -> pb.UpdateGraphQLSchemaRequest
	82,  // 120: pb.Worker.DeleteNamespace:input_type -> pb.DeleteNsRequest
	83,  // 121: pb.Worker.TaskStatus:input_type -> pb.TaskStatusRequest
	26,  // 122: pb.Raft.Heartbeat:output_type -> pb.HealthInfo
	97,  // 123: pb.Raft.RaftMessage:output_type -> api.Payload
	97,  // 124: pb.Raft.JoinCluster:output_type -> api.Payload
	59,  // 125: pb.Raft.IsPeer:output_type -> pb.PeerResponse
	25,  // 126: pb.Zero.Connect:output_type -> pb.ConnectionState
	97,  // 127: pb.Zero.UpdateMembership:output_type -> api.Payload
	24,  // 128: pb.Zero.StreamMembership:output_type -> pb.MembershipState
	57,  // 129: pb.Zero.Oracle:output_type -> pb.OracleDelta
	27,  // 130: pb.Zero.ShouldServe:output_type -> pb.Tablet
	61,  // 131: pb.Zero.Inform:output_type -> pb.TabletResponse
	66,  // 132: pb.Zero.AssignIds:output_type -> pb.AssignedIds
	66,  // 133: pb.Zero.Timestamps:output_type -> pb.AssignedIds
	94,  // 134: pb.Zero.CommitOrAbort:output_type -> api.TxnContext
	57,  // 135: pb.Zero.TryAbort:output_type -> pb.OracleDelta
	71,  // 136: pb.Zero.DeleteNamespace:output_type -> pb.Status
	71,  // 137: pb.Zero.RemoveNode:output_type -> pb.Status
	71,  // 138: pb.Zero.MoveTablet:output_type -> pb.Status
	71,  // 139: pb.Zero.ApplyLicense:output_type -> pb.Status
	94,  // 140: pb.Worker.Mutate:output_type -> api.TxnContext
	15,  // 141: pb.Worker.ServeTask:output_type -> pb.Result
	36,  // 142: pb.Worker.StreamSnapshot:output_type -> pb.KVS
	18,  // 143: pb.Worker.Sort:output_type -> pb.SortResult
	49,  // 144: pb.Worker.Schema:output_type -> pb.SchemaResult
	73,  // 145: pb.Worker.Backup:output_type -> pb.BackupResponse
	71,  // 146: pb.Worker.Restore:output_type -> pb.Status
	76,  // 147: pb.Worker.Export:output_type -> pb.ExportResponse
	97,  // 148: pb.Worker.ReceivePredicate:output_type -> api.Payload
	97,  // 149: pb.Worker.MovePredicate:output_type -> api.Payload
	99,  // 150: pb.Worker.Subscribe:output_type -> badgerpb4.KVList
	80,  // 151: pb.Worker.UpdateGraphQLSchema:output_type -> pb.UpdateGraphQLSchemaResponse
	71,  // 152: pb.Worker.DeleteNamespace:output_type -> pb.Status
	84,  // 153: pb.Worker.TaskStatus:output_type -> pb.TaskStatusResponse
	122, // [122:154] is the sub-list for method output_type
	90,  // [90:122] is the sub-list for method input_type
	90,  // [90:90] is the sub-list for extension type_name
	90,  // [90:90] is the sub-list for extension extendee
	0,   // [0:90] is the sub-list for field type_name
}

func init() { file_pb_proto_init() }
func file_pb_proto_init() {
	if File_pb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrcFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZeroProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tablet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectedEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZeroSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Posting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorIndexSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePredicatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Num); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignedIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveTabletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupPostingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGraphQLSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGraphQLSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pb_proto_goTypes,
		DependencyIndexes: file_pb_proto_depIdxs,
		EnumInfos:         file_pb_proto_enumTypes,
		MessageInfos:      file_pb_proto_msgTypes,
	}.Build()
	File_pb_proto = out.File
	file_pb_proto_rawDesc = nil
	file_pb_proto_goTypes = nil
	file_pb_proto_depIdxs = nil
}
