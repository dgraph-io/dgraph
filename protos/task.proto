/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use protos/gen.sh to generate .pb.go files.
syntax = "proto3";
import "facets.proto";
import "schema.proto";
import "graphresponse.proto";

package protos;

option java_package = "io.dgraph.proto";

message List {
	repeated fixed64 uids = 1;
}

message TaskValue {
	bytes val = 1;
	int32 val_type = 2;
}

message SrcFunction {
  string name = 1;
  repeated string args = 3;
  bool isCount = 4;
}

message Query {
	string attr = 1;
	repeated string langs = 2; // language list for attribute
	fixed64 after_uid = 3;  // Only return UIDs greater than this.
	bool do_count = 4;      // Are we just getting lengths?

	// Exactly one of uids and terms is populated.
	List uid_list = 5;

	// Function to generate or filter UIDs.
	SrcFunction src_func = 6;

	bool reverse = 7;  // Whether this is a reverse edge.

	Param facet_param = 8; // which facets to fetch
	FilterTree facets_filter = 9; // filtering on facets : has Op (and/or/not) tree
}

message ValueList {
	repeated TaskValue values = 1;
}

message Result {
	repeated List uid_matrix = 1;
	repeated ValueList value_matrix = 2;
	repeated uint32 counts = 3;
	bool intersect_dest = 4;
	repeated FacetsList facet_matrix = 5;
}

message Order {
	string attr = 1;
	bool desc = 2;
	repeated string langs = 3;
}

message SortMessage {
	repeated Order order = 1;
	repeated List uid_matrix = 3;
	int32 count = 4;   // Return this many elements.
	int32 offset = 5;  // Skip this many elements.
}

message SortResult {
	repeated List uid_matrix = 1;
}

message RaftContext {
	fixed64 id = 1;
	uint32 group = 2;
	string addr = 3;
}

// Member stores information about RAFT group member for a single RAFT node.
// Note that each server can be serving multiple RAFT groups. Each group would have
// one RAFT node per server serving that group.
message Member {
	fixed64 id = 1;
	uint32 group_id = 2;
	string addr = 3;
	bool leader = 4;
	bool am_dead = 5;
	uint64 last_update = 6;
}

message Group {
  map<uint64, Member> members = 1; // Raft ID is the key.
  map<string, Tablet> tablets = 2; // Predicate + others are key.
}

message ZeroProposal {
  uint32 id = 1;
  Member member = 2;
  Tablet tablet = 3;
  uint64 maxLeaseId = 4;
}

// MembershipState is used to pack together the current membership state of all the nodes
// in the caller server; and the membership updates recorded by the callee server since
// the provided lastUpdate.
message MembershipState {
  uint64 counter = 1;  // used to find latest membershipState in case of race.
  map<uint32, Group> groups = 2;
  map<uint64, Member> zeros = 3;
  uint64 maxLeaseId = 4;
}

message Tablet {
  uint32 group_id  = 1; // Served by which group.
  string predicate = 2;
	bool force       = 3; // Used while moving predicate.
  bool read_only   = 4;  // Used to block mutations on this predicate.
  int64 space      = 7;
}

message DirectedEdge {
	fixed64 entity = 1;    // Subject or source node / UID.
	string attr = 2;       // Attribute or predicate. Labels the edge.
	bytes value = 3;       // Edge points to a value.
	uint32 value_type = 4;  // The type of the value
	fixed64 value_id = 5;   // Object or destination node / UID.
	string label = 6;
	string lang = 7;
	enum Op {
		SET = 0;
		DEL = 1;
	}
	Op op = 8;
	repeated Facet facets = 9;
}

message Mutations {
	uint32 group_id = 1;
	repeated DirectedEdge edges = 2;
	repeated SchemaUpdate schema = 3;
	Query upsert = 4;
	bool DropAll = 5;
}

message KeyValues {
  repeated KV kv = 1;
}

message Proposal {
	uint32 id = 1;
	Mutations mutations = 2;
	Member membership = 3;
	repeated KV kv = 4;
	MembershipState state = 5;
	string clean_predicate = 6; // Delete the predicate which was moved to other group.
}

message KV {
	bytes key = 1;
	bytes val = 2;
	bytes userMeta = 3;
}

message KC {
	bytes key = 1;
	bytes checksum = 2;
}

message GroupKeys {
	uint32 group_id = 1;
	repeated KC keys = 2;
}
