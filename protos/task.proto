// Use protos/gen.sh to generate .pb.go files.

syntax = "proto3";
import "facets.proto";
import "schema.proto";
import "graphresponse.proto";

package protos;

message List {
	repeated fixed64 uids = 1;
}

message TaskValue {
	bytes val = 1;
	int32 val_type = 2;
}

message Query {
	string attr = 1;
	repeated string langs = 2; // language list for attribute
	fixed64 after_uid = 3;  // Only return UIDs greater than this.
	bool do_count = 4;      // Are we just getting lengths?

	// Exactly one of uids and terms is populated.
	List uid_list = 5;

	// Function to generate or filter UIDs.
	repeated string src_func = 6;

	bool reverse = 7;  // Whether this is a reverse edge.

	Param facet_param = 8; // which facets to fetch
	FilterTree facets_filter = 9; // filtering on facets : has Op (and/or/not) tree
}

message Result {
	repeated List uid_matrix = 1;
	repeated TaskValue values = 2;
	repeated uint32 counts = 3;
	bool intersect_dest = 4;
	repeated FacetsList facet_matrix = 5;
}

message SortMessage {
	string attr = 1;
	repeated string langs = 2;
	repeated List uid_matrix = 3;
	int32 count = 4;   // Return this many elements.
	int32 offset = 5;  // Skip this many elements.
	bool desc = 6;
}

message SortResult {
	repeated List uid_matrix = 1;
}

message RaftContext {
	fixed64 id = 1;
	uint32 group = 2;
	string addr = 3;
}

// Membership stores information about RAFT group membership for a single RAFT node.
// Note that each server can be serving multiple RAFT groups. Each group would have
// one RAFT node per server serving that group.
message Membership {
	fixed64 id = 1;
	uint32 group_id = 2;
	string addr = 3;
	bool leader = 4;
	bool am_dead = 5;
	uint64 last_update = 6;
}

// MembershipUpdate is used to pack together the current membership state of all the nodes
// in the caller server; and the membership updates recorded by the callee server since
// the provided lastUpdate.
message MembershipUpdate {
	repeated Membership members = 1;
	uint64 last_update = 2;

	bool redirect = 3;
	string redirect_addr = 4;
}

message DirectedEdge {
	fixed64 entity = 1;    // Subject or source node / UID.
	string attr = 2;       // Attribute or predicate. Labels the edge.
	bytes value = 3;       // Edge points to a value.
	uint32 value_type = 4;  // The type of the value
	fixed64 value_id = 5;   // Object or destination node / UID.
	string label = 6;
	string lang = 7;
	enum Op {
		SET = 0;
		DEL = 1;
	}
	Op op = 8;
	repeated Facet facets = 9;
}

message Mutations {
	uint32 group_id = 1;
	repeated DirectedEdge edges = 2;
	repeated SchemaUpdate schema = 3;
}

message RebuildIndexMessage {
	uint32 group_id = 1;
	string attr = 2;  // For simplicity, just do one attribute per request.
}

message Proposal {
	uint32 id = 1;
	Mutations mutations = 2;
	Membership membership = 3;
	RebuildIndexMessage rebuild_index = 4;
}

message KV {
	bytes key = 1;
	bytes val = 2;
}

message KC {
	bytes key = 1;
	bytes checksum = 2;
}

message GroupKeys {
	uint32 group_id = 1;
	repeated KC keys = 2;
}
