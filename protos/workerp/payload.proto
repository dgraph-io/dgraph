// Use protos/gen.sh to generate .pb.go files.

syntax = "proto3";

import "protos/taskp/task.proto";

package workerp;
option go_package = "github.com/dgraph-io/dgraph/protos/workerp";

message Payload {
	bytes Data = 1;
}

// BackupPayload is used both as a request and a response.
// When used in request, groups represents the list of groups that need to be backed up.
// When used in response, groups represent the list of groups that were backed up.
message BackupPayload {
	uint64 req_id = 1;    // Use req_id to handle duplicate requests.
	uint32 group_id = 2;  // Group id to back up.
	enum Status {
		NONE      = 0;
		SUCCESS   = 1;
		DUPLICATE = 2;
		FAILED    = 3;
	}
	Status status = 3;
}

service Worker {
	// Connection testing RPC.
	rpc Echo (Payload)             returns (Payload) {}

	// Data serving RPCs.
	rpc AssignUids (taskp.Num)                 returns (taskp.List) {}
	rpc Mutate (taskp.Mutations)               returns (Payload) {}
	rpc ServeTask (taskp.Query)                returns (taskp.Result) {}
	rpc PredicateAndSchemaData (stream taskp.GroupKeys) returns (stream taskp.KV) {}
	rpc Sort (taskp.Sort)                      returns (taskp.SortResult) {}
	rpc RebuildIndex (taskp.RebuildIndex)      returns (Payload) {}
	rpc Schema (taskp.Schema)                  returns (taskp.SchemaResult) {}

	// RAFT serving RPCs.
	rpc RaftMessage (Payload)                     returns (Payload) {}
	rpc JoinCluster (taskp.RaftContext)            returns (Payload) {}
	rpc UpdateMembership (taskp.MembershipUpdate)  returns (taskp.MembershipUpdate) {}
	rpc Backup (BackupPayload)                    returns (BackupPayload) {}
}
