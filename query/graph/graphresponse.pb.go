// Code generated by protoc-gen-gogo.
// source: graphresponse.proto
// DO NOT EDIT!

/*
	Package graph is a generated protocol buffer package.

	It is generated from these files:
		graphresponse.proto

	It has these top-level messages:
		NQuad
		Mutation
		Request
		Latency
		Property
		Node
		Response
*/
package graph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NQuad struct {
	Sub    string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Pred   string `protobuf:"bytes,2,opt,name=pred,proto3" json:"pred,omitempty"`
	ObjId  string `protobuf:"bytes,3,opt,name=objId,proto3" json:"objId,omitempty"`
	ObjVal []byte `protobuf:"bytes,4,opt,name=objVal,proto3" json:"objVal,omitempty"`
	Label  string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *NQuad) Reset()                    { *m = NQuad{} }
func (m *NQuad) String() string            { return proto.CompactTextString(m) }
func (*NQuad) ProtoMessage()               {}
func (*NQuad) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{0} }

type Mutation struct {
	Set []*NQuad `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
	Del []*NQuad `protobuf:"bytes,2,rep,name=del" json:"del,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{1} }

func (m *Mutation) GetSet() []*NQuad {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Mutation) GetDel() []*NQuad {
	if m != nil {
		return m.Del
	}
	return nil
}

type Request struct {
	Query string    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	M     *Mutation `protobuf:"bytes,2,opt,name=m" json:"m,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{2} }

func (m *Request) GetM() *Mutation {
	if m != nil {
		return m.M
	}
	return nil
}

type Latency struct {
	Parsing    string `protobuf:"bytes,1,opt,name=parsing,proto3" json:"parsing,omitempty"`
	Processing string `protobuf:"bytes,2,opt,name=processing,proto3" json:"processing,omitempty"`
	Pb         string `protobuf:"bytes,3,opt,name=pb,proto3" json:"pb,omitempty"`
}

func (m *Latency) Reset()                    { *m = Latency{} }
func (m *Latency) String() string            { return proto.CompactTextString(m) }
func (*Latency) ProtoMessage()               {}
func (*Latency) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{3} }

type Property struct {
	Prop string `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
	Val  []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (m *Property) String() string            { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{4} }

type Node struct {
	Uid        uint64      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Xid        string      `protobuf:"bytes,2,opt,name=xid,proto3" json:"xid,omitempty"`
	Attribute  string      `protobuf:"bytes,3,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Properties []*Property `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
	Children   []*Node     `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{5} }

func (m *Node) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type Response struct {
	N *Node    `protobuf:"bytes,1,opt,name=n" json:"n,omitempty"`
	L *Latency `protobuf:"bytes,2,opt,name=l" json:"l,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorGraphresponse, []int{6} }

func (m *Response) GetN() *Node {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *Response) GetL() *Latency {
	if m != nil {
		return m.L
	}
	return nil
}

func init() {
	proto.RegisterType((*NQuad)(nil), "graph.NQuad")
	proto.RegisterType((*Mutation)(nil), "graph.Mutation")
	proto.RegisterType((*Request)(nil), "graph.Request")
	proto.RegisterType((*Latency)(nil), "graph.Latency")
	proto.RegisterType((*Property)(nil), "graph.Property")
	proto.RegisterType((*Node)(nil), "graph.Node")
	proto.RegisterType((*Response)(nil), "graph.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Dgraph service

type DgraphClient interface {
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type dgraphClient struct {
	cc *grpc.ClientConn
}

func NewDgraphClient(cc *grpc.ClientConn) DgraphClient {
	return &dgraphClient{cc}
}

func (c *dgraphClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/graph.Dgraph/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dgraph service

type DgraphServer interface {
	Query(context.Context, *Request) (*Response, error)
}

func RegisterDgraphServer(s *grpc.Server, srv DgraphServer) {
	s.RegisterService(&_Dgraph_serviceDesc, srv)
}

func _Dgraph_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.Dgraph/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dgraph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graph.Dgraph",
	HandlerType: (*DgraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Dgraph_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorGraphresponse,
}

func (m *NQuad) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NQuad) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sub) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Sub)))
		i += copy(data[i:], m.Sub)
	}
	if len(m.Pred) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Pred)))
		i += copy(data[i:], m.Pred)
	}
	if len(m.ObjId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.ObjId)))
		i += copy(data[i:], m.ObjId)
	}
	if len(m.ObjVal) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.ObjVal)))
		i += copy(data[i:], m.ObjVal)
	}
	if len(m.Label) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Label)))
		i += copy(data[i:], m.Label)
	}
	return i, nil
}

func (m *Mutation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Mutation) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Set) > 0 {
		for _, msg := range m.Set {
			data[i] = 0xa
			i++
			i = encodeVarintGraphresponse(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Del) > 0 {
		for _, msg := range m.Del {
			data[i] = 0x12
			i++
			i = encodeVarintGraphresponse(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Request) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Request) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	if m.M != nil {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(m.M.Size()))
		n1, err := m.M.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Latency) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Latency) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parsing) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Parsing)))
		i += copy(data[i:], m.Parsing)
	}
	if len(m.Processing) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Processing)))
		i += copy(data[i:], m.Processing)
	}
	if len(m.Pb) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Pb)))
		i += copy(data[i:], m.Pb)
	}
	return i, nil
}

func (m *Property) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Property) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prop) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Prop)))
		i += copy(data[i:], m.Prop)
	}
	if len(m.Val) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Val)))
		i += copy(data[i:], m.Val)
	}
	return i, nil
}

func (m *Node) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Node) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGraphresponse(data, i, uint64(m.Uid))
	}
	if len(m.Xid) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Xid)))
		i += copy(data[i:], m.Xid)
	}
	if len(m.Attribute) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGraphresponse(data, i, uint64(len(m.Attribute)))
		i += copy(data[i:], m.Attribute)
	}
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			data[i] = 0x22
			i++
			i = encodeVarintGraphresponse(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			data[i] = 0x2a
			i++
			i = encodeVarintGraphresponse(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGraphresponse(data, i, uint64(m.N.Size()))
		n2, err := m.N.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.L != nil {
		data[i] = 0x12
		i++
		i = encodeVarintGraphresponse(data, i, uint64(m.L.Size()))
		n3, err := m.L.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Graphresponse(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Graphresponse(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGraphresponse(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *NQuad) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sub)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Pred)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.ObjVal)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Mutation) Size() (n int) {
	var l int
	_ = l
	if len(m.Set) > 0 {
		for _, e := range m.Set {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if len(m.Del) > 0 {
		for _, e := range m.Del {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if m.M != nil {
		l = m.M.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Latency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Parsing)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Processing)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Pb)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Property) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prop)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGraphresponse(uint64(m.Uid))
	}
	l = len(m.Xid)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	l = len(m.Attribute)
	if l > 0 {
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovGraphresponse(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.N != nil {
		l = m.N.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	if m.L != nil {
		l = m.L.Size()
		n += 1 + l + sovGraphresponse(uint64(l))
	}
	return n
}

func sovGraphresponse(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraphresponse(x uint64) (n int) {
	return sovGraphresponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NQuad) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NQuad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NQuad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sub = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pred", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pred = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjVal = append(m.ObjVal[:0], data[iNdEx:postIndex]...)
			if m.ObjVal == nil {
				m.ObjVal = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mutation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Set = append(m.Set, &NQuad{})
			if err := m.Set[len(m.Set)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Del", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Del = append(m.Del, &NQuad{})
			if err := m.Del[len(m.Del)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = &Mutation{}
			}
			if err := m.M.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Latency) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Latency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Latency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parsing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parsing = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processing = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pb = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prop = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], data[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Node{})
			if err := m.Children[len(m.Children)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.N == nil {
				m.N = &Node{}
			}
			if err := m.N.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphresponse
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L == nil {
				m.L = &Latency{}
			}
			if err := m.L.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphresponse(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphresponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphresponse(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphresponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphresponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraphresponse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraphresponse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraphresponse(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraphresponse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphresponse   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("graphresponse.proto", fileDescriptorGraphresponse) }

var fileDescriptorGraphresponse = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x9f, 0xdb, 0xa6, 0xed, 0x5e, 0xab, 0x6d, 0x32, 0x08, 0x19, 0x34, 0xa2, 0x2a, 0x17, 0x2a,
	0x0e, 0x05, 0x15, 0xce, 0x1c, 0x80, 0x0b, 0x08, 0x26, 0x66, 0x24, 0xee, 0x4e, 0xfd, 0xb4, 0x65,
	0xf2, 0x62, 0xd7, 0x71, 0x10, 0xfd, 0x26, 0x9c, 0xf9, 0x34, 0x1c, 0xf9, 0x08, 0xa8, 0x7c, 0x11,
	0xe4, 0x17, 0x67, 0x4c, 0x68, 0xb7, 0xdf, 0xbf, 0xf8, 0x3d, 0xff, 0x1c, 0xb8, 0x77, 0xe1, 0x95,
	0xbb, 0xf4, 0xd8, 0x38, 0x5b, 0x37, 0xb8, 0x72, 0xde, 0x06, 0xcb, 0x33, 0x12, 0x8b, 0x2d, 0x64,
	0x67, 0xe7, 0xad, 0xd2, 0xfc, 0x04, 0x86, 0x4d, 0x5b, 0x0a, 0xb6, 0x60, 0xcb, 0x43, 0x19, 0x21,
	0xe7, 0x30, 0x72, 0x1e, 0xb5, 0x18, 0x90, 0x44, 0x98, 0xdf, 0x87, 0xcc, 0x96, 0x57, 0xef, 0xb4,
	0x18, 0x92, 0xd8, 0x11, 0xfe, 0x00, 0xc6, 0xb6, 0xbc, 0xfa, 0xa2, 0x8c, 0x18, 0x2d, 0xd8, 0x72,
	0x2e, 0x13, 0x8b, 0x69, 0xa3, 0x4a, 0x34, 0x22, 0xeb, 0xd2, 0x44, 0x8a, 0xf7, 0x30, 0xfd, 0xd8,
	0x06, 0x15, 0x2a, 0x5b, 0xf3, 0x1c, 0x86, 0x0d, 0x06, 0xc1, 0x16, 0xc3, 0xe5, 0x6c, 0x3d, 0x5f,
	0xd1, 0x4e, 0x2b, 0x5a, 0x48, 0x46, 0x23, 0xfa, 0x1a, 0x8d, 0x18, 0xdc, 0xe5, 0x6b, 0x34, 0xc5,
	0x2b, 0x98, 0x48, 0xdc, 0xb6, 0xd8, 0x84, 0x38, 0x6c, 0xdb, 0xa2, 0xdf, 0xa5, 0x2b, 0x74, 0x84,
	0x3f, 0x06, 0x76, 0x4d, 0x37, 0x98, 0xad, 0x8f, 0xd3, 0xe7, 0xfd, 0x70, 0xc9, 0xae, 0x8b, 0xcf,
	0x30, 0xf9, 0xa0, 0x02, 0xd6, 0x9b, 0x1d, 0x17, 0x30, 0x71, 0xca, 0x37, 0x55, 0x7d, 0x91, 0x4e,
	0xe8, 0x29, 0xcf, 0x01, 0x9c, 0xb7, 0x1b, 0x6c, 0xc8, 0xec, 0xea, 0xb8, 0xa5, 0xf0, 0x23, 0x18,
	0xb8, 0x32, 0x35, 0x32, 0x70, 0x65, 0xf1, 0x1c, 0xa6, 0x9f, 0xbc, 0x75, 0xe8, 0xc3, 0xae, 0x2b,
	0xd1, 0xba, 0x74, 0x24, 0xe1, 0x58, 0xf5, 0x57, 0x65, 0xe8, 0xa0, 0xb9, 0x8c, 0xb0, 0xf8, 0xc1,
	0x60, 0x74, 0x66, 0x35, 0x46, 0xab, 0xad, 0x34, 0xa5, 0x47, 0x32, 0xc2, 0xa8, 0x7c, 0xab, 0xfa,
	0x47, 0x88, 0x90, 0x9f, 0xc2, 0xa1, 0x0a, 0xc1, 0x57, 0x65, 0x1b, 0x30, 0x4d, 0xfd, 0x27, 0xf0,
	0x67, 0xb4, 0x6c, 0x1c, 0x5e, 0x61, 0x23, 0x46, 0x54, 0x5c, 0x7f, 0xf3, 0x7e, 0x2b, 0x79, 0x2b,
	0xc2, 0x9f, 0xc0, 0x74, 0x73, 0x59, 0x19, 0xed, 0xb1, 0x16, 0x19, 0xc5, 0x67, 0x7d, 0xcf, 0x56,
	0xa3, 0xbc, 0x31, 0x8b, 0x37, 0x30, 0x95, 0xe9, 0x1f, 0xe2, 0x0f, 0x81, 0xd5, 0xb4, 0xe5, 0x7f,
	0x69, 0x56, 0xf3, 0x53, 0x60, 0x26, 0x35, 0x7e, 0x94, 0xac, 0x54, 0xb1, 0x64, 0x66, 0xfd, 0x12,
	0xc6, 0x6f, 0x49, 0xe4, 0x4f, 0x21, 0x3b, 0xa7, 0x27, 0xea, 0x53, 0xe9, 0x21, 0x1f, 0x1d, 0xdf,
	0xf0, 0x6e, 0x58, 0x71, 0xf0, 0xfa, 0xe4, 0xe7, 0x3e, 0x67, 0xbf, 0xf6, 0x39, 0xfb, 0xbd, 0xcf,
	0xd9, 0xf7, 0x3f, 0xf9, 0x41, 0x39, 0xa6, 0xbf, 0xf8, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0x0b, 0x7d, 0x5f, 0xdc, 0x02, 0x00, 0x00,
}
