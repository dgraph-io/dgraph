type Country {
    cid: ID!
    id: String! @id
    name: String! @search(by: [term])
    cities: [City]
}

type City {
    cid: ID!
    id: String! @id
    name: String! @search(by: [term])
    country: Country! @hasInverse(field: cities)
    restaurants: [RestaurantAddress] @hasInverse(field: city)
}

interface Location {
    id: ID!
    lat: Float!
    long: Float!
    address: String!
    locality: String!
    city: City!
    zipcode: Int
}

type RestaurantAddress implements Location {
    restaurant: Restaurant! @hasInverse(field: addr)
}

type Restaurant {
    id: ID!
    xid: String! @id
    name: String!  @search(by: [term])
    pic: String
    addr: RestaurantAddress
    rating: Float
    costFor2: Float
    currency: String @search(by: [hash])
    cuisines: [Cuisine]
    dishes: [Dish] @hasInverse(field: servedBy)
    createdAt: DateTime
    owner: Owner
}

type Cuisine {
    id: ID!
    name: String! @id
    restaurants: [Restaurant] @hasInverse(field: cuisines)
    dishes: [Dish] @hasInverse(field: cuisine)
    type: String! @search(by: [hash])
    public: Boolean @search
}

type Dish {
    id: ID!
    name: String! @search(by: [term])
    type: String! @search(by: [hash])
    pic: String
    price: Float
    description: String
    isVeg: Boolean
    cuisine: Cuisine
    servedBy: Restaurant
}

type Owner {
    username: String! @id
    name: String! @search(by: [hash])
    hasRestaurants: [Restaurant] @hasInverse(field: owner)
}

# Dgraph.Authorization {"VerificationKey":"secretkey","Header":"X-Test-Auth","Namespace":"https://xyz.io/jwt/claims","Algo":"HS256","Audience":["aud1","63do0q16n6ebjgkumu05kkeian","aud5"]}