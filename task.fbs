namespace task;

table Query {
	attr:string;
	count:int;
	offset:int;
	afterUid:ulong;
	getCount:ushort;

	// Exactly one of uids and terms is populated.
	uids:[ulong];
	tokens:[string];

	// Intersect results with this UID list. If uids is populated, then this is
	// an "intersection query". If terms is populated, this is a "filter query".
	toIntersect:UidList;
}

table Value {
	val:[ubyte];
	valType:ubyte;
}

table Num {
	group:uint;
	val:int;
	uids:[ulong];
}

table UidList {
	uids:[ulong];
}

table CountList {
	count:[uint];
}

table Result {
	uidmatrix:[UidList];
	values:ValueList;
	count:CountList;
}

table ValueList {
	values:[Value];
}

table KV {
	key:[ubyte];
	val:[ubyte];
}

table KC {
	key:[ubyte];
	checksum:[ubyte];
}

table GroupKeys {
	groupid:ulong;
	keys:[KC];
}

table RaftContext {
	id:ulong;
	group:uint;
	addr:string;
}

table Sort {
	attr:string;
	uidmatrix:[UidList];
	count:int;
	offset:int;
}

table SortResult {
	uidmatrix:[UidList];
}

// Membership stores information about RAFT group membership for a single RAFT node.
// Note that each server can be serving multiple RAFT groups. Each group would have
// one RAFT node per server serving that group.
table Membership {
	id:ulong;
	group:uint;
	addr:string;
	leader:bool;
	amdead:bool;
	lastUpdate:ulong;
}

// MembershipUpdate is used to pack together the current membership state of all the nodes
// in the caller server; and the membership updates recorded by the callee server since
// the provided lastUpdate.
table MembershipUpdate {
	members:[Membership];
	lastUpdate:ulong;
}
