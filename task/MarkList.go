// automatically generated by the FlatBuffers compiler, do not modify

package task

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MarkList struct {
	_tab flatbuffers.Table
}

func GetRootAsMarkList(buf []byte, offset flatbuffers.UOffsetT) *MarkList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MarkList{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MarkList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MarkList) Group() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MarkList) MutateGroup(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MarkList) Uids(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *MarkList) UidsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MarkListStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MarkListAddGroup(builder *flatbuffers.Builder, group uint32) {
	builder.PrependUint32Slot(0, group, 0)
}
func MarkListAddUids(builder *flatbuffers.Builder, uids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uids), 0)
}
func MarkListStartUidsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func MarkListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
