// automatically generated by the FlatBuffers compiler, do not modify

package task

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MembershipUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsMembershipUpdate(buf []byte, offset flatbuffers.UOffsetT) *MembershipUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MembershipUpdate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MembershipUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MembershipUpdate) Members(obj *Membership, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(Membership)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MembershipUpdate) MembersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MembershipUpdate) LastUpdate() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MembershipUpdate) MutateLastUpdate(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func MembershipUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MembershipUpdateAddMembers(builder *flatbuffers.Builder, members flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(members), 0)
}
func MembershipUpdateStartMembersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MembershipUpdateAddLastUpdate(builder *flatbuffers.Builder, lastUpdate uint64) {
	builder.PrependUint64Slot(1, lastUpdate, 0)
}
func MembershipUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
