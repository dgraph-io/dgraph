// Code generated by protoc-gen-gogo.
// source: types/facets.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		types/facets.proto

	It has these top-level messages:
		Facet
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Facet_ValType int32

const (
	Facet_STRING   Facet_ValType = 0
	Facet_INT32    Facet_ValType = 1
	Facet_FLOAT    Facet_ValType = 2
	Facet_BOOL     Facet_ValType = 3
	Facet_DATE     Facet_ValType = 4
	Facet_DATETIME Facet_ValType = 5
)

var Facet_ValType_name = map[int32]string{
	0: "STRING",
	1: "INT32",
	2: "FLOAT",
	3: "BOOL",
	4: "DATE",
	5: "DATETIME",
}
var Facet_ValType_value = map[string]int32{
	"STRING":   0,
	"INT32":    1,
	"FLOAT":    2,
	"BOOL":     3,
	"DATE":     4,
	"DATETIME": 5,
}

func (x Facet_ValType) String() string {
	return proto.EnumName(Facet_ValType_name, int32(x))
}
func (Facet_ValType) EnumDescriptor() ([]byte, []int) { return fileDescriptorFacets, []int{0, 0} }

type Facet struct {
	Key     string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValType Facet_ValType `protobuf:"varint,3,opt,name=val_type,json=valType,proto3,enum=types.Facet_ValType" json:"val_type,omitempty"`
}

func (m *Facet) Reset()                    { *m = Facet{} }
func (m *Facet) String() string            { return proto.CompactTextString(m) }
func (*Facet) ProtoMessage()               {}
func (*Facet) Descriptor() ([]byte, []int) { return fileDescriptorFacets, []int{0} }

func (m *Facet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Facet) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Facet) GetValType() Facet_ValType {
	if m != nil {
		return m.ValType
	}
	return Facet_STRING
}

func init() {
	proto.RegisterType((*Facet)(nil), "types.Facet")
	proto.RegisterEnum("types.Facet_ValType", Facet_ValType_name, Facet_ValType_value)
}
func (m *Facet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Facet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFacets(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFacets(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.ValType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFacets(dAtA, i, uint64(m.ValType))
	}
	return i, nil
}

func encodeFixed64Facets(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Facets(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFacets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Facet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovFacets(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFacets(uint64(l))
	}
	if m.ValType != 0 {
		n += 1 + sovFacets(uint64(m.ValType))
	}
	return n
}

func sovFacets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFacets(x uint64) (n int) {
	return sovFacets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Facet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFacets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Facet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Facet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFacets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFacets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFacets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFacets
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValType", wireType)
			}
			m.ValType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFacets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValType |= (Facet_ValType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFacets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFacets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFacets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFacets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFacets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFacets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFacets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFacets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFacets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFacets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFacets   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types/facets.proto", fileDescriptorFacets) }

var fileDescriptorFacets = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x4f, 0x4b, 0x4c, 0x4e, 0x2d, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x8b, 0x29, 0xad, 0x67, 0xe4, 0x62, 0x75, 0x03, 0x89, 0x0b, 0x09, 0x70, 0x31, 0x67, 0xa7,
	0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac, 0x65, 0x89,
	0x39, 0xa5, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x10, 0x8e, 0x90, 0x3e, 0x17, 0x47,
	0x59, 0x62, 0x4e, 0x3c, 0x48, 0xbb, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x88, 0x1e, 0xd8,
	0x2c, 0x3d, 0xb0, 0x39, 0x7a, 0x61, 0x89, 0x39, 0x21, 0x95, 0x05, 0xa9, 0x41, 0xec, 0x65, 0x10,
	0x86, 0x92, 0x2f, 0x17, 0x3b, 0x54, 0x4c, 0x88, 0x8b, 0x8b, 0x2d, 0x38, 0x24, 0xc8, 0xd3, 0xcf,
	0x5d, 0x80, 0x41, 0x88, 0x93, 0x8b, 0xd5, 0xd3, 0x2f, 0xc4, 0xd8, 0x48, 0x80, 0x11, 0xc4, 0x74,
	0xf3, 0xf1, 0x77, 0x0c, 0x11, 0x60, 0x12, 0xe2, 0xe0, 0x62, 0x71, 0xf2, 0xf7, 0xf7, 0x11, 0x60,
	0x06, 0xb1, 0x5c, 0x1c, 0x43, 0x5c, 0x05, 0x58, 0x84, 0x78, 0xb8, 0x38, 0x40, 0xac, 0x10, 0x4f,
	0x5f, 0x57, 0x01, 0x56, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x8f, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x62, 0xf8, 0x44, 0x96, 0xe7, 0x00, 0x00, 0x00,
}
