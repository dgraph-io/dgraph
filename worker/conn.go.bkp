package worker

import (
	"bytes"
	"context"
	"crypto/rand"
	"fmt"
	"log"
	ran "math/rand"
	"net"
	"sync"
	"time"

	"github.com/dgraph-io/dgraph/x"

	"google.golang.org/grpc"
)

var (
	errNoConnection = fmt.Errorf("No connection exists")
)

// Pool is used to manage the grpc client connections for communicating with
// other worker instances.
type pool struct {
	sync.RWMutex
	conns          chan *grpc.ClientConn
	Addr           string
	connectionLost time.Time
}

type poolsi struct {
	sync.RWMutex
	all map[string]*pool
}

var pi *poolsi

func init() {
	grpc.EnableTracing = true
	ran.Seed(123213)
	pi = new(poolsi)
	pi.all = make(map[string]*pool)
}

func pools() *poolsi {
	return pi
}

func (p *poolsi) any() *pool {
	p.RLock()
	defer p.RUnlock()
	for _, pool := range p.all {
		return pool
	}
	return nil
}

func (p *poolsi) get(addr string) *pool {
	p.RLock()
	defer p.RUnlock()
	pool, _ := p.all[addr]
	return pool
}

func (p *poolsi) connect(addr string) {
	if addr == *myAddr {
		return
	}
	p.RLock()
	_, has := p.all[addr]
	p.RUnlock()
	if has {
		return
	}

	pool := newPool(addr, 5)
	query := new(Payload)
	query.Data = make([]byte, 10)
	x.Check2(rand.Read(query.Data))

	conn, err := pool.Get()
	x.Checkf(err, "Unable to connect")

	c := NewWorkerClient(conn)
	resp, err := c.Echo(context.Background(), query)
	if err != nil {
		log.Printf("While trying to connect to %q, got error: %v\n", addr, err)
		return
	}
	x.AssertTrue(bytes.Equal(resp.Data, query.Data))
	x.Check(pool.Put(conn))
	fmt.Printf("Connection with %q successful.\n", addr)

	p.Lock()
	defer p.Unlock()
	_, has = p.all[addr]
	if has {
		return
	}
	p.all[addr] = pool
}

// NewPool initializes an instance of Pool which is used to connect with other
// workers. The pool instance also has a buffered channel,conn with capacity
// maxCap that stores the connections.
func newPool(addr string, maxCap int) *pool {
	p := new(pool)
	p.Addr = addr
	p.conns = make(chan *grpc.ClientConn, maxCap)
	p.connectionLost = time.Time{}
	conn, err := p.dialNew()
	if err != nil {
		log.Fatal(err)
		return nil
	}
	p.conns <- conn
	go func() {
		t := time.Tick(5 * time.Second)
		for {
			select {
			case <-t:
				if !p.isActive() {
					for {
						select {
						case conn = <-p.conns:
							if conn != nil {
								log.Printf("DIALER SCHEDULED: closing\n")
								conn.Close()
							}
						default:
							break
						}
					}
					// for conn, err = p.Get(); err == nil; conn, err = p.Get() {
					// 	if conn != nil {
					// 		log.Printf("DIALER SCHEDULED: closing\n")
					// 		conn.Close()
					// 	}
					// }
				}
			}
		}
	}()
	return p
}

func (p *pool) dialNew() (*grpc.ClientConn, error) {
	// ctx, cancel := context.WithCancel(context.Background())
	ctx := context.Background()
	value := ran.Int63()
	//grpc.WithBlock(),
	var conn = new(*grpc.ClientConn)
	connection, err := grpc.DialContext(ctx, p.Addr, grpc.WithBlock(), grpc.WithInsecure(), grpc.WithDialer(func(network string, timeout time.Duration) (net.Conn, error) {
		// log.Printf("DIALER: Trying to connect to %s\n", network)
		con, err := net.DialTimeout("tcp", network, timeout)
		if err != nil {
			p.Lock()
			if p.connectionLost.IsZero() {
				p.connectionLost = time.Now()
			}
			p.Unlock()
			// delete reference in pools
			// pools().Lock()
			// delete(pools().all, p.Addr)
			// pools().Unlock()

			// log.Println("DIALER: Error ", err.Error(), p.isActive())
			// debug.PrintStack()
			log.Printf("DIALER: error %d -  %s\n", value, err.Error())
			if conn != nil {
				//log.Printf("DIALER: closing %d - %s\n", value, (*conn).Close())
			}
			//cancel()
		} else {
			p.Lock()
			p.connectionLost = time.Time{}
			p.Unlock()
		}
		return con, err
	}))
	if connection != nil {
		*conn = connection
	}
	return connection, err
	// return grpc.Dial(p.Addr, grpc.WithInsecure(), grpc.WithDialer(func(network string, timeout time.Duration) (net.Conn, error) {
	// 	// log.Printf("DIALER: Trying to connect to %s\n", network)
	// 	con, err := net.DialTimeout("tcp", network, timeout)
	// 	if err != nil {
	// 		p.Lock()
	// 		if p.connectionLost.IsZero() {
	// 			p.connectionLost = time.Now()
	// 		}
	// 		p.Unlock()
	// 		// log.Println("DIALER: Error ", err.Error(), p.isActive())
	// 		// debug.PrintStack()
	// 		// log.Printf("DIALER: error %s\n", err.Error())
	// 	} else {
	// 		p.Lock()
	// 		p.connectionLost = time.Time{}
	// 		p.Unlock()
	// 	}
	// 	return con, err
	// }))
	//return grpc.Dial(p.Addr, grpc.WithInsecure())
}

func (p *pool) isActive() bool {
	active := true
	p.RLock()
	if !p.connectionLost.IsZero() {
		// if time.Now().Unix()-p.connectionLost.Unix() > 15 { // 15 seconds
		active = false
		// }
	}
	p.RUnlock()
	return active
}

// Get returns a connection from the pool of connections or a new connection if
// the pool is empty.
func (p *pool) Get() (*grpc.ClientConn, error) {
	if p == nil {
		// debug.PrintStack()
		return nil, errNoConnection
	}

	if !p.isActive() {
		return nil, fmt.Errorf("Cannot create a new connection, inactive address")
	}

	select {
	case conn := <-p.conns:
		return conn, nil
	default:
		return p.dialNew()
	}
}

// Put returns a connection to the pool or closes and discards the connection
// incase the pool channel is at capacity.
func (p *pool) Put(conn *grpc.ClientConn) error {
	// if !p.isActive() {
	// 	conn.Close()
	// }
	select {
	case p.conns <- conn:
		return nil
	default:
		return conn.Close()
	}
}
